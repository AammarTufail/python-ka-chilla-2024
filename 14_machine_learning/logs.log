2025-01-18 19:20:02,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:20:02,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:20:02,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:20:02,731:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:21:17,358:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:21:17,358:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:21:17,358:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:21:17,358:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:21:19,747:INFO:PyCaret ClassificationExperiment
2025-01-18 19:21:19,748:INFO:Logging name: juice1
2025-01-18 19:21:19,748:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-18 19:21:19,748:INFO:version 3.3.2
2025-01-18 19:21:19,748:INFO:Initializing setup()
2025-01-18 19:21:19,748:INFO:self.USI: f690
2025-01-18 19:21:19,748:INFO:self._variable_keys: {'gpu_n_jobs_param', 'X_test', '_available_plots', 'fold_generator', 'y', 'exp_id', 'exp_name_log', 'pipeline', 'USI', 'fold_groups_param', 'fix_imbalance', 'html_param', 'y_train', 'X_train', 'logging_param', 'data', 'y_test', 'X', 'target_param', '_ml_usecase', 'fold_shuffle_param', 'is_multiclass', 'memory', 'idx', 'log_plots_param', 'seed', 'gpu_param', 'n_jobs_param'}
2025-01-18 19:21:19,748:INFO:Checking environment
2025-01-18 19:21:19,748:INFO:python_version: 3.9.21
2025-01-18 19:21:19,748:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-18 19:21:19,748:INFO:machine: AMD64
2025-01-18 19:21:19,748:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-18 19:21:19,753:INFO:Memory: svmem(total=8583708672, available=1049845760, percent=87.8, used=7533862912, free=1049845760)
2025-01-18 19:21:19,753:INFO:Physical Core: 4
2025-01-18 19:21:19,753:INFO:Logical Core: 4
2025-01-18 19:21:19,753:INFO:Checking libraries
2025-01-18 19:21:19,753:INFO:System:
2025-01-18 19:21:19,753:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-18 19:21:19,753:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-18 19:21:19,753:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-18 19:21:19,753:INFO:PyCaret required dependencies:
2025-01-18 19:21:19,821:INFO:                 pip: 24.2
2025-01-18 19:21:19,821:INFO:          setuptools: 75.1.0
2025-01-18 19:21:19,821:INFO:             pycaret: 3.3.2
2025-01-18 19:21:19,821:INFO:             IPython: 8.18.1
2025-01-18 19:21:19,821:INFO:          ipywidgets: 8.1.5
2025-01-18 19:21:19,821:INFO:                tqdm: 4.67.1
2025-01-18 19:21:19,821:INFO:               numpy: 1.26.4
2025-01-18 19:21:19,821:INFO:              pandas: 2.1.4
2025-01-18 19:21:19,821:INFO:              jinja2: 3.1.5
2025-01-18 19:21:19,821:INFO:               scipy: 1.11.4
2025-01-18 19:21:19,821:INFO:              joblib: 1.3.2
2025-01-18 19:21:19,821:INFO:             sklearn: 1.4.2
2025-01-18 19:21:19,821:INFO:                pyod: 2.0.3
2025-01-18 19:21:19,821:INFO:            imblearn: 0.12.4
2025-01-18 19:21:19,821:INFO:   category_encoders: 2.6.4
2025-01-18 19:21:19,821:INFO:            lightgbm: 4.5.0
2025-01-18 19:21:19,821:INFO:               numba: 0.60.0
2025-01-18 19:21:19,821:INFO:            requests: 2.32.3
2025-01-18 19:21:19,821:INFO:          matplotlib: 3.7.5
2025-01-18 19:21:19,821:INFO:          scikitplot: 0.3.7
2025-01-18 19:21:19,821:INFO:         yellowbrick: 1.5
2025-01-18 19:21:19,821:INFO:              plotly: 5.24.1
2025-01-18 19:21:19,821:INFO:    plotly-resampler: Not installed
2025-01-18 19:21:19,821:INFO:             kaleido: 0.2.1
2025-01-18 19:21:19,821:INFO:           schemdraw: 0.15
2025-01-18 19:21:19,821:INFO:         statsmodels: 0.14.4
2025-01-18 19:21:19,821:INFO:              sktime: 0.26.0
2025-01-18 19:21:19,828:INFO:               tbats: 1.1.3
2025-01-18 19:21:19,828:INFO:            pmdarima: 2.0.4
2025-01-18 19:21:19,828:INFO:              psutil: 6.1.1
2025-01-18 19:21:19,828:INFO:          markupsafe: 3.0.2
2025-01-18 19:21:19,828:INFO:             pickle5: Not installed
2025-01-18 19:21:19,828:INFO:         cloudpickle: 3.1.1
2025-01-18 19:21:19,828:INFO:         deprecation: 2.1.0
2025-01-18 19:21:19,828:INFO:              xxhash: 3.5.0
2025-01-18 19:21:19,828:INFO:           wurlitzer: Not installed
2025-01-18 19:21:19,828:INFO:PyCaret optional dependencies:
2025-01-18 19:21:19,840:INFO:                shap: Not installed
2025-01-18 19:21:19,840:INFO:           interpret: Not installed
2025-01-18 19:21:19,840:INFO:                umap: Not installed
2025-01-18 19:21:19,840:INFO:     ydata_profiling: Not installed
2025-01-18 19:21:19,840:INFO:  explainerdashboard: Not installed
2025-01-18 19:21:19,840:INFO:             autoviz: Not installed
2025-01-18 19:21:19,840:INFO:           fairlearn: Not installed
2025-01-18 19:21:19,840:INFO:          deepchecks: Not installed
2025-01-18 19:21:19,840:INFO:             xgboost: Not installed
2025-01-18 19:21:19,840:INFO:            catboost: Not installed
2025-01-18 19:21:19,840:INFO:              kmodes: Not installed
2025-01-18 19:21:19,840:INFO:             mlxtend: Not installed
2025-01-18 19:21:19,840:INFO:       statsforecast: Not installed
2025-01-18 19:21:19,840:INFO:        tune_sklearn: Not installed
2025-01-18 19:21:19,840:INFO:                 ray: Not installed
2025-01-18 19:21:19,840:INFO:            hyperopt: Not installed
2025-01-18 19:21:19,840:INFO:              optuna: Not installed
2025-01-18 19:21:19,840:INFO:               skopt: Not installed
2025-01-18 19:21:19,840:INFO:              mlflow: 2.19.0
2025-01-18 19:21:19,841:INFO:              gradio: Not installed
2025-01-18 19:21:19,841:INFO:             fastapi: Not installed
2025-01-18 19:21:19,841:INFO:             uvicorn: Not installed
2025-01-18 19:21:19,841:INFO:              m2cgen: Not installed
2025-01-18 19:21:19,841:INFO:           evidently: Not installed
2025-01-18 19:21:19,841:INFO:               fugue: Not installed
2025-01-18 19:21:19,841:INFO:           streamlit: Not installed
2025-01-18 19:21:19,841:INFO:             prophet: Not installed
2025-01-18 19:21:19,841:INFO:None
2025-01-18 19:21:19,841:INFO:Set up data.
2025-01-18 19:21:19,862:INFO:Set up folding strategy.
2025-01-18 19:21:19,862:INFO:Set up train/test split.
2025-01-18 19:21:19,919:INFO:Set up index.
2025-01-18 19:21:19,934:INFO:Assigning column types.
2025-01-18 19:21:19,934:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-18 19:21:19,996:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:21:19,996:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:21:20,050:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,050:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,126:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:21:20,126:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:21:20,170:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,170:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-18 19:21:20,237:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:21:20,279:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,279:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,349:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:21:20,394:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,395:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,395:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-18 19:21:20,512:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,513:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,619:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,619:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:20,619:INFO:Preparing preprocessing pipeline...
2025-01-18 19:21:20,619:INFO:Set up label encoding.
2025-01-18 19:21:20,619:INFO:Set up simple imputation.
2025-01-18 19:21:20,634:INFO:Set up encoding of ordinal features.
2025-01-18 19:21:20,641:INFO:Set up encoding of categorical features.
2025-01-18 19:21:20,722:INFO:Finished creating preprocessing pipeline.
2025-01-18 19:21:20,742:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loya...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-18 19:21:20,743:INFO:Creating final display dataframe.
2025-01-18 19:21:20,982:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment     MlflowLogger
21              Experiment Name           juice1
22                          USI             f690
2025-01-18 19:21:21,120:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:21,120:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:21,238:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:21,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:21:21,247:INFO:Logging experiment in loggers
2025-01-18 19:22:10,253:INFO:PyCaret ClassificationExperiment
2025-01-18 19:22:10,254:INFO:Logging name: juice1
2025-01-18 19:22:10,254:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-18 19:22:10,254:INFO:version 3.3.2
2025-01-18 19:22:10,254:INFO:Initializing setup()
2025-01-18 19:22:10,254:INFO:self.USI: 3e05
2025-01-18 19:22:10,255:INFO:self._variable_keys: {'gpu_n_jobs_param', 'X_test', '_available_plots', 'fold_generator', 'y', 'exp_id', 'exp_name_log', 'pipeline', 'USI', 'fold_groups_param', 'fix_imbalance', 'html_param', 'y_train', 'X_train', 'logging_param', 'data', 'y_test', 'X', 'target_param', '_ml_usecase', 'fold_shuffle_param', 'is_multiclass', 'memory', 'idx', 'log_plots_param', 'seed', 'gpu_param', 'n_jobs_param'}
2025-01-18 19:22:10,255:INFO:Checking environment
2025-01-18 19:22:10,255:INFO:python_version: 3.9.21
2025-01-18 19:22:10,255:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-18 19:22:10,255:INFO:machine: AMD64
2025-01-18 19:22:10,255:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-18 19:22:10,256:INFO:Memory: svmem(total=8583708672, available=946249728, percent=89.0, used=7637458944, free=946249728)
2025-01-18 19:22:10,256:INFO:Physical Core: 4
2025-01-18 19:22:10,256:INFO:Logical Core: 4
2025-01-18 19:22:10,256:INFO:Checking libraries
2025-01-18 19:22:10,256:INFO:System:
2025-01-18 19:22:10,256:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-18 19:22:10,256:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-18 19:22:10,256:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-18 19:22:10,256:INFO:PyCaret required dependencies:
2025-01-18 19:22:10,256:INFO:                 pip: 24.2
2025-01-18 19:22:10,256:INFO:          setuptools: 75.1.0
2025-01-18 19:22:10,256:INFO:             pycaret: 3.3.2
2025-01-18 19:22:10,256:INFO:             IPython: 8.18.1
2025-01-18 19:22:10,256:INFO:          ipywidgets: 8.1.5
2025-01-18 19:22:10,258:INFO:                tqdm: 4.67.1
2025-01-18 19:22:10,258:INFO:               numpy: 1.26.4
2025-01-18 19:22:10,258:INFO:              pandas: 2.1.4
2025-01-18 19:22:10,258:INFO:              jinja2: 3.1.5
2025-01-18 19:22:10,258:INFO:               scipy: 1.11.4
2025-01-18 19:22:10,258:INFO:              joblib: 1.3.2
2025-01-18 19:22:10,258:INFO:             sklearn: 1.4.2
2025-01-18 19:22:10,258:INFO:                pyod: 2.0.3
2025-01-18 19:22:10,258:INFO:            imblearn: 0.12.4
2025-01-18 19:22:10,258:INFO:   category_encoders: 2.6.4
2025-01-18 19:22:10,258:INFO:            lightgbm: 4.5.0
2025-01-18 19:22:10,259:INFO:               numba: 0.60.0
2025-01-18 19:22:10,259:INFO:            requests: 2.32.3
2025-01-18 19:22:10,259:INFO:          matplotlib: 3.7.5
2025-01-18 19:22:10,259:INFO:          scikitplot: 0.3.7
2025-01-18 19:22:10,259:INFO:         yellowbrick: 1.5
2025-01-18 19:22:10,259:INFO:              plotly: 5.24.1
2025-01-18 19:22:10,260:INFO:    plotly-resampler: Not installed
2025-01-18 19:22:10,260:INFO:             kaleido: 0.2.1
2025-01-18 19:22:10,260:INFO:           schemdraw: 0.15
2025-01-18 19:22:10,260:INFO:         statsmodels: 0.14.4
2025-01-18 19:22:10,260:INFO:              sktime: 0.26.0
2025-01-18 19:22:10,260:INFO:               tbats: 1.1.3
2025-01-18 19:22:10,260:INFO:            pmdarima: 2.0.4
2025-01-18 19:22:10,260:INFO:              psutil: 6.1.1
2025-01-18 19:22:10,260:INFO:          markupsafe: 3.0.2
2025-01-18 19:22:10,260:INFO:             pickle5: Not installed
2025-01-18 19:22:10,260:INFO:         cloudpickle: 3.1.1
2025-01-18 19:22:10,260:INFO:         deprecation: 2.1.0
2025-01-18 19:22:10,260:INFO:              xxhash: 3.5.0
2025-01-18 19:22:10,260:INFO:           wurlitzer: Not installed
2025-01-18 19:22:10,260:INFO:PyCaret optional dependencies:
2025-01-18 19:22:10,260:INFO:                shap: Not installed
2025-01-18 19:22:10,260:INFO:           interpret: Not installed
2025-01-18 19:22:10,260:INFO:                umap: Not installed
2025-01-18 19:22:10,260:INFO:     ydata_profiling: Not installed
2025-01-18 19:22:10,260:INFO:  explainerdashboard: Not installed
2025-01-18 19:22:10,260:INFO:             autoviz: Not installed
2025-01-18 19:22:10,260:INFO:           fairlearn: Not installed
2025-01-18 19:22:10,260:INFO:          deepchecks: Not installed
2025-01-18 19:22:10,260:INFO:             xgboost: Not installed
2025-01-18 19:22:10,260:INFO:            catboost: Not installed
2025-01-18 19:22:10,260:INFO:              kmodes: Not installed
2025-01-18 19:22:10,260:INFO:             mlxtend: Not installed
2025-01-18 19:22:10,260:INFO:       statsforecast: Not installed
2025-01-18 19:22:10,260:INFO:        tune_sklearn: Not installed
2025-01-18 19:22:10,260:INFO:                 ray: Not installed
2025-01-18 19:22:10,260:INFO:            hyperopt: Not installed
2025-01-18 19:22:10,260:INFO:              optuna: Not installed
2025-01-18 19:22:10,260:INFO:               skopt: Not installed
2025-01-18 19:22:10,260:INFO:              mlflow: 2.19.0
2025-01-18 19:22:10,260:INFO:              gradio: Not installed
2025-01-18 19:22:10,260:INFO:             fastapi: Not installed
2025-01-18 19:22:10,260:INFO:             uvicorn: Not installed
2025-01-18 19:22:10,260:INFO:              m2cgen: Not installed
2025-01-18 19:22:10,260:INFO:           evidently: Not installed
2025-01-18 19:22:10,260:INFO:               fugue: Not installed
2025-01-18 19:22:10,260:INFO:           streamlit: Not installed
2025-01-18 19:22:10,260:INFO:             prophet: Not installed
2025-01-18 19:22:10,260:INFO:None
2025-01-18 19:22:10,260:INFO:Set up data.
2025-01-18 19:22:10,272:INFO:Set up folding strategy.
2025-01-18 19:22:10,272:INFO:Set up train/test split.
2025-01-18 19:22:10,282:INFO:Set up index.
2025-01-18 19:22:10,282:INFO:Assigning column types.
2025-01-18 19:22:10,294:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-18 19:22:10,371:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,372:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,422:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,502:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,502:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,548:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,549:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-18 19:22:10,613:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,716:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:22:10,765:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,766:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-18 19:22:10,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,992:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,993:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:10,994:INFO:Preparing preprocessing pipeline...
2025-01-18 19:22:10,997:INFO:Set up label encoding.
2025-01-18 19:22:10,997:INFO:Set up simple imputation.
2025-01-18 19:22:11,002:INFO:Set up encoding of ordinal features.
2025-01-18 19:22:11,003:INFO:Set up encoding of categorical features.
2025-01-18 19:22:11,064:INFO:Finished creating preprocessing pipeline.
2025-01-18 19:22:11,085:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loya...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-18 19:22:11,085:INFO:Creating final display dataframe.
2025-01-18 19:22:11,300:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             3e05
2025-01-18 19:22:11,488:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:11,488:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:11,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:11,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:22:11,598:INFO:setup() successfully completed in 1.35s...............
2025-01-18 19:22:20,451:INFO:Initializing compare_models()
2025-01-18 19:22:20,452:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-18 19:22:20,452:INFO:Checking exceptions
2025-01-18 19:22:20,459:INFO:Preparing display monitor
2025-01-18 19:22:20,503:INFO:Initializing Logistic Regression
2025-01-18 19:22:20,503:INFO:Total runtime is 1.6585985819498697e-05 minutes
2025-01-18 19:22:20,512:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:20,514:INFO:Initializing create_model()
2025-01-18 19:22:20,514:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:20,514:INFO:Checking exceptions
2025-01-18 19:22:20,514:INFO:Importing libraries
2025-01-18 19:22:20,514:INFO:Copying training dataset
2025-01-18 19:22:20,531:INFO:Defining folds
2025-01-18 19:22:20,531:INFO:Declaring metric variables
2025-01-18 19:22:20,535:INFO:Importing untrained model
2025-01-18 19:22:20,542:INFO:Logistic Regression Imported successfully
2025-01-18 19:22:20,553:INFO:Starting cross validation
2025-01-18 19:22:20,555:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:24,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:24,636:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,636:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,636:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,651:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,651:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:24,651:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,651:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,690:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:24,691:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,711:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,716:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:24,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,029:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,115:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,131:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,131:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,383:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,413:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:22:25,413:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,413:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,413:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,468:INFO:Calculating mean and std
2025-01-18 19:22:25,468:INFO:Creating metrics dataframe
2025-01-18 19:22:25,468:INFO:Uploading results into container
2025-01-18 19:22:25,468:INFO:Uploading model into container now
2025-01-18 19:22:25,468:INFO:_master_model_container: 1
2025-01-18 19:22:25,468:INFO:_display_container: 2
2025-01-18 19:22:25,468:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:22:25,468:INFO:create_model() successfully completed......................................
2025-01-18 19:22:25,594:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:25,594:INFO:Creating metrics dataframe
2025-01-18 19:22:25,613:INFO:Initializing K Neighbors Classifier
2025-01-18 19:22:25,614:INFO:Total runtime is 0.08520956834157307 minutes
2025-01-18 19:22:25,619:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:25,619:INFO:Initializing create_model()
2025-01-18 19:22:25,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:25,619:INFO:Checking exceptions
2025-01-18 19:22:25,619:INFO:Importing libraries
2025-01-18 19:22:25,619:INFO:Copying training dataset
2025-01-18 19:22:25,627:INFO:Defining folds
2025-01-18 19:22:25,627:INFO:Declaring metric variables
2025-01-18 19:22:25,635:INFO:Importing untrained model
2025-01-18 19:22:25,649:INFO:K Neighbors Classifier Imported successfully
2025-01-18 19:22:25,663:INFO:Starting cross validation
2025-01-18 19:22:25,665:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:25,823:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,823:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,823:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,923:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,928:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,929:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,929:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:25,993:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,036:INFO:Calculating mean and std
2025-01-18 19:22:26,036:INFO:Creating metrics dataframe
2025-01-18 19:22:26,036:INFO:Uploading results into container
2025-01-18 19:22:26,036:INFO:Uploading model into container now
2025-01-18 19:22:26,036:INFO:_master_model_container: 2
2025-01-18 19:22:26,036:INFO:_display_container: 2
2025-01-18 19:22:26,036:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-18 19:22:26,036:INFO:create_model() successfully completed......................................
2025-01-18 19:22:26,151:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:26,151:INFO:Creating metrics dataframe
2025-01-18 19:22:26,163:INFO:Initializing Naive Bayes
2025-01-18 19:22:26,163:INFO:Total runtime is 0.09435449838638305 minutes
2025-01-18 19:22:26,172:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:26,172:INFO:Initializing create_model()
2025-01-18 19:22:26,172:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:26,173:INFO:Checking exceptions
2025-01-18 19:22:26,173:INFO:Importing libraries
2025-01-18 19:22:26,173:INFO:Copying training dataset
2025-01-18 19:22:26,182:INFO:Defining folds
2025-01-18 19:22:26,182:INFO:Declaring metric variables
2025-01-18 19:22:26,188:INFO:Importing untrained model
2025-01-18 19:22:26,193:INFO:Naive Bayes Imported successfully
2025-01-18 19:22:26,205:INFO:Starting cross validation
2025-01-18 19:22:26,207:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:26,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,329:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,329:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,375:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,375:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,481:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,517:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,553:INFO:Calculating mean and std
2025-01-18 19:22:26,557:INFO:Creating metrics dataframe
2025-01-18 19:22:26,561:INFO:Uploading results into container
2025-01-18 19:22:26,565:INFO:Uploading model into container now
2025-01-18 19:22:26,567:INFO:_master_model_container: 3
2025-01-18 19:22:26,567:INFO:_display_container: 2
2025-01-18 19:22:26,567:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-18 19:22:26,567:INFO:create_model() successfully completed......................................
2025-01-18 19:22:26,707:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:26,707:INFO:Creating metrics dataframe
2025-01-18 19:22:26,707:INFO:Initializing Decision Tree Classifier
2025-01-18 19:22:26,707:INFO:Total runtime is 0.10341545343399047 minutes
2025-01-18 19:22:26,724:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:26,724:INFO:Initializing create_model()
2025-01-18 19:22:26,725:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:26,725:INFO:Checking exceptions
2025-01-18 19:22:26,725:INFO:Importing libraries
2025-01-18 19:22:26,725:INFO:Copying training dataset
2025-01-18 19:22:26,733:INFO:Defining folds
2025-01-18 19:22:26,733:INFO:Declaring metric variables
2025-01-18 19:22:26,737:INFO:Importing untrained model
2025-01-18 19:22:26,748:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:22:26,761:INFO:Starting cross validation
2025-01-18 19:22:26,761:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:26,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,879:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,882:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,888:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,893:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,894:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,895:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,913:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,967:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,967:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,973:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,981:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,981:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:26,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,050:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,050:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,072:INFO:Calculating mean and std
2025-01-18 19:22:27,072:INFO:Creating metrics dataframe
2025-01-18 19:22:27,072:INFO:Uploading results into container
2025-01-18 19:22:27,072:INFO:Uploading model into container now
2025-01-18 19:22:27,072:INFO:_master_model_container: 4
2025-01-18 19:22:27,072:INFO:_display_container: 2
2025-01-18 19:22:27,072:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-18 19:22:27,072:INFO:create_model() successfully completed......................................
2025-01-18 19:22:27,182:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:27,182:INFO:Creating metrics dataframe
2025-01-18 19:22:27,197:INFO:Initializing SVM - Linear Kernel
2025-01-18 19:22:27,197:INFO:Total runtime is 0.11159366766611735 minutes
2025-01-18 19:22:27,206:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:27,206:INFO:Initializing create_model()
2025-01-18 19:22:27,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:27,207:INFO:Checking exceptions
2025-01-18 19:22:27,207:INFO:Importing libraries
2025-01-18 19:22:27,207:INFO:Copying training dataset
2025-01-18 19:22:27,215:INFO:Defining folds
2025-01-18 19:22:27,216:INFO:Declaring metric variables
2025-01-18 19:22:27,217:INFO:Importing untrained model
2025-01-18 19:22:27,225:INFO:SVM - Linear Kernel Imported successfully
2025-01-18 19:22:27,240:INFO:Starting cross validation
2025-01-18 19:22:27,241:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:27,335:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,335:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,335:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,335:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,348:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,359:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,365:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,366:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,418:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,445:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,453:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,453:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,508:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,511:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,512:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:27,513:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,513:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,517:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,520:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,536:INFO:Calculating mean and std
2025-01-18 19:22:27,536:INFO:Creating metrics dataframe
2025-01-18 19:22:27,536:INFO:Uploading results into container
2025-01-18 19:22:27,536:INFO:Uploading model into container now
2025-01-18 19:22:27,543:INFO:_master_model_container: 5
2025-01-18 19:22:27,543:INFO:_display_container: 2
2025-01-18 19:22:27,544:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-18 19:22:27,545:INFO:create_model() successfully completed......................................
2025-01-18 19:22:27,654:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:27,654:INFO:Creating metrics dataframe
2025-01-18 19:22:27,661:INFO:Initializing Ridge Classifier
2025-01-18 19:22:27,661:INFO:Total runtime is 0.11931916077931722 minutes
2025-01-18 19:22:27,673:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:27,674:INFO:Initializing create_model()
2025-01-18 19:22:27,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:27,676:INFO:Checking exceptions
2025-01-18 19:22:27,676:INFO:Importing libraries
2025-01-18 19:22:27,676:INFO:Copying training dataset
2025-01-18 19:22:27,683:INFO:Defining folds
2025-01-18 19:22:27,683:INFO:Declaring metric variables
2025-01-18 19:22:27,689:INFO:Importing untrained model
2025-01-18 19:22:27,698:INFO:Ridge Classifier Imported successfully
2025-01-18 19:22:27,710:INFO:Starting cross validation
2025-01-18 19:22:27,712:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:27,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,835:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,835:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,842:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,904:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,967:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,967:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:27,981:INFO:Calculating mean and std
2025-01-18 19:22:27,981:INFO:Creating metrics dataframe
2025-01-18 19:22:27,981:INFO:Uploading results into container
2025-01-18 19:22:27,981:INFO:Uploading model into container now
2025-01-18 19:22:27,981:INFO:_master_model_container: 6
2025-01-18 19:22:27,981:INFO:_display_container: 2
2025-01-18 19:22:27,981:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-18 19:22:27,981:INFO:create_model() successfully completed......................................
2025-01-18 19:22:28,092:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:28,092:INFO:Creating metrics dataframe
2025-01-18 19:22:28,106:INFO:Initializing Random Forest Classifier
2025-01-18 19:22:28,106:INFO:Total runtime is 0.126737646261851 minutes
2025-01-18 19:22:28,112:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:28,112:INFO:Initializing create_model()
2025-01-18 19:22:28,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:28,112:INFO:Checking exceptions
2025-01-18 19:22:28,112:INFO:Importing libraries
2025-01-18 19:22:28,112:INFO:Copying training dataset
2025-01-18 19:22:28,127:INFO:Defining folds
2025-01-18 19:22:28,127:INFO:Declaring metric variables
2025-01-18 19:22:28,127:INFO:Importing untrained model
2025-01-18 19:22:28,139:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:22:28,151:INFO:Starting cross validation
2025-01-18 19:22:28,153:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:28,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,808:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,810:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,815:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,981:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:28,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,390:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,470:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,472:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,594:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,594:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,610:INFO:Calculating mean and std
2025-01-18 19:22:29,615:INFO:Creating metrics dataframe
2025-01-18 19:22:29,621:INFO:Uploading results into container
2025-01-18 19:22:29,621:INFO:Uploading model into container now
2025-01-18 19:22:29,621:INFO:_master_model_container: 7
2025-01-18 19:22:29,621:INFO:_display_container: 2
2025-01-18 19:22:29,621:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:22:29,621:INFO:create_model() successfully completed......................................
2025-01-18 19:22:29,737:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:29,737:INFO:Creating metrics dataframe
2025-01-18 19:22:29,759:INFO:Initializing Quadratic Discriminant Analysis
2025-01-18 19:22:29,759:INFO:Total runtime is 0.15428792238235473 minutes
2025-01-18 19:22:29,765:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:29,766:INFO:Initializing create_model()
2025-01-18 19:22:29,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:29,766:INFO:Checking exceptions
2025-01-18 19:22:29,766:INFO:Importing libraries
2025-01-18 19:22:29,766:INFO:Copying training dataset
2025-01-18 19:22:29,865:INFO:Defining folds
2025-01-18 19:22:29,865:INFO:Declaring metric variables
2025-01-18 19:22:29,872:INFO:Importing untrained model
2025-01-18 19:22:29,883:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-18 19:22:29,893:INFO:Starting cross validation
2025-01-18 19:22:29,898:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:29,972:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:29,972:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:29,972:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:29,972:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:29,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:29,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,015:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,015:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:30,018:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,019:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,066:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,125:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,147:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,157:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:22:30,224:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,247:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,249:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,266:INFO:Calculating mean and std
2025-01-18 19:22:30,267:INFO:Creating metrics dataframe
2025-01-18 19:22:30,269:INFO:Uploading results into container
2025-01-18 19:22:30,271:INFO:Uploading model into container now
2025-01-18 19:22:30,273:INFO:_master_model_container: 8
2025-01-18 19:22:30,273:INFO:_display_container: 2
2025-01-18 19:22:30,274:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-18 19:22:30,274:INFO:create_model() successfully completed......................................
2025-01-18 19:22:30,397:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:30,397:INFO:Creating metrics dataframe
2025-01-18 19:22:30,412:INFO:Initializing Ada Boost Classifier
2025-01-18 19:22:30,412:INFO:Total runtime is 0.1651686946551005 minutes
2025-01-18 19:22:30,419:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:30,419:INFO:Initializing create_model()
2025-01-18 19:22:30,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:30,419:INFO:Checking exceptions
2025-01-18 19:22:30,419:INFO:Importing libraries
2025-01-18 19:22:30,419:INFO:Copying training dataset
2025-01-18 19:22:30,425:INFO:Defining folds
2025-01-18 19:22:30,425:INFO:Declaring metric variables
2025-01-18 19:22:30,435:INFO:Importing untrained model
2025-01-18 19:22:30,441:INFO:Ada Boost Classifier Imported successfully
2025-01-18 19:22:30,454:INFO:Starting cross validation
2025-01-18 19:22:30,458:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:30,523:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,527:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,530:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,568:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,768:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,773:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,773:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,788:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,795:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,802:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,802:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,815:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,815:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,815:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,821:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:30,841:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,871:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:30,885:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:31,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,095:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,105:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,112:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,119:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,119:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:31,119:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:22:31,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,303:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,311:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,328:INFO:Calculating mean and std
2025-01-18 19:22:31,330:INFO:Creating metrics dataframe
2025-01-18 19:22:31,332:INFO:Uploading results into container
2025-01-18 19:22:31,333:INFO:Uploading model into container now
2025-01-18 19:22:31,334:INFO:_master_model_container: 9
2025-01-18 19:22:31,334:INFO:_display_container: 2
2025-01-18 19:22:31,335:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-18 19:22:31,335:INFO:create_model() successfully completed......................................
2025-01-18 19:22:31,440:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:31,440:INFO:Creating metrics dataframe
2025-01-18 19:22:31,456:INFO:Initializing Gradient Boosting Classifier
2025-01-18 19:22:31,456:INFO:Total runtime is 0.18258117039998373 minutes
2025-01-18 19:22:31,463:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:31,463:INFO:Initializing create_model()
2025-01-18 19:22:31,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:31,463:INFO:Checking exceptions
2025-01-18 19:22:31,463:INFO:Importing libraries
2025-01-18 19:22:31,464:INFO:Copying training dataset
2025-01-18 19:22:31,475:INFO:Defining folds
2025-01-18 19:22:31,475:INFO:Declaring metric variables
2025-01-18 19:22:31,481:INFO:Importing untrained model
2025-01-18 19:22:31,499:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:22:31,521:INFO:Starting cross validation
2025-01-18 19:22:31,524:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:31,889:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,891:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,891:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:31,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,230:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,259:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,627:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,640:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,640:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,661:INFO:Calculating mean and std
2025-01-18 19:22:32,661:INFO:Creating metrics dataframe
2025-01-18 19:22:32,661:INFO:Uploading results into container
2025-01-18 19:22:32,661:INFO:Uploading model into container now
2025-01-18 19:22:32,661:INFO:_master_model_container: 10
2025-01-18 19:22:32,661:INFO:_display_container: 2
2025-01-18 19:22:32,661:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:22:32,661:INFO:create_model() successfully completed......................................
2025-01-18 19:22:32,800:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:32,800:INFO:Creating metrics dataframe
2025-01-18 19:22:32,821:INFO:Initializing Linear Discriminant Analysis
2025-01-18 19:22:32,821:INFO:Total runtime is 0.2053311785062154 minutes
2025-01-18 19:22:32,826:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:32,827:INFO:Initializing create_model()
2025-01-18 19:22:32,828:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:32,829:INFO:Checking exceptions
2025-01-18 19:22:32,829:INFO:Importing libraries
2025-01-18 19:22:32,829:INFO:Copying training dataset
2025-01-18 19:22:32,835:INFO:Defining folds
2025-01-18 19:22:32,835:INFO:Declaring metric variables
2025-01-18 19:22:32,843:INFO:Importing untrained model
2025-01-18 19:22:32,850:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:22:32,861:INFO:Starting cross validation
2025-01-18 19:22:32,863:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:32,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,970:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,972:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:32,977:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,056:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,067:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,074:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,074:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,083:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,083:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,083:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,087:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,088:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,091:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,152:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,157:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,162:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,172:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,176:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,179:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,196:INFO:Calculating mean and std
2025-01-18 19:22:33,196:INFO:Creating metrics dataframe
2025-01-18 19:22:33,203:INFO:Uploading results into container
2025-01-18 19:22:33,205:INFO:Uploading model into container now
2025-01-18 19:22:33,205:INFO:_master_model_container: 11
2025-01-18 19:22:33,205:INFO:_display_container: 2
2025-01-18 19:22:33,205:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:22:33,205:INFO:create_model() successfully completed......................................
2025-01-18 19:22:33,314:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:33,314:INFO:Creating metrics dataframe
2025-01-18 19:22:33,321:INFO:Initializing Extra Trees Classifier
2025-01-18 19:22:33,328:INFO:Total runtime is 0.21365683476130168 minutes
2025-01-18 19:22:33,328:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:33,328:INFO:Initializing create_model()
2025-01-18 19:22:33,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:33,328:INFO:Checking exceptions
2025-01-18 19:22:33,328:INFO:Importing libraries
2025-01-18 19:22:33,328:INFO:Copying training dataset
2025-01-18 19:22:33,342:INFO:Defining folds
2025-01-18 19:22:33,342:INFO:Declaring metric variables
2025-01-18 19:22:33,350:INFO:Importing untrained model
2025-01-18 19:22:33,355:INFO:Extra Trees Classifier Imported successfully
2025-01-18 19:22:33,365:INFO:Starting cross validation
2025-01-18 19:22:33,366:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:33,731:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,732:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,745:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,759:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,787:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,794:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,794:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:33,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,144:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,151:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,158:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,295:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,321:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,327:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,442:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,442:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,682:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,682:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,690:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,760:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,760:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,765:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:34,779:INFO:Calculating mean and std
2025-01-18 19:22:34,779:INFO:Creating metrics dataframe
2025-01-18 19:22:34,785:INFO:Uploading results into container
2025-01-18 19:22:34,785:INFO:Uploading model into container now
2025-01-18 19:22:34,785:INFO:_master_model_container: 12
2025-01-18 19:22:34,785:INFO:_display_container: 2
2025-01-18 19:22:34,790:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-18 19:22:34,790:INFO:create_model() successfully completed......................................
2025-01-18 19:22:34,897:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:34,897:INFO:Creating metrics dataframe
2025-01-18 19:22:34,912:INFO:Initializing Light Gradient Boosting Machine
2025-01-18 19:22:34,912:INFO:Total runtime is 0.24017444451649983 minutes
2025-01-18 19:22:34,917:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:34,917:INFO:Initializing create_model()
2025-01-18 19:22:34,917:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:34,917:INFO:Checking exceptions
2025-01-18 19:22:34,917:INFO:Importing libraries
2025-01-18 19:22:34,917:INFO:Copying training dataset
2025-01-18 19:22:34,925:INFO:Defining folds
2025-01-18 19:22:34,925:INFO:Declaring metric variables
2025-01-18 19:22:34,933:INFO:Importing untrained model
2025-01-18 19:22:34,940:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:22:34,955:INFO:Starting cross validation
2025-01-18 19:22:34,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:35,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,904:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,904:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,911:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,987:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:35,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,765:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,765:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,765:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,801:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:36,883:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,575:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,588:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,623:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,626:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,645:INFO:Calculating mean and std
2025-01-18 19:22:37,645:INFO:Creating metrics dataframe
2025-01-18 19:22:37,663:INFO:Uploading results into container
2025-01-18 19:22:37,663:INFO:Uploading model into container now
2025-01-18 19:22:37,665:INFO:_master_model_container: 13
2025-01-18 19:22:37,665:INFO:_display_container: 2
2025-01-18 19:22:37,665:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:22:37,665:INFO:create_model() successfully completed......................................
2025-01-18 19:22:37,829:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:37,829:INFO:Creating metrics dataframe
2025-01-18 19:22:37,841:INFO:Initializing Dummy Classifier
2025-01-18 19:22:37,841:INFO:Total runtime is 0.28898927370707195 minutes
2025-01-18 19:22:37,850:INFO:SubProcess create_model() called ==================================
2025-01-18 19:22:37,856:INFO:Initializing create_model()
2025-01-18 19:22:37,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D181F4F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:37,857:INFO:Checking exceptions
2025-01-18 19:22:37,857:INFO:Importing libraries
2025-01-18 19:22:37,857:INFO:Copying training dataset
2025-01-18 19:22:37,857:INFO:Defining folds
2025-01-18 19:22:37,857:INFO:Declaring metric variables
2025-01-18 19:22:37,873:INFO:Importing untrained model
2025-01-18 19:22:37,880:INFO:Dummy Classifier Imported successfully
2025-01-18 19:22:37,894:INFO:Starting cross validation
2025-01-18 19:22:37,897:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:22:37,982:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:37,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:37,994:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,022:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,033:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,033:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,052:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,056:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,056:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,091:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,091:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,091:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,139:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,183:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,183:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:22:38,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:22:38,209:INFO:Calculating mean and std
2025-01-18 19:22:38,209:INFO:Creating metrics dataframe
2025-01-18 19:22:38,209:INFO:Uploading results into container
2025-01-18 19:22:38,209:INFO:Uploading model into container now
2025-01-18 19:22:38,209:INFO:_master_model_container: 14
2025-01-18 19:22:38,209:INFO:_display_container: 2
2025-01-18 19:22:38,209:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-18 19:22:38,209:INFO:create_model() successfully completed......................................
2025-01-18 19:22:38,328:INFO:SubProcess create_model() end ==================================
2025-01-18 19:22:38,328:INFO:Creating metrics dataframe
2025-01-18 19:22:38,350:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-18 19:22:38,366:INFO:Initializing create_model()
2025-01-18 19:22:38,366:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:22:38,367:INFO:Checking exceptions
2025-01-18 19:22:38,371:INFO:Importing libraries
2025-01-18 19:22:38,371:INFO:Copying training dataset
2025-01-18 19:22:38,377:INFO:Defining folds
2025-01-18 19:22:38,377:INFO:Declaring metric variables
2025-01-18 19:22:38,377:INFO:Importing untrained model
2025-01-18 19:22:38,377:INFO:Declaring custom model
2025-01-18 19:22:38,377:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:22:38,377:INFO:Cross validation set to False
2025-01-18 19:22:38,377:INFO:Fitting Model
2025-01-18 19:22:38,433:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:22:38,433:INFO:create_model() successfully completed......................................
2025-01-18 19:22:38,600:INFO:_master_model_container: 14
2025-01-18 19:22:38,600:INFO:_display_container: 2
2025-01-18 19:22:38,600:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:22:38,600:INFO:compare_models() successfully completed......................................
2025-01-18 19:23:01,379:INFO:Initializing compare_models()
2025-01-18 19:23:01,379:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-18 19:23:01,379:INFO:Checking exceptions
2025-01-18 19:23:01,387:INFO:Preparing display monitor
2025-01-18 19:23:01,421:INFO:Initializing Logistic Regression
2025-01-18 19:23:01,422:INFO:Total runtime is 1.666545867919922e-05 minutes
2025-01-18 19:23:01,437:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:01,439:INFO:Initializing create_model()
2025-01-18 19:23:01,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:01,439:INFO:Checking exceptions
2025-01-18 19:23:01,439:INFO:Importing libraries
2025-01-18 19:23:01,439:INFO:Copying training dataset
2025-01-18 19:23:01,452:INFO:Defining folds
2025-01-18 19:23:01,453:INFO:Declaring metric variables
2025-01-18 19:23:01,459:INFO:Importing untrained model
2025-01-18 19:23:01,467:INFO:Logistic Regression Imported successfully
2025-01-18 19:23:01,488:INFO:Starting cross validation
2025-01-18 19:23:01,488:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:01,973:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:01,973:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:01,983:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,341:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,341:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,357:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,390:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,737:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,745:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:23:02,765:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:02,800:INFO:Calculating mean and std
2025-01-18 19:23:02,800:INFO:Creating metrics dataframe
2025-01-18 19:23:02,800:INFO:Uploading results into container
2025-01-18 19:23:02,800:INFO:Uploading model into container now
2025-01-18 19:23:02,800:INFO:_master_model_container: 15
2025-01-18 19:23:02,800:INFO:_display_container: 3
2025-01-18 19:23:02,800:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:23:02,800:INFO:create_model() successfully completed......................................
2025-01-18 19:23:02,918:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:02,918:INFO:Creating metrics dataframe
2025-01-18 19:23:02,932:INFO:Initializing K Neighbors Classifier
2025-01-18 19:23:02,932:INFO:Total runtime is 0.02519272963205973 minutes
2025-01-18 19:23:02,940:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:02,940:INFO:Initializing create_model()
2025-01-18 19:23:02,941:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:02,941:INFO:Checking exceptions
2025-01-18 19:23:02,941:INFO:Importing libraries
2025-01-18 19:23:02,941:INFO:Copying training dataset
2025-01-18 19:23:02,946:INFO:Defining folds
2025-01-18 19:23:02,946:INFO:Declaring metric variables
2025-01-18 19:23:02,955:INFO:Importing untrained model
2025-01-18 19:23:02,965:INFO:K Neighbors Classifier Imported successfully
2025-01-18 19:23:02,979:INFO:Starting cross validation
2025-01-18 19:23:02,981:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:03,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,086:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,087:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,089:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,089:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,090:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,094:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,095:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,108:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,108:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,108:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,192:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,211:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,257:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,261:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,262:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,266:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,286:INFO:Calculating mean and std
2025-01-18 19:23:03,286:INFO:Creating metrics dataframe
2025-01-18 19:23:03,286:INFO:Uploading results into container
2025-01-18 19:23:03,286:INFO:Uploading model into container now
2025-01-18 19:23:03,286:INFO:_master_model_container: 16
2025-01-18 19:23:03,286:INFO:_display_container: 3
2025-01-18 19:23:03,286:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-18 19:23:03,286:INFO:create_model() successfully completed......................................
2025-01-18 19:23:03,405:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:03,407:INFO:Creating metrics dataframe
2025-01-18 19:23:03,419:INFO:Initializing Naive Bayes
2025-01-18 19:23:03,420:INFO:Total runtime is 0.03332026799519856 minutes
2025-01-18 19:23:03,425:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:03,425:INFO:Initializing create_model()
2025-01-18 19:23:03,426:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:03,426:INFO:Checking exceptions
2025-01-18 19:23:03,426:INFO:Importing libraries
2025-01-18 19:23:03,426:INFO:Copying training dataset
2025-01-18 19:23:03,432:INFO:Defining folds
2025-01-18 19:23:03,432:INFO:Declaring metric variables
2025-01-18 19:23:03,442:INFO:Importing untrained model
2025-01-18 19:23:03,453:INFO:Naive Bayes Imported successfully
2025-01-18 19:23:03,468:INFO:Starting cross validation
2025-01-18 19:23:03,472:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:03,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,648:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,657:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,664:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,666:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,671:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,671:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,675:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,675:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,693:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,699:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,746:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,749:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,758:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:03,775:INFO:Calculating mean and std
2025-01-18 19:23:03,778:INFO:Creating metrics dataframe
2025-01-18 19:23:03,781:INFO:Uploading results into container
2025-01-18 19:23:03,783:INFO:Uploading model into container now
2025-01-18 19:23:03,784:INFO:_master_model_container: 17
2025-01-18 19:23:03,785:INFO:_display_container: 3
2025-01-18 19:23:03,787:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-18 19:23:03,787:INFO:create_model() successfully completed......................................
2025-01-18 19:23:03,916:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:03,916:INFO:Creating metrics dataframe
2025-01-18 19:23:03,926:INFO:Initializing Decision Tree Classifier
2025-01-18 19:23:03,926:INFO:Total runtime is 0.04175267616907755 minutes
2025-01-18 19:23:03,933:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:03,933:INFO:Initializing create_model()
2025-01-18 19:23:03,934:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:03,934:INFO:Checking exceptions
2025-01-18 19:23:03,934:INFO:Importing libraries
2025-01-18 19:23:03,934:INFO:Copying training dataset
2025-01-18 19:23:03,940:INFO:Defining folds
2025-01-18 19:23:03,940:INFO:Declaring metric variables
2025-01-18 19:23:03,953:INFO:Importing untrained model
2025-01-18 19:23:03,964:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:23:03,993:INFO:Starting cross validation
2025-01-18 19:23:03,997:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:04,096:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,101:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,103:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,103:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,104:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,147:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,182:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,209:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,231:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,238:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,240:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,266:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,307:INFO:Calculating mean and std
2025-01-18 19:23:04,307:INFO:Creating metrics dataframe
2025-01-18 19:23:04,307:INFO:Uploading results into container
2025-01-18 19:23:04,313:INFO:Uploading model into container now
2025-01-18 19:23:04,314:INFO:_master_model_container: 18
2025-01-18 19:23:04,314:INFO:_display_container: 3
2025-01-18 19:23:04,314:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-18 19:23:04,316:INFO:create_model() successfully completed......................................
2025-01-18 19:23:04,425:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:04,425:INFO:Creating metrics dataframe
2025-01-18 19:23:04,444:INFO:Initializing SVM - Linear Kernel
2025-01-18 19:23:04,444:INFO:Total runtime is 0.05038954416910807 minutes
2025-01-18 19:23:04,454:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:04,454:INFO:Initializing create_model()
2025-01-18 19:23:04,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:04,454:INFO:Checking exceptions
2025-01-18 19:23:04,454:INFO:Importing libraries
2025-01-18 19:23:04,454:INFO:Copying training dataset
2025-01-18 19:23:04,464:INFO:Defining folds
2025-01-18 19:23:04,465:INFO:Declaring metric variables
2025-01-18 19:23:04,474:INFO:Importing untrained model
2025-01-18 19:23:04,483:INFO:SVM - Linear Kernel Imported successfully
2025-01-18 19:23:04,499:INFO:Starting cross validation
2025-01-18 19:23:04,502:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:04,603:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,606:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,607:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,609:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,609:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,622:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,629:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,642:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,644:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,646:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,650:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,732:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,757:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,759:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,763:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,773:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,773:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,813:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:04,859:INFO:Calculating mean and std
2025-01-18 19:23:04,860:INFO:Creating metrics dataframe
2025-01-18 19:23:04,866:INFO:Uploading results into container
2025-01-18 19:23:04,866:INFO:Uploading model into container now
2025-01-18 19:23:04,866:INFO:_master_model_container: 19
2025-01-18 19:23:04,870:INFO:_display_container: 3
2025-01-18 19:23:04,871:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-18 19:23:04,871:INFO:create_model() successfully completed......................................
2025-01-18 19:23:04,973:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:04,973:INFO:Creating metrics dataframe
2025-01-18 19:23:04,987:INFO:Initializing Ridge Classifier
2025-01-18 19:23:04,987:INFO:Total runtime is 0.05944062074025472 minutes
2025-01-18 19:23:04,994:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:04,994:INFO:Initializing create_model()
2025-01-18 19:23:04,994:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:04,994:INFO:Checking exceptions
2025-01-18 19:23:04,994:INFO:Importing libraries
2025-01-18 19:23:04,994:INFO:Copying training dataset
2025-01-18 19:23:05,007:INFO:Defining folds
2025-01-18 19:23:05,008:INFO:Declaring metric variables
2025-01-18 19:23:05,016:INFO:Importing untrained model
2025-01-18 19:23:05,025:INFO:Ridge Classifier Imported successfully
2025-01-18 19:23:05,050:INFO:Starting cross validation
2025-01-18 19:23:05,050:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,142:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,142:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,182:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,247:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,259:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,266:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,266:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,273:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,275:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,275:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,300:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,352:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:05,368:INFO:Calculating mean and std
2025-01-18 19:23:05,370:INFO:Creating metrics dataframe
2025-01-18 19:23:05,373:INFO:Uploading results into container
2025-01-18 19:23:05,373:INFO:Uploading model into container now
2025-01-18 19:23:05,376:INFO:_master_model_container: 20
2025-01-18 19:23:05,376:INFO:_display_container: 3
2025-01-18 19:23:05,376:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-18 19:23:05,378:INFO:create_model() successfully completed......................................
2025-01-18 19:23:05,488:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:05,488:INFO:Creating metrics dataframe
2025-01-18 19:23:05,500:INFO:Initializing Random Forest Classifier
2025-01-18 19:23:05,500:INFO:Total runtime is 0.06799159049987794 minutes
2025-01-18 19:23:05,506:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:05,506:INFO:Initializing create_model()
2025-01-18 19:23:05,506:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:05,506:INFO:Checking exceptions
2025-01-18 19:23:05,506:INFO:Importing libraries
2025-01-18 19:23:05,506:INFO:Copying training dataset
2025-01-18 19:23:05,514:INFO:Defining folds
2025-01-18 19:23:05,514:INFO:Declaring metric variables
2025-01-18 19:23:05,520:INFO:Importing untrained model
2025-01-18 19:23:05,527:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:23:05,543:INFO:Starting cross validation
2025-01-18 19:23:05,545:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:06,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,060:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,065:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,065:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,139:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,139:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,139:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,501:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,501:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,517:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,517:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,706:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,709:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,709:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,821:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,821:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,821:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,924:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,924:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:06,924:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,077:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,105:INFO:Calculating mean and std
2025-01-18 19:23:07,105:INFO:Creating metrics dataframe
2025-01-18 19:23:07,105:INFO:Uploading results into container
2025-01-18 19:23:07,105:INFO:Uploading model into container now
2025-01-18 19:23:07,105:INFO:_master_model_container: 21
2025-01-18 19:23:07,105:INFO:_display_container: 3
2025-01-18 19:23:07,105:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:23:07,105:INFO:create_model() successfully completed......................................
2025-01-18 19:23:07,216:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:07,225:INFO:Creating metrics dataframe
2025-01-18 19:23:07,240:INFO:Initializing Quadratic Discriminant Analysis
2025-01-18 19:23:07,241:INFO:Total runtime is 0.0970046639442444 minutes
2025-01-18 19:23:07,246:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:07,247:INFO:Initializing create_model()
2025-01-18 19:23:07,247:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:07,248:INFO:Checking exceptions
2025-01-18 19:23:07,248:INFO:Importing libraries
2025-01-18 19:23:07,248:INFO:Copying training dataset
2025-01-18 19:23:07,258:INFO:Defining folds
2025-01-18 19:23:07,259:INFO:Declaring metric variables
2025-01-18 19:23:07,270:INFO:Importing untrained model
2025-01-18 19:23:07,272:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-18 19:23:07,295:INFO:Starting cross validation
2025-01-18 19:23:07,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:07,344:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,344:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,358:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,358:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,385:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,386:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,388:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,394:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,394:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,410:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,410:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,410:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:07,410:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,440:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,447:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,489:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,492:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,494:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,494:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,494:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,508:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:23:07,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,552:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,552:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,555:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,556:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:07,566:INFO:Calculating mean and std
2025-01-18 19:23:07,568:INFO:Creating metrics dataframe
2025-01-18 19:23:07,571:INFO:Uploading results into container
2025-01-18 19:23:07,571:INFO:Uploading model into container now
2025-01-18 19:23:07,571:INFO:_master_model_container: 22
2025-01-18 19:23:07,571:INFO:_display_container: 3
2025-01-18 19:23:07,571:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-18 19:23:07,571:INFO:create_model() successfully completed......................................
2025-01-18 19:23:07,679:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:07,679:INFO:Creating metrics dataframe
2025-01-18 19:23:07,710:INFO:Initializing Ada Boost Classifier
2025-01-18 19:23:07,711:INFO:Total runtime is 0.10483576854070029 minutes
2025-01-18 19:23:07,715:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:07,716:INFO:Initializing create_model()
2025-01-18 19:23:07,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:07,717:INFO:Checking exceptions
2025-01-18 19:23:07,717:INFO:Importing libraries
2025-01-18 19:23:07,717:INFO:Copying training dataset
2025-01-18 19:23:07,724:INFO:Defining folds
2025-01-18 19:23:07,724:INFO:Declaring metric variables
2025-01-18 19:23:07,732:INFO:Importing untrained model
2025-01-18 19:23:07,745:INFO:Ada Boost Classifier Imported successfully
2025-01-18 19:23:07,761:INFO:Starting cross validation
2025-01-18 19:23:07,766:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:07,816:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:07,816:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:07,816:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:07,831:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,049:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,049:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,049:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,049:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,274:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,282:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,290:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,293:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:23:08,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,484:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,484:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,486:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,489:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:08,508:INFO:Calculating mean and std
2025-01-18 19:23:08,508:INFO:Creating metrics dataframe
2025-01-18 19:23:08,508:INFO:Uploading results into container
2025-01-18 19:23:08,508:INFO:Uploading model into container now
2025-01-18 19:23:08,508:INFO:_master_model_container: 23
2025-01-18 19:23:08,508:INFO:_display_container: 3
2025-01-18 19:23:08,508:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-18 19:23:08,508:INFO:create_model() successfully completed......................................
2025-01-18 19:23:08,637:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:08,637:INFO:Creating metrics dataframe
2025-01-18 19:23:08,653:INFO:Initializing Gradient Boosting Classifier
2025-01-18 19:23:08,653:INFO:Total runtime is 0.12053514321645102 minutes
2025-01-18 19:23:08,658:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:08,659:INFO:Initializing create_model()
2025-01-18 19:23:08,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:08,659:INFO:Checking exceptions
2025-01-18 19:23:08,659:INFO:Importing libraries
2025-01-18 19:23:08,659:INFO:Copying training dataset
2025-01-18 19:23:08,667:INFO:Defining folds
2025-01-18 19:23:08,670:INFO:Declaring metric variables
2025-01-18 19:23:08,675:INFO:Importing untrained model
2025-01-18 19:23:08,691:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:23:08,717:INFO:Starting cross validation
2025-01-18 19:23:08,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,079:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,095:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,468:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,469:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,472:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,476:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,476:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,479:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,485:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,490:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,496:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,496:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,505:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,510:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,873:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:09,904:INFO:Calculating mean and std
2025-01-18 19:23:09,904:INFO:Creating metrics dataframe
2025-01-18 19:23:09,904:INFO:Uploading results into container
2025-01-18 19:23:09,904:INFO:Uploading model into container now
2025-01-18 19:23:09,904:INFO:_master_model_container: 24
2025-01-18 19:23:09,904:INFO:_display_container: 3
2025-01-18 19:23:09,904:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:23:09,904:INFO:create_model() successfully completed......................................
2025-01-18 19:23:10,030:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:10,030:INFO:Creating metrics dataframe
2025-01-18 19:23:10,047:INFO:Initializing Linear Discriminant Analysis
2025-01-18 19:23:10,048:INFO:Total runtime is 0.14379173119862876 minutes
2025-01-18 19:23:10,054:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:10,054:INFO:Initializing create_model()
2025-01-18 19:23:10,057:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:10,058:INFO:Checking exceptions
2025-01-18 19:23:10,058:INFO:Importing libraries
2025-01-18 19:23:10,058:INFO:Copying training dataset
2025-01-18 19:23:10,069:INFO:Defining folds
2025-01-18 19:23:10,069:INFO:Declaring metric variables
2025-01-18 19:23:10,081:INFO:Importing untrained model
2025-01-18 19:23:10,096:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:23:10,109:INFO:Starting cross validation
2025-01-18 19:23:10,114:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:10,204:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,205:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,208:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,209:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,212:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,212:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,213:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,217:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,217:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,238:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,245:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,251:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,298:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,298:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,302:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,304:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,320:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,366:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,371:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,373:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,374:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:10,390:INFO:Calculating mean and std
2025-01-18 19:23:10,390:INFO:Creating metrics dataframe
2025-01-18 19:23:10,398:INFO:Uploading results into container
2025-01-18 19:23:10,398:INFO:Uploading model into container now
2025-01-18 19:23:10,398:INFO:_master_model_container: 25
2025-01-18 19:23:10,398:INFO:_display_container: 3
2025-01-18 19:23:10,398:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:23:10,398:INFO:create_model() successfully completed......................................
2025-01-18 19:23:10,517:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:10,517:INFO:Creating metrics dataframe
2025-01-18 19:23:10,531:INFO:Initializing Extra Trees Classifier
2025-01-18 19:23:10,532:INFO:Total runtime is 0.15185941855112714 minutes
2025-01-18 19:23:10,538:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:10,538:INFO:Initializing create_model()
2025-01-18 19:23:10,538:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:10,538:INFO:Checking exceptions
2025-01-18 19:23:10,539:INFO:Importing libraries
2025-01-18 19:23:10,539:INFO:Copying training dataset
2025-01-18 19:23:10,548:INFO:Defining folds
2025-01-18 19:23:10,549:INFO:Declaring metric variables
2025-01-18 19:23:10,552:INFO:Importing untrained model
2025-01-18 19:23:10,567:INFO:Extra Trees Classifier Imported successfully
2025-01-18 19:23:10,589:INFO:Starting cross validation
2025-01-18 19:23:10,593:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:11,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,094:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,096:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,098:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,101:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,320:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,320:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,336:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,447:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,461:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,477:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,489:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,489:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,565:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,576:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,923:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,923:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,923:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:11,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:12,007:INFO:Calculating mean and std
2025-01-18 19:23:12,007:INFO:Creating metrics dataframe
2025-01-18 19:23:12,012:INFO:Uploading results into container
2025-01-18 19:23:12,016:INFO:Uploading model into container now
2025-01-18 19:23:12,017:INFO:_master_model_container: 26
2025-01-18 19:23:12,017:INFO:_display_container: 3
2025-01-18 19:23:12,017:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-18 19:23:12,017:INFO:create_model() successfully completed......................................
2025-01-18 19:23:12,134:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:12,134:INFO:Creating metrics dataframe
2025-01-18 19:23:12,150:INFO:Initializing Light Gradient Boosting Machine
2025-01-18 19:23:12,150:INFO:Total runtime is 0.17882499297459922 minutes
2025-01-18 19:23:12,158:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:12,159:INFO:Initializing create_model()
2025-01-18 19:23:12,159:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:12,159:INFO:Checking exceptions
2025-01-18 19:23:12,159:INFO:Importing libraries
2025-01-18 19:23:12,159:INFO:Copying training dataset
2025-01-18 19:23:12,172:INFO:Defining folds
2025-01-18 19:23:12,172:INFO:Declaring metric variables
2025-01-18 19:23:12,197:INFO:Importing untrained model
2025-01-18 19:23:12,210:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:23:12,238:INFO:Starting cross validation
2025-01-18 19:23:12,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:12,997:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,006:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,012:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,017:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,020:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,053:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,732:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,732:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,748:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,764:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,764:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,764:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,795:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,795:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,795:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:13,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,227:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,230:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,230:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,251:INFO:Calculating mean and std
2025-01-18 19:23:14,253:INFO:Creating metrics dataframe
2025-01-18 19:23:14,260:INFO:Uploading results into container
2025-01-18 19:23:14,261:INFO:Uploading model into container now
2025-01-18 19:23:14,262:INFO:_master_model_container: 27
2025-01-18 19:23:14,262:INFO:_display_container: 3
2025-01-18 19:23:14,262:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:23:14,262:INFO:create_model() successfully completed......................................
2025-01-18 19:23:14,369:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:14,369:INFO:Creating metrics dataframe
2025-01-18 19:23:14,383:INFO:Initializing Dummy Classifier
2025-01-18 19:23:14,383:INFO:Total runtime is 0.21603955030441285 minutes
2025-01-18 19:23:14,383:INFO:SubProcess create_model() called ==================================
2025-01-18 19:23:14,383:INFO:Initializing create_model()
2025-01-18 19:23:14,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D16BBEB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:14,383:INFO:Checking exceptions
2025-01-18 19:23:14,383:INFO:Importing libraries
2025-01-18 19:23:14,383:INFO:Copying training dataset
2025-01-18 19:23:14,397:INFO:Defining folds
2025-01-18 19:23:14,397:INFO:Declaring metric variables
2025-01-18 19:23:14,406:INFO:Importing untrained model
2025-01-18 19:23:14,415:INFO:Dummy Classifier Imported successfully
2025-01-18 19:23:14,433:INFO:Starting cross validation
2025-01-18 19:23:14,436:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:23:14,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,619:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,619:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,644:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,669:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:23:14,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:23:14,712:INFO:Calculating mean and std
2025-01-18 19:23:14,712:INFO:Creating metrics dataframe
2025-01-18 19:23:14,716:INFO:Uploading results into container
2025-01-18 19:23:14,716:INFO:Uploading model into container now
2025-01-18 19:23:14,719:INFO:_master_model_container: 28
2025-01-18 19:23:14,720:INFO:_display_container: 3
2025-01-18 19:23:14,720:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-18 19:23:14,720:INFO:create_model() successfully completed......................................
2025-01-18 19:23:14,834:INFO:SubProcess create_model() end ==================================
2025-01-18 19:23:14,834:INFO:Creating metrics dataframe
2025-01-18 19:23:14,841:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-18 19:23:14,865:INFO:Initializing create_model()
2025-01-18 19:23:14,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:23:14,865:INFO:Checking exceptions
2025-01-18 19:23:14,865:INFO:Importing libraries
2025-01-18 19:23:14,865:INFO:Copying training dataset
2025-01-18 19:23:14,881:INFO:Defining folds
2025-01-18 19:23:14,881:INFO:Declaring metric variables
2025-01-18 19:23:14,882:INFO:Importing untrained model
2025-01-18 19:23:14,882:INFO:Declaring custom model
2025-01-18 19:23:14,883:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:23:14,885:INFO:Cross validation set to False
2025-01-18 19:23:14,885:INFO:Fitting Model
2025-01-18 19:23:14,924:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:23:14,924:INFO:create_model() successfully completed......................................
2025-01-18 19:23:15,091:INFO:_master_model_container: 28
2025-01-18 19:23:15,091:INFO:_display_container: 3
2025-01-18 19:23:15,091:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:23:15,091:INFO:compare_models() successfully completed......................................
2025-01-18 19:24:09,613:INFO:Initializing create_model()
2025-01-18 19:24:09,613:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:24:09,613:INFO:Checking exceptions
2025-01-18 19:24:09,634:INFO:Importing libraries
2025-01-18 19:24:09,634:INFO:Copying training dataset
2025-01-18 19:24:09,641:INFO:Defining folds
2025-01-18 19:24:09,641:INFO:Declaring metric variables
2025-01-18 19:24:09,641:INFO:Importing untrained model
2025-01-18 19:24:09,668:INFO:Logistic Regression Imported successfully
2025-01-18 19:24:09,685:INFO:Starting cross validation
2025-01-18 19:24:09,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:24:10,143:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,150:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,176:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,176:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,180:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,199:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,211:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,228:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:10,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,627:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:10,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:11,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:11,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,029:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,029:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:11,043:INFO:Calculating mean and std
2025-01-18 19:24:11,043:INFO:Creating metrics dataframe
2025-01-18 19:24:11,055:INFO:Finalizing model
2025-01-18 19:24:11,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:24:11,594:INFO:Uploading results into container
2025-01-18 19:24:11,596:INFO:Uploading model into container now
2025-01-18 19:24:11,609:INFO:_master_model_container: 29
2025-01-18 19:24:11,613:INFO:_display_container: 4
2025-01-18 19:24:11,614:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:24:11,614:INFO:create_model() successfully completed......................................
2025-01-18 19:24:35,267:INFO:Initializing create_model()
2025-01-18 19:24:35,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:24:35,268:INFO:Checking exceptions
2025-01-18 19:24:35,287:INFO:Importing libraries
2025-01-18 19:24:35,287:INFO:Copying training dataset
2025-01-18 19:24:35,294:INFO:Defining folds
2025-01-18 19:24:35,294:INFO:Declaring metric variables
2025-01-18 19:24:35,300:INFO:Importing untrained model
2025-01-18 19:24:35,305:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:24:35,321:INFO:Starting cross validation
2025-01-18 19:24:35,323:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:24:35,423:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,423:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,462:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,463:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,469:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,531:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,554:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,561:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,580:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,590:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,612:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,617:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,620:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,621:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,628:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:24:35,648:INFO:Calculating mean and std
2025-01-18 19:24:35,649:INFO:Creating metrics dataframe
2025-01-18 19:24:35,655:INFO:Finalizing model
2025-01-18 19:24:35,715:INFO:Uploading results into container
2025-01-18 19:24:35,718:INFO:Uploading model into container now
2025-01-18 19:24:35,733:INFO:_master_model_container: 30
2025-01-18 19:24:35,733:INFO:_display_container: 5
2025-01-18 19:24:35,738:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-18 19:24:35,738:INFO:create_model() successfully completed......................................
2025-01-18 19:25:17,178:INFO:Initializing create_model()
2025-01-18 19:25:17,178:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:25:17,178:INFO:Checking exceptions
2025-01-18 19:25:17,197:INFO:Importing libraries
2025-01-18 19:25:17,198:INFO:Copying training dataset
2025-01-18 19:25:17,208:INFO:Defining folds
2025-01-18 19:25:17,209:INFO:Declaring metric variables
2025-01-18 19:25:17,215:INFO:Importing untrained model
2025-01-18 19:25:17,224:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:25:17,236:INFO:Starting cross validation
2025-01-18 19:25:17,238:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:25:17,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,626:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,626:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,711:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,722:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,787:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,787:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:17,795:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:18,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:18,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:18,098:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:18,106:INFO:Calculating mean and std
2025-01-18 19:25:18,106:INFO:Creating metrics dataframe
2025-01-18 19:25:18,112:INFO:Finalizing model
2025-01-18 19:25:18,379:INFO:Uploading results into container
2025-01-18 19:25:18,379:INFO:Uploading model into container now
2025-01-18 19:25:18,391:INFO:_master_model_container: 31
2025-01-18 19:25:18,397:INFO:_display_container: 6
2025-01-18 19:25:18,397:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:25:18,397:INFO:create_model() successfully completed......................................
2025-01-18 19:25:33,697:INFO:Initializing create_model()
2025-01-18 19:25:33,697:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=15, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:25:33,697:INFO:Checking exceptions
2025-01-18 19:25:33,719:INFO:Importing libraries
2025-01-18 19:25:33,719:INFO:Copying training dataset
2025-01-18 19:25:33,728:INFO:Defining folds
2025-01-18 19:25:33,728:INFO:Declaring metric variables
2025-01-18 19:25:33,731:INFO:Importing untrained model
2025-01-18 19:25:33,741:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:25:33,757:INFO:Starting cross validation
2025-01-18 19:25:33,759:INFO:Cross validating with StratifiedKFold(n_splits=15, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:25:34,195:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,199:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,202:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,204:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,210:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,404:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,406:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,931:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,931:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,931:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:34,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,015:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,445:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,455:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,461:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,785:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,792:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,827:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,827:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,827:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:35,883:INFO:Calculating mean and std
2025-01-18 19:25:35,883:INFO:Creating metrics dataframe
2025-01-18 19:25:35,890:INFO:Finalizing model
2025-01-18 19:25:36,155:INFO:Uploading results into container
2025-01-18 19:25:36,158:INFO:Uploading model into container now
2025-01-18 19:25:36,173:INFO:_master_model_container: 32
2025-01-18 19:25:36,173:INFO:_display_container: 7
2025-01-18 19:25:36,173:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:25:36,174:INFO:create_model() successfully completed......................................
2025-01-18 19:25:49,488:INFO:Initializing create_model()
2025-01-18 19:25:49,488:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:25:49,488:INFO:Checking exceptions
2025-01-18 19:25:49,505:INFO:Importing libraries
2025-01-18 19:25:49,505:INFO:Copying training dataset
2025-01-18 19:25:49,516:INFO:Defining folds
2025-01-18 19:25:49,516:INFO:Declaring metric variables
2025-01-18 19:25:49,522:INFO:Importing untrained model
2025-01-18 19:25:49,529:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:25:49,541:INFO:Starting cross validation
2025-01-18 19:25:49,543:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:25:49,986:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:49,991:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:49,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,007:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,011:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,115:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,122:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,129:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,532:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,539:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,547:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:25:50,558:INFO:Calculating mean and std
2025-01-18 19:25:50,605:INFO:Creating metrics dataframe
2025-01-18 19:25:50,636:INFO:Finalizing model
2025-01-18 19:25:51,064:INFO:Uploading results into container
2025-01-18 19:25:51,073:INFO:Uploading model into container now
2025-01-18 19:25:51,089:INFO:_master_model_container: 33
2025-01-18 19:25:51,089:INFO:_display_container: 8
2025-01-18 19:25:51,092:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:25:51,093:INFO:create_model() successfully completed......................................
2025-01-18 19:26:08,801:INFO:Initializing create_model()
2025-01-18 19:26:08,801:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:26:08,801:INFO:Checking exceptions
2025-01-18 19:26:08,825:INFO:Importing libraries
2025-01-18 19:26:08,826:INFO:Copying training dataset
2025-01-18 19:26:08,833:INFO:Defining folds
2025-01-18 19:26:08,833:INFO:Declaring metric variables
2025-01-18 19:26:08,839:INFO:Importing untrained model
2025-01-18 19:26:08,844:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:26:08,865:INFO:Starting cross validation
2025-01-18 19:26:08,867:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:26:09,001:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,003:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,006:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,006:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,137:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,142:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,150:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,152:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,153:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,158:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,186:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,187:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,228:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,261:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,263:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,263:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,268:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:26:09,273:INFO:Calculating mean and std
2025-01-18 19:26:09,274:INFO:Creating metrics dataframe
2025-01-18 19:26:09,280:INFO:Finalizing model
2025-01-18 19:26:09,326:INFO:Uploading results into container
2025-01-18 19:26:09,327:INFO:Uploading model into container now
2025-01-18 19:26:09,339:INFO:_master_model_container: 34
2025-01-18 19:26:09,339:INFO:_display_container: 9
2025-01-18 19:26:09,340:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:26:09,340:INFO:create_model() successfully completed......................................
2025-01-18 19:26:18,740:INFO:gpu_param set to False
2025-01-18 19:26:18,851:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:18,851:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:18,969:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:18,970:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:53,586:INFO:gpu_param set to False
2025-01-18 19:26:53,696:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:53,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:53,811:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:26:53,811:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:07,793:INFO:gpu_param set to False
2025-01-18 19:27:07,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:07,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:08,018:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:08,018:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:24,008:INFO:gpu_param set to False
2025-01-18 19:27:24,120:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:24,120:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:24,249:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:24,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:27:24,252:INFO:Initializing compare_models()
2025-01-18 19:27:24,252:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-18 19:27:24,252:INFO:Checking exceptions
2025-01-18 19:27:24,255:INFO:Preparing display monitor
2025-01-18 19:27:24,302:INFO:Initializing Random Forest Classifier
2025-01-18 19:27:24,303:INFO:Total runtime is 1.654624938964844e-05 minutes
2025-01-18 19:27:24,311:INFO:SubProcess create_model() called ==================================
2025-01-18 19:27:24,312:INFO:Initializing create_model()
2025-01-18 19:27:24,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19310D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:24,313:INFO:Checking exceptions
2025-01-18 19:27:24,313:INFO:Importing libraries
2025-01-18 19:27:24,313:INFO:Copying training dataset
2025-01-18 19:27:24,359:INFO:Defining folds
2025-01-18 19:27:24,359:INFO:Declaring metric variables
2025-01-18 19:27:24,392:INFO:Importing untrained model
2025-01-18 19:27:24,397:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:27:24,405:INFO:Starting cross validation
2025-01-18 19:27:24,405:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:27:24,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,813:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,813:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,817:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,818:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,840:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,846:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,850:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:24,870:INFO:Calculating mean and std
2025-01-18 19:27:24,870:INFO:Creating metrics dataframe
2025-01-18 19:27:24,870:INFO:Uploading results into container
2025-01-18 19:27:24,870:INFO:Uploading model into container now
2025-01-18 19:27:24,870:INFO:_master_model_container: 35
2025-01-18 19:27:24,870:INFO:_display_container: 10
2025-01-18 19:27:24,870:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:27:24,870:INFO:create_model() successfully completed......................................
2025-01-18 19:27:24,988:INFO:SubProcess create_model() end ==================================
2025-01-18 19:27:24,988:INFO:Creating metrics dataframe
2025-01-18 19:27:24,995:INFO:Initializing Ada Boost Classifier
2025-01-18 19:27:24,995:INFO:Total runtime is 0.011548240979512533 minutes
2025-01-18 19:27:25,002:INFO:SubProcess create_model() called ==================================
2025-01-18 19:27:25,002:INFO:Initializing create_model()
2025-01-18 19:27:25,002:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19310D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:25,002:INFO:Checking exceptions
2025-01-18 19:27:25,002:INFO:Importing libraries
2025-01-18 19:27:25,002:INFO:Copying training dataset
2025-01-18 19:27:25,016:INFO:Defining folds
2025-01-18 19:27:25,016:INFO:Declaring metric variables
2025-01-18 19:27:25,021:INFO:Importing untrained model
2025-01-18 19:27:25,025:INFO:Ada Boost Classifier Imported successfully
2025-01-18 19:27:25,040:INFO:Starting cross validation
2025-01-18 19:27:25,048:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:27:25,094:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:27:25,094:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:27:25,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:27:25,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,315:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,322:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,342:INFO:Calculating mean and std
2025-01-18 19:27:25,344:INFO:Creating metrics dataframe
2025-01-18 19:27:25,346:INFO:Uploading results into container
2025-01-18 19:27:25,347:INFO:Uploading model into container now
2025-01-18 19:27:25,347:INFO:_master_model_container: 36
2025-01-18 19:27:25,347:INFO:_display_container: 10
2025-01-18 19:27:25,348:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-18 19:27:25,349:INFO:create_model() successfully completed......................................
2025-01-18 19:27:25,495:INFO:SubProcess create_model() end ==================================
2025-01-18 19:27:25,496:INFO:Creating metrics dataframe
2025-01-18 19:27:25,506:INFO:Initializing Gradient Boosting Classifier
2025-01-18 19:27:25,506:INFO:Total runtime is 0.02006763219833374 minutes
2025-01-18 19:27:25,514:INFO:SubProcess create_model() called ==================================
2025-01-18 19:27:25,517:INFO:Initializing create_model()
2025-01-18 19:27:25,517:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19310D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:25,518:INFO:Checking exceptions
2025-01-18 19:27:25,518:INFO:Importing libraries
2025-01-18 19:27:25,518:INFO:Copying training dataset
2025-01-18 19:27:25,531:INFO:Defining folds
2025-01-18 19:27:25,532:INFO:Declaring metric variables
2025-01-18 19:27:25,544:INFO:Importing untrained model
2025-01-18 19:27:25,544:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:27:25,559:INFO:Starting cross validation
2025-01-18 19:27:25,559:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:27:25,871:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:25,912:INFO:Calculating mean and std
2025-01-18 19:27:25,912:INFO:Creating metrics dataframe
2025-01-18 19:27:25,912:INFO:Uploading results into container
2025-01-18 19:27:25,912:INFO:Uploading model into container now
2025-01-18 19:27:25,912:INFO:_master_model_container: 37
2025-01-18 19:27:25,912:INFO:_display_container: 10
2025-01-18 19:27:25,912:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:27:25,912:INFO:create_model() successfully completed......................................
2025-01-18 19:27:26,029:INFO:SubProcess create_model() end ==================================
2025-01-18 19:27:26,032:INFO:Creating metrics dataframe
2025-01-18 19:27:26,046:INFO:Initializing Extra Trees Classifier
2025-01-18 19:27:26,046:INFO:Total runtime is 0.029063081741333006 minutes
2025-01-18 19:27:26,051:INFO:SubProcess create_model() called ==================================
2025-01-18 19:27:26,052:INFO:Initializing create_model()
2025-01-18 19:27:26,052:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19310D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:26,052:INFO:Checking exceptions
2025-01-18 19:27:26,052:INFO:Importing libraries
2025-01-18 19:27:26,052:INFO:Copying training dataset
2025-01-18 19:27:26,057:INFO:Defining folds
2025-01-18 19:27:26,057:INFO:Declaring metric variables
2025-01-18 19:27:26,069:INFO:Importing untrained model
2025-01-18 19:27:26,075:INFO:Extra Trees Classifier Imported successfully
2025-01-18 19:27:26,093:INFO:Starting cross validation
2025-01-18 19:27:26,096:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:27:26,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,466:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,482:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,483:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:26,494:INFO:Calculating mean and std
2025-01-18 19:27:26,494:INFO:Creating metrics dataframe
2025-01-18 19:27:26,494:INFO:Uploading results into container
2025-01-18 19:27:26,494:INFO:Uploading model into container now
2025-01-18 19:27:26,494:INFO:_master_model_container: 38
2025-01-18 19:27:26,494:INFO:_display_container: 10
2025-01-18 19:27:26,494:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-18 19:27:26,494:INFO:create_model() successfully completed......................................
2025-01-18 19:27:26,635:INFO:SubProcess create_model() end ==================================
2025-01-18 19:27:26,638:INFO:Creating metrics dataframe
2025-01-18 19:27:26,654:INFO:Initializing Light Gradient Boosting Machine
2025-01-18 19:27:26,654:INFO:Total runtime is 0.03920685847600301 minutes
2025-01-18 19:27:26,658:INFO:SubProcess create_model() called ==================================
2025-01-18 19:27:26,660:INFO:Initializing create_model()
2025-01-18 19:27:26,660:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19310D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:26,661:INFO:Checking exceptions
2025-01-18 19:27:26,662:INFO:Importing libraries
2025-01-18 19:27:26,662:INFO:Copying training dataset
2025-01-18 19:27:26,674:INFO:Defining folds
2025-01-18 19:27:26,674:INFO:Declaring metric variables
2025-01-18 19:27:26,685:INFO:Importing untrained model
2025-01-18 19:27:26,704:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:27:26,714:INFO:Starting cross validation
2025-01-18 19:27:26,717:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:27:27,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,246:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,273:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:27:27,294:INFO:Calculating mean and std
2025-01-18 19:27:27,294:INFO:Creating metrics dataframe
2025-01-18 19:27:27,302:INFO:Uploading results into container
2025-01-18 19:27:27,302:INFO:Uploading model into container now
2025-01-18 19:27:27,302:INFO:_master_model_container: 39
2025-01-18 19:27:27,302:INFO:_display_container: 10
2025-01-18 19:27:27,302:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:27:27,302:INFO:create_model() successfully completed......................................
2025-01-18 19:27:27,427:INFO:SubProcess create_model() end ==================================
2025-01-18 19:27:27,427:INFO:Creating metrics dataframe
2025-01-18 19:27:27,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-18 19:27:27,454:INFO:Initializing create_model()
2025-01-18 19:27:27,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:27:27,454:INFO:Checking exceptions
2025-01-18 19:27:27,457:INFO:Importing libraries
2025-01-18 19:27:27,457:INFO:Copying training dataset
2025-01-18 19:27:27,469:INFO:Defining folds
2025-01-18 19:27:27,469:INFO:Declaring metric variables
2025-01-18 19:27:27,470:INFO:Importing untrained model
2025-01-18 19:27:27,470:INFO:Declaring custom model
2025-01-18 19:27:27,470:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:27:27,471:INFO:Cross validation set to False
2025-01-18 19:27:27,471:INFO:Fitting Model
2025-01-18 19:27:27,829:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:27:27,829:INFO:create_model() successfully completed......................................
2025-01-18 19:27:27,999:INFO:_master_model_container: 39
2025-01-18 19:27:27,999:INFO:_display_container: 10
2025-01-18 19:27:28,003:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:27:28,003:INFO:compare_models() successfully completed......................................
2025-01-18 19:28:32,976:INFO:Initializing tune_model()
2025-01-18 19:28:32,977:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>)
2025-01-18 19:28:32,977:INFO:Checking exceptions
2025-01-18 19:28:32,999:INFO:Copying training dataset
2025-01-18 19:28:33,007:INFO:Checking base model
2025-01-18 19:28:33,007:INFO:Base model : Logistic Regression
2025-01-18 19:28:33,012:INFO:Declaring metric variables
2025-01-18 19:28:33,020:INFO:Defining Hyperparameters
2025-01-18 19:28:33,193:INFO:Tuning with n_jobs=-1
2025-01-18 19:28:33,193:INFO:Initializing RandomizedSearchCV
2025-01-18 19:28:34,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,410:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:34,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,133:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,238:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,481:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,793:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,835:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:35,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,195:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,293:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,612:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,669:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,828:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,905:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:36,977:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:37,052:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:37,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:37,300:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:37,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:37,427:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,419:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,792:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,876:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:38,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,230:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,306:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,587:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,675:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,848:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:39,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,049:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,251:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,320:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,536:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,628:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,885:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:40,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,150:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,378:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,418:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,510:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,614:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:41,760:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.833}
2025-01-18 19:28:41,760:INFO:Hyperparameter search completed
2025-01-18 19:28:41,760:INFO:SubProcess create_model() called ==================================
2025-01-18 19:28:41,760:INFO:Initializing create_model()
2025-01-18 19:28:41,760:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D19F17F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.833})
2025-01-18 19:28:41,767:INFO:Checking exceptions
2025-01-18 19:28:41,767:INFO:Importing libraries
2025-01-18 19:28:41,767:INFO:Copying training dataset
2025-01-18 19:28:41,780:INFO:Defining folds
2025-01-18 19:28:41,780:INFO:Declaring metric variables
2025-01-18 19:28:41,785:INFO:Importing untrained model
2025-01-18 19:28:41,785:INFO:Declaring custom model
2025-01-18 19:28:41,791:INFO:Logistic Regression Imported successfully
2025-01-18 19:28:41,800:INFO:Starting cross validation
2025-01-18 19:28:41,801:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:28:42,141:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,195:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,216:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,531:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,620:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:42,983:INFO:Calculating mean and std
2025-01-18 19:28:42,983:INFO:Creating metrics dataframe
2025-01-18 19:28:42,994:INFO:Finalizing model
2025-01-18 19:28:43,428:INFO:Uploading results into container
2025-01-18 19:28:43,431:INFO:Uploading model into container now
2025-01-18 19:28:43,433:INFO:_master_model_container: 40
2025-01-18 19:28:43,433:INFO:_display_container: 11
2025-01-18 19:28:43,434:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:28:43,434:INFO:create_model() successfully completed......................................
2025-01-18 19:28:43,563:INFO:SubProcess create_model() end ==================================
2025-01-18 19:28:43,563:INFO:choose_better activated
2025-01-18 19:28:43,563:INFO:SubProcess create_model() called ==================================
2025-01-18 19:28:43,563:INFO:Initializing create_model()
2025-01-18 19:28:43,563:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:28:43,563:INFO:Checking exceptions
2025-01-18 19:28:43,571:INFO:Importing libraries
2025-01-18 19:28:43,571:INFO:Copying training dataset
2025-01-18 19:28:43,582:INFO:Defining folds
2025-01-18 19:28:43,582:INFO:Declaring metric variables
2025-01-18 19:28:43,582:INFO:Importing untrained model
2025-01-18 19:28:43,582:INFO:Declaring custom model
2025-01-18 19:28:43,583:INFO:Logistic Regression Imported successfully
2025-01-18 19:28:43,583:INFO:Starting cross validation
2025-01-18 19:28:43,585:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:28:43,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:43,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,968:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:43,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,334:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,334:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,362:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,362:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,362:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,404:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,449:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,817:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:44,852:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,858:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,860:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,862:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,864:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,864:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:28:44,877:INFO:Calculating mean and std
2025-01-18 19:28:44,877:INFO:Creating metrics dataframe
2025-01-18 19:28:44,877:INFO:Finalizing model
2025-01-18 19:28:45,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:28:45,377:INFO:Uploading results into container
2025-01-18 19:28:45,377:INFO:Uploading model into container now
2025-01-18 19:28:45,377:INFO:_master_model_container: 41
2025-01-18 19:28:45,377:INFO:_display_container: 12
2025-01-18 19:28:45,377:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:28:45,377:INFO:create_model() successfully completed......................................
2025-01-18 19:28:45,514:INFO:SubProcess create_model() end ==================================
2025-01-18 19:28:45,516:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8211
2025-01-18 19:28:45,516:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8251
2025-01-18 19:28:45,516:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-18 19:28:45,516:INFO:choose_better completed
2025-01-18 19:28:45,532:INFO:_master_model_container: 41
2025-01-18 19:28:45,533:INFO:_display_container: 11
2025-01-18 19:28:45,533:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:28:45,533:INFO:tune_model() successfully completed......................................
2025-01-18 19:28:55,192:INFO:Initializing tune_model()
2025-01-18 19:28:55,192:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>)
2025-01-18 19:28:55,192:INFO:Checking exceptions
2025-01-18 19:28:55,218:INFO:Copying training dataset
2025-01-18 19:28:55,223:INFO:Checking base model
2025-01-18 19:28:55,223:INFO:Base model : Random Forest Classifier
2025-01-18 19:28:55,229:INFO:Declaring metric variables
2025-01-18 19:28:55,234:INFO:Defining Hyperparameters
2025-01-18 19:28:55,421:INFO:Tuning with n_jobs=-1
2025-01-18 19:28:55,421:INFO:Initializing RandomizedSearchCV
2025-01-18 19:29:11,577:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-18 19:29:11,577:INFO:Hyperparameter search completed
2025-01-18 19:29:11,577:INFO:SubProcess create_model() called ==================================
2025-01-18 19:29:11,577:INFO:Initializing create_model()
2025-01-18 19:29:11,577:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237CF4C8BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-18 19:29:11,577:INFO:Checking exceptions
2025-01-18 19:29:11,577:INFO:Importing libraries
2025-01-18 19:29:11,577:INFO:Copying training dataset
2025-01-18 19:29:11,592:INFO:Defining folds
2025-01-18 19:29:11,592:INFO:Declaring metric variables
2025-01-18 19:29:11,592:INFO:Importing untrained model
2025-01-18 19:29:11,592:INFO:Declaring custom model
2025-01-18 19:29:11,601:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:29:11,607:INFO:Starting cross validation
2025-01-18 19:29:11,614:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:29:12,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,174:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,684:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,790:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,790:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,790:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,857:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:12,863:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,336:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,383:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,383:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,383:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:13,418:INFO:Calculating mean and std
2025-01-18 19:29:13,418:INFO:Creating metrics dataframe
2025-01-18 19:29:13,425:INFO:Finalizing model
2025-01-18 19:29:13,906:INFO:Uploading results into container
2025-01-18 19:29:13,913:INFO:Uploading model into container now
2025-01-18 19:29:13,913:INFO:_master_model_container: 42
2025-01-18 19:29:13,913:INFO:_display_container: 12
2025-01-18 19:29:13,913:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-18 19:29:13,913:INFO:create_model() successfully completed......................................
2025-01-18 19:29:14,029:INFO:SubProcess create_model() end ==================================
2025-01-18 19:29:14,029:INFO:choose_better activated
2025-01-18 19:29:14,029:INFO:SubProcess create_model() called ==================================
2025-01-18 19:29:14,029:INFO:Initializing create_model()
2025-01-18 19:29:14,029:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:29:14,029:INFO:Checking exceptions
2025-01-18 19:29:14,029:INFO:Importing libraries
2025-01-18 19:29:14,029:INFO:Copying training dataset
2025-01-18 19:29:14,043:INFO:Defining folds
2025-01-18 19:29:14,043:INFO:Declaring metric variables
2025-01-18 19:29:14,043:INFO:Importing untrained model
2025-01-18 19:29:14,043:INFO:Declaring custom model
2025-01-18 19:29:14,043:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:29:14,043:INFO:Starting cross validation
2025-01-18 19:29:14,043:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:29:14,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,607:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,642:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,830:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,830:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,830:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,897:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,927:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,927:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:14,927:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,177:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,177:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,383:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:15,398:INFO:Calculating mean and std
2025-01-18 19:29:15,398:INFO:Creating metrics dataframe
2025-01-18 19:29:15,398:INFO:Finalizing model
2025-01-18 19:29:15,660:INFO:Uploading results into container
2025-01-18 19:29:15,660:INFO:Uploading model into container now
2025-01-18 19:29:15,660:INFO:_master_model_container: 43
2025-01-18 19:29:15,660:INFO:_display_container: 13
2025-01-18 19:29:15,660:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:29:15,660:INFO:create_model() successfully completed......................................
2025-01-18 19:29:15,780:INFO:SubProcess create_model() end ==================================
2025-01-18 19:29:15,780:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-18 19:29:15,780:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-18 19:29:15,780:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-18 19:29:15,780:INFO:choose_better completed
2025-01-18 19:29:15,793:INFO:_master_model_container: 43
2025-01-18 19:29:15,793:INFO:_display_container: 12
2025-01-18 19:29:15,793:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-18 19:29:15,793:INFO:tune_model() successfully completed......................................
2025-01-18 19:29:39,157:INFO:Initializing ensemble_model()
2025-01-18 19:29:39,157:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:29:39,157:INFO:Checking exceptions
2025-01-18 19:29:39,180:INFO:Importing libraries
2025-01-18 19:29:39,180:INFO:Copying training dataset
2025-01-18 19:29:39,181:INFO:Checking base model
2025-01-18 19:29:39,182:INFO:Base model : Decision Tree Classifier
2025-01-18 19:29:39,190:INFO:Importing untrained ensembler
2025-01-18 19:29:39,190:INFO:Ensemble method set to Bagging
2025-01-18 19:29:39,191:INFO:SubProcess create_model() called ==================================
2025-01-18 19:29:39,192:INFO:Initializing create_model()
2025-01-18 19:29:39,192:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D1C402B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:29:39,192:INFO:Checking exceptions
2025-01-18 19:29:39,192:INFO:Importing libraries
2025-01-18 19:29:39,192:INFO:Copying training dataset
2025-01-18 19:29:39,207:INFO:Defining folds
2025-01-18 19:29:39,208:INFO:Declaring metric variables
2025-01-18 19:29:39,214:INFO:Importing untrained model
2025-01-18 19:29:39,214:INFO:Declaring custom model
2025-01-18 19:29:39,223:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:29:39,235:INFO:Starting cross validation
2025-01-18 19:29:39,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:29:39,476:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,487:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,487:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,503:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,506:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,530:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,718:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,726:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,729:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,729:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,731:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,732:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,735:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,888:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,891:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,891:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,898:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,901:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:39,925:INFO:Calculating mean and std
2025-01-18 19:29:39,925:INFO:Creating metrics dataframe
2025-01-18 19:29:39,935:INFO:Finalizing model
2025-01-18 19:29:40,034:INFO:Uploading results into container
2025-01-18 19:29:40,038:INFO:Uploading model into container now
2025-01-18 19:29:40,038:INFO:_master_model_container: 44
2025-01-18 19:29:40,038:INFO:_display_container: 13
2025-01-18 19:29:40,038:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-18 19:29:40,038:INFO:create_model() successfully completed......................................
2025-01-18 19:29:40,154:INFO:SubProcess create_model() end ==================================
2025-01-18 19:29:40,173:INFO:_master_model_container: 44
2025-01-18 19:29:40,175:INFO:_display_container: 13
2025-01-18 19:29:40,180:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-18 19:29:40,180:INFO:ensemble_model() successfully completed......................................
2025-01-18 19:29:53,942:INFO:Initializing ensemble_model()
2025-01-18 19:29:53,942:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:29:53,943:INFO:Checking exceptions
2025-01-18 19:29:54,065:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,091:INFO:Importing libraries
2025-01-18 19:29:54,091:INFO:Copying training dataset
2025-01-18 19:29:54,091:INFO:Checking base model
2025-01-18 19:29:54,091:INFO:Base model : Decision Tree Classifier
2025-01-18 19:29:54,119:INFO:Importing untrained ensembler
2025-01-18 19:29:54,119:INFO:Ensemble method set to Boosting
2025-01-18 19:29:54,120:INFO:SubProcess create_model() called ==================================
2025-01-18 19:29:54,123:INFO:Initializing create_model()
2025-01-18 19:29:54,123:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D1D47100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:29:54,123:INFO:Checking exceptions
2025-01-18 19:29:54,123:INFO:Importing libraries
2025-01-18 19:29:54,123:INFO:Copying training dataset
2025-01-18 19:29:54,133:INFO:Defining folds
2025-01-18 19:29:54,133:INFO:Declaring metric variables
2025-01-18 19:29:54,142:INFO:Importing untrained model
2025-01-18 19:29:54,143:INFO:Declaring custom model
2025-01-18 19:29:54,150:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:29:54,192:INFO:Starting cross validation
2025-01-18 19:29:54,194:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:29:54,256:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,256:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,297:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,348:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,348:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,366:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,366:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,373:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,382:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,389:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,419:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,426:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,496:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,496:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,497:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,499:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,500:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,500:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,503:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,504:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,523:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,530:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,530:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,541:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,548:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,577:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,577:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,580:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:29:54,592:INFO:Calculating mean and std
2025-01-18 19:29:54,592:INFO:Creating metrics dataframe
2025-01-18 19:29:54,599:INFO:Finalizing model
2025-01-18 19:29:54,637:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:29:54,665:INFO:Uploading results into container
2025-01-18 19:29:54,669:INFO:Uploading model into container now
2025-01-18 19:29:54,670:INFO:_master_model_container: 45
2025-01-18 19:29:54,670:INFO:_display_container: 14
2025-01-18 19:29:54,670:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-18 19:29:54,670:INFO:create_model() successfully completed......................................
2025-01-18 19:29:54,828:INFO:SubProcess create_model() end ==================================
2025-01-18 19:29:54,842:INFO:_master_model_container: 45
2025-01-18 19:29:54,842:INFO:_display_container: 14
2025-01-18 19:29:54,843:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-18 19:29:54,843:INFO:ensemble_model() successfully completed......................................
2025-01-18 19:30:14,804:INFO:Initializing blend_models()
2025-01-18 19:30:14,804:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:30:14,804:INFO:Checking exceptions
2025-01-18 19:30:14,824:INFO:Importing libraries
2025-01-18 19:30:14,827:INFO:Copying training dataset
2025-01-18 19:30:14,831:INFO:Getting model names
2025-01-18 19:30:14,836:INFO:SubProcess create_model() called ==================================
2025-01-18 19:30:14,848:INFO:Initializing create_model()
2025-01-18 19:30:14,849:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237CF4C8BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:30:14,849:INFO:Checking exceptions
2025-01-18 19:30:14,849:INFO:Importing libraries
2025-01-18 19:30:14,849:INFO:Copying training dataset
2025-01-18 19:30:14,867:INFO:Defining folds
2025-01-18 19:30:14,867:INFO:Declaring metric variables
2025-01-18 19:30:14,872:INFO:Importing untrained model
2025-01-18 19:30:14,872:INFO:Declaring custom model
2025-01-18 19:30:14,879:INFO:Voting Classifier Imported successfully
2025-01-18 19:30:14,890:INFO:Starting cross validation
2025-01-18 19:30:14,892:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:30:15,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,044:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,079:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,080:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,632:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,636:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,639:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,643:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,645:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,666:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,671:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,674:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:15,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,759:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:15,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:16,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,419:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,419:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,426:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:16,447:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:16,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,585:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,946:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,946:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:16,974:INFO:Calculating mean and std
2025-01-18 19:30:16,974:INFO:Creating metrics dataframe
2025-01-18 19:30:16,981:INFO:Finalizing model
2025-01-18 19:30:17,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:17,538:INFO:Uploading results into container
2025-01-18 19:30:17,538:INFO:Uploading model into container now
2025-01-18 19:30:17,538:INFO:_master_model_container: 46
2025-01-18 19:30:17,538:INFO:_display_container: 15
2025-01-18 19:30:17,550:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-18 19:30:17,550:INFO:create_model() successfully completed......................................
2025-01-18 19:30:17,668:INFO:SubProcess create_model() end ==================================
2025-01-18 19:30:17,676:INFO:_master_model_container: 46
2025-01-18 19:30:17,682:INFO:_display_container: 15
2025-01-18 19:30:17,691:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-18 19:30:17,691:INFO:blend_models() successfully completed......................................
2025-01-18 19:30:46,174:INFO:Initializing stack_models()
2025-01-18 19:30:46,174:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:30:46,175:INFO:Checking exceptions
2025-01-18 19:30:46,178:INFO:Defining meta model
2025-01-18 19:30:46,199:INFO:Getting model names
2025-01-18 19:30:46,200:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-18 19:30:46,223:INFO:SubProcess create_model() called ==================================
2025-01-18 19:30:46,238:INFO:Initializing create_model()
2025-01-18 19:30:46,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237D0A8CE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:30:46,238:INFO:Checking exceptions
2025-01-18 19:30:46,238:INFO:Importing libraries
2025-01-18 19:30:46,238:INFO:Copying training dataset
2025-01-18 19:30:46,251:INFO:Defining folds
2025-01-18 19:30:46,252:INFO:Declaring metric variables
2025-01-18 19:30:46,258:INFO:Importing untrained model
2025-01-18 19:30:46,260:INFO:Declaring custom model
2025-01-18 19:30:46,294:INFO:Stacking Classifier Imported successfully
2025-01-18 19:30:46,307:INFO:Starting cross validation
2025-01-18 19:30:46,310:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:30:46,413:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,414:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,424:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,458:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,955:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:46,987:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,029:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,031:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,054:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,084:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,223:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,231:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:47,273:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:49,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:49,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:49,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,008:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,080:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,244:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:50,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,670:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,752:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,758:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,779:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,793:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,809:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,857:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,901:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:50,926:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,060:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,091:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,566:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,690:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:51,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:53,344:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,344:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,344:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,527:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:53,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,733:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,823:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:53,901:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,901:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:53,901:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:54,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,137:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,183:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,215:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,409:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,467:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,482:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,512:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:54,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:54,661:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:54,661:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,467:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,467:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,668:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,675:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,675:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:30:56,689:INFO:Calculating mean and std
2025-01-18 19:30:56,689:INFO:Creating metrics dataframe
2025-01-18 19:30:56,697:INFO:Finalizing model
2025-01-18 19:30:56,737:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:57,218:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:57,225:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:57,225:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:57,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:57,237:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:30:59,616:INFO:Uploading results into container
2025-01-18 19:30:59,621:INFO:Uploading model into container now
2025-01-18 19:30:59,621:INFO:_master_model_container: 47
2025-01-18 19:30:59,622:INFO:_display_container: 16
2025-01-18 19:30:59,633:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-18 19:30:59,633:INFO:create_model() successfully completed......................................
2025-01-18 19:30:59,753:INFO:SubProcess create_model() end ==================================
2025-01-18 19:30:59,770:INFO:_master_model_container: 47
2025-01-18 19:30:59,771:INFO:_display_container: 16
2025-01-18 19:30:59,780:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-18 19:30:59,780:INFO:stack_models() successfully completed......................................
2025-01-18 19:31:11,990:INFO:Initializing plot_model()
2025-01-18 19:31:11,990:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:31:11,990:INFO:Checking exceptions
2025-01-18 19:31:12,047:INFO:Preloading libraries
2025-01-18 19:31:12,066:INFO:Copying training dataset
2025-01-18 19:31:12,066:INFO:Plot type: auc
2025-01-18 19:31:12,292:INFO:Fitting Model
2025-01-18 19:31:12,294:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:31:12,295:INFO:Scoring test/hold-out set
2025-01-18 19:31:12,759:INFO:Visual Rendered Successfully
2025-01-18 19:31:12,891:INFO:plot_model() successfully completed......................................
2025-01-18 19:31:37,849:INFO:Initializing plot_model()
2025-01-18 19:31:37,849:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:31:37,849:INFO:Checking exceptions
2025-01-18 19:31:37,893:INFO:Preloading libraries
2025-01-18 19:31:37,905:INFO:Copying training dataset
2025-01-18 19:31:37,906:INFO:Plot type: confusion_matrix
2025-01-18 19:31:38,098:INFO:Fitting Model
2025-01-18 19:31:38,098:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:31:38,098:INFO:Scoring test/hold-out set
2025-01-18 19:31:38,373:INFO:Visual Rendered Successfully
2025-01-18 19:31:38,502:INFO:plot_model() successfully completed......................................
2025-01-18 19:31:43,579:INFO:Initializing plot_model()
2025-01-18 19:31:43,585:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:31:43,585:INFO:Checking exceptions
2025-01-18 19:31:43,626:INFO:Preloading libraries
2025-01-18 19:31:43,635:INFO:Copying training dataset
2025-01-18 19:31:43,635:INFO:Plot type: auc
2025-01-18 19:31:43,851:INFO:Fitting Model
2025-01-18 19:31:43,851:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:31:43,851:INFO:Scoring test/hold-out set
2025-01-18 19:31:44,211:INFO:Visual Rendered Successfully
2025-01-18 19:31:44,334:INFO:plot_model() successfully completed......................................
2025-01-18 19:31:51,397:INFO:Initializing plot_model()
2025-01-18 19:31:51,398:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:31:51,398:INFO:Checking exceptions
2025-01-18 19:31:51,450:INFO:Preloading libraries
2025-01-18 19:31:51,460:INFO:Copying training dataset
2025-01-18 19:31:51,460:INFO:Plot type: confusion_matrix
2025-01-18 19:31:51,718:INFO:Fitting Model
2025-01-18 19:31:51,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:31:51,719:INFO:Scoring test/hold-out set
2025-01-18 19:31:52,003:INFO:Visual Rendered Successfully
2025-01-18 19:31:52,153:INFO:plot_model() successfully completed......................................
2025-01-18 19:32:04,298:INFO:Initializing plot_model()
2025-01-18 19:32:04,298:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:32:04,298:INFO:Checking exceptions
2025-01-18 19:32:04,344:INFO:Preloading libraries
2025-01-18 19:32:04,356:INFO:Copying training dataset
2025-01-18 19:32:04,356:INFO:Plot type: feature
2025-01-18 19:32:04,356:WARNING:No coef_ found. Trying feature_importances_
2025-01-18 19:32:04,640:INFO:Visual Rendered Successfully
2025-01-18 19:32:04,747:INFO:plot_model() successfully completed......................................
2025-01-18 19:32:25,984:INFO:Initializing plot_model()
2025-01-18 19:32:25,984:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:32:25,984:INFO:Checking exceptions
2025-01-18 19:32:26,030:INFO:Preloading libraries
2025-01-18 19:32:26,041:INFO:Copying training dataset
2025-01-18 19:32:26,041:INFO:Plot type: boundary
2025-01-18 19:32:26,179:INFO:Fitting StandardScaler()
2025-01-18 19:32:26,183:INFO:Fitting PCA()
2025-01-18 19:32:26,317:INFO:Fitting Model
2025-01-18 19:32:28,300:INFO:Visual Rendered Successfully
2025-01-18 19:32:28,488:INFO:plot_model() successfully completed......................................
2025-01-18 19:32:56,496:INFO:Initializing plot_model()
2025-01-18 19:32:56,496:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:32:56,496:INFO:Checking exceptions
2025-01-18 19:32:56,536:INFO:Preloading libraries
2025-01-18 19:32:56,551:INFO:Copying training dataset
2025-01-18 19:32:56,551:INFO:Plot type: pr
2025-01-18 19:32:56,787:INFO:Fitting Model
2025-01-18 19:32:56,788:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:32:56,788:INFO:Scoring test/hold-out set
2025-01-18 19:32:57,120:INFO:Visual Rendered Successfully
2025-01-18 19:32:57,258:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:07,744:INFO:Initializing plot_model()
2025-01-18 19:33:07,745:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:07,745:INFO:Checking exceptions
2025-01-18 19:33:07,787:INFO:Preloading libraries
2025-01-18 19:33:07,796:INFO:Copying training dataset
2025-01-18 19:33:07,796:INFO:Plot type: class_report
2025-01-18 19:33:07,996:INFO:Fitting Model
2025-01-18 19:33:07,996:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:33:07,996:INFO:Scoring test/hold-out set
2025-01-18 19:33:08,388:INFO:Visual Rendered Successfully
2025-01-18 19:33:08,511:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:20,275:INFO:Initializing evaluate_model()
2025-01-18 19:33:20,276:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-18 19:33:20,294:INFO:Initializing plot_model()
2025-01-18 19:33:20,294:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:20,294:INFO:Checking exceptions
2025-01-18 19:33:20,331:INFO:Preloading libraries
2025-01-18 19:33:20,342:INFO:Copying training dataset
2025-01-18 19:33:20,342:INFO:Plot type: pipeline
2025-01-18 19:33:20,586:INFO:Visual Rendered Successfully
2025-01-18 19:33:20,714:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:34,911:INFO:Initializing plot_model()
2025-01-18 19:33:34,912:INFO:plot_model(plot=class_report, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:34,912:INFO:Checking exceptions
2025-01-18 19:33:34,940:INFO:Preloading libraries
2025-01-18 19:33:34,940:INFO:Copying training dataset
2025-01-18 19:33:34,940:INFO:Plot type: class_report
2025-01-18 19:33:35,126:INFO:Fitting Model
2025-01-18 19:33:35,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:33:35,126:INFO:Scoring test/hold-out set
2025-01-18 19:33:35,488:INFO:Visual Rendered Successfully
2025-01-18 19:33:35,598:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:36,755:INFO:Initializing plot_model()
2025-01-18 19:33:36,756:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:36,756:INFO:Checking exceptions
2025-01-18 19:33:36,828:INFO:Preloading libraries
2025-01-18 19:33:36,828:INFO:Copying training dataset
2025-01-18 19:33:36,828:INFO:Plot type: feature
2025-01-18 19:33:36,828:WARNING:No coef_ found. Trying feature_importances_
2025-01-18 19:33:37,076:INFO:Visual Rendered Successfully
2025-01-18 19:33:37,184:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:38,254:INFO:Initializing plot_model()
2025-01-18 19:33:38,255:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:38,255:INFO:Checking exceptions
2025-01-18 19:33:38,320:INFO:Preloading libraries
2025-01-18 19:33:38,320:INFO:Copying training dataset
2025-01-18 19:33:38,320:INFO:Plot type: parameter
2025-01-18 19:33:38,336:INFO:Visual Rendered Successfully
2025-01-18 19:33:38,441:INFO:plot_model() successfully completed......................................
2025-01-18 19:33:40,833:INFO:Initializing plot_model()
2025-01-18 19:33:40,833:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:33:40,833:INFO:Checking exceptions
2025-01-18 19:33:40,865:INFO:Preloading libraries
2025-01-18 19:33:40,865:INFO:Copying training dataset
2025-01-18 19:33:40,865:INFO:Plot type: rfe
2025-01-18 19:33:41,112:INFO:Fitting Model
2025-01-18 19:37:04,128:INFO:Initializing evaluate_model()
2025-01-18 19:37:04,128:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-18 19:37:04,145:INFO:Initializing plot_model()
2025-01-18 19:37:04,145:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:37:04,145:INFO:Checking exceptions
2025-01-18 19:37:04,187:INFO:Preloading libraries
2025-01-18 19:37:04,201:INFO:Copying training dataset
2025-01-18 19:37:04,201:INFO:Plot type: pipeline
2025-01-18 19:37:04,338:INFO:Visual Rendered Successfully
2025-01-18 19:37:04,466:INFO:plot_model() successfully completed......................................
2025-01-18 19:37:04,500:INFO:Initializing plot_model()
2025-01-18 19:37:04,500:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:37:04,500:INFO:Checking exceptions
2025-01-18 19:37:04,617:INFO:Preloading libraries
2025-01-18 19:37:04,626:INFO:Copying training dataset
2025-01-18 19:37:04,626:INFO:Plot type: pipeline
2025-01-18 19:37:04,765:INFO:Visual Rendered Successfully
2025-01-18 19:37:04,952:INFO:plot_model() successfully completed......................................
2025-01-18 19:37:08,982:INFO:Initializing evaluate_model()
2025-01-18 19:37:08,988:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-18 19:37:09,002:INFO:Initializing plot_model()
2025-01-18 19:37:09,002:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:37:09,002:INFO:Checking exceptions
2025-01-18 19:37:09,045:INFO:Preloading libraries
2025-01-18 19:37:09,050:INFO:Copying training dataset
2025-01-18 19:37:09,050:INFO:Plot type: pipeline
2025-01-18 19:37:09,204:INFO:Visual Rendered Successfully
2025-01-18 19:37:09,347:INFO:plot_model() successfully completed......................................
2025-01-18 19:37:15,098:INFO:Initializing evaluate_model()
2025-01-18 19:37:15,098:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-18 19:37:15,113:INFO:Initializing plot_model()
2025-01-18 19:37:15,113:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, system=True)
2025-01-18 19:37:15,113:INFO:Checking exceptions
2025-01-18 19:37:15,151:INFO:Preloading libraries
2025-01-18 19:37:15,153:INFO:Copying training dataset
2025-01-18 19:37:15,153:INFO:Plot type: pipeline
2025-01-18 19:37:15,347:INFO:Visual Rendered Successfully
2025-01-18 19:37:15,504:INFO:plot_model() successfully completed......................................
2025-01-18 19:37:15,544:INFO:Initializing create_model()
2025-01-18 19:37:15,544:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=catboost, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:37:15,545:INFO:Checking exceptions
2025-01-18 19:37:41,528:INFO:Initializing create_model()
2025-01-18 19:37:41,528:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=catboost, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:37:41,528:INFO:Checking exceptions
2025-01-18 19:38:12,887:INFO:Initializing create_model()
2025-01-18 19:38:12,887:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=gbc, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:38:12,887:INFO:Checking exceptions
2025-01-18 19:38:12,891:INFO:Importing libraries
2025-01-18 19:38:12,891:INFO:Copying training dataset
2025-01-18 19:38:12,912:INFO:Defining folds
2025-01-18 19:38:12,912:INFO:Declaring metric variables
2025-01-18 19:38:12,917:INFO:Importing untrained model
2025-01-18 19:38:12,929:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:38:12,938:INFO:Cross validation set to False
2025-01-18 19:38:12,938:INFO:Fitting Model
2025-01-18 19:38:13,263:INFO:Initializing predict_model()
2025-01-18 19:38:13,264:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000237D8450430>)
2025-01-18 19:38:13,264:INFO:Checking exceptions
2025-01-18 19:38:13,264:INFO:Preloading libraries
2025-01-18 19:38:13,391:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:38:13,398:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:38:13,398:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:38:13,608:INFO:_display_container: 17
2025-01-18 19:38:13,609:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:38:13,609:INFO:create_model() successfully completed......................................
2025-01-18 19:38:19,250:INFO:Initializing interpret_model()
2025-01-18 19:38:19,251:INFO:interpret_model(estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>)
2025-01-18 19:38:19,251:INFO:Checking exceptions
2025-01-18 19:38:19,251:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-18 19:38:59,794:INFO:Initializing interpret_model()
2025-01-18 19:38:59,794:INFO:interpret_model(estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237D181F670>)
2025-01-18 19:38:59,794:INFO:Checking exceptions
2025-01-18 19:38:59,794:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-18 19:39:14,529:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:39:14,529:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:39:14,529:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:39:14,529:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-18 19:39:16,397:INFO:PyCaret ClassificationExperiment
2025-01-18 19:39:16,397:INFO:Logging name: juice1
2025-01-18 19:39:16,397:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-18 19:39:16,397:INFO:version 3.3.2
2025-01-18 19:39:16,397:INFO:Initializing setup()
2025-01-18 19:39:16,397:INFO:self.USI: e770
2025-01-18 19:39:16,397:INFO:self._variable_keys: {'n_jobs_param', 'y_train', 'pipeline', 'data', 'X_test', 'idx', 'gpu_param', 'y', 'USI', 'y_test', 'X_train', 'is_multiclass', 'target_param', 'seed', 'fix_imbalance', 'X', 'gpu_n_jobs_param', 'fold_generator', '_available_plots', 'exp_id', 'logging_param', 'fold_shuffle_param', '_ml_usecase', 'log_plots_param', 'html_param', 'exp_name_log', 'fold_groups_param', 'memory'}
2025-01-18 19:39:16,397:INFO:Checking environment
2025-01-18 19:39:16,397:INFO:python_version: 3.9.21
2025-01-18 19:39:16,397:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-18 19:39:16,397:INFO:machine: AMD64
2025-01-18 19:39:16,397:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-18 19:39:16,397:INFO:Memory: svmem(total=8583708672, available=1972396032, percent=77.0, used=6611312640, free=1972396032)
2025-01-18 19:39:16,397:INFO:Physical Core: 4
2025-01-18 19:39:16,397:INFO:Logical Core: 4
2025-01-18 19:39:16,412:INFO:Checking libraries
2025-01-18 19:39:16,412:INFO:System:
2025-01-18 19:39:16,412:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-18 19:39:16,412:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-18 19:39:16,412:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-18 19:39:16,412:INFO:PyCaret required dependencies:
2025-01-18 19:39:16,439:INFO:                 pip: 24.2
2025-01-18 19:39:16,439:INFO:          setuptools: 75.1.0
2025-01-18 19:39:16,439:INFO:             pycaret: 3.3.2
2025-01-18 19:39:16,439:INFO:             IPython: 8.18.1
2025-01-18 19:39:16,439:INFO:          ipywidgets: 8.1.5
2025-01-18 19:39:16,439:INFO:                tqdm: 4.67.1
2025-01-18 19:39:16,439:INFO:               numpy: 1.26.4
2025-01-18 19:39:16,439:INFO:              pandas: 2.1.4
2025-01-18 19:39:16,439:INFO:              jinja2: 3.1.5
2025-01-18 19:39:16,439:INFO:               scipy: 1.11.4
2025-01-18 19:39:16,439:INFO:              joblib: 1.3.2
2025-01-18 19:39:16,439:INFO:             sklearn: 1.4.2
2025-01-18 19:39:16,439:INFO:                pyod: 2.0.3
2025-01-18 19:39:16,439:INFO:            imblearn: 0.12.4
2025-01-18 19:39:16,439:INFO:   category_encoders: 2.6.4
2025-01-18 19:39:16,439:INFO:            lightgbm: 4.5.0
2025-01-18 19:39:16,439:INFO:               numba: 0.60.0
2025-01-18 19:39:16,439:INFO:            requests: 2.32.3
2025-01-18 19:39:16,439:INFO:          matplotlib: 3.7.5
2025-01-18 19:39:16,439:INFO:          scikitplot: 0.3.7
2025-01-18 19:39:16,439:INFO:         yellowbrick: 1.5
2025-01-18 19:39:16,439:INFO:              plotly: 5.24.1
2025-01-18 19:39:16,439:INFO:    plotly-resampler: Not installed
2025-01-18 19:39:16,439:INFO:             kaleido: 0.2.1
2025-01-18 19:39:16,439:INFO:           schemdraw: 0.15
2025-01-18 19:39:16,439:INFO:         statsmodels: 0.14.4
2025-01-18 19:39:16,439:INFO:              sktime: 0.26.0
2025-01-18 19:39:16,439:INFO:               tbats: 1.1.3
2025-01-18 19:39:16,439:INFO:            pmdarima: 2.0.4
2025-01-18 19:39:16,439:INFO:              psutil: 6.1.1
2025-01-18 19:39:16,439:INFO:          markupsafe: 3.0.2
2025-01-18 19:39:16,439:INFO:             pickle5: Not installed
2025-01-18 19:39:16,439:INFO:         cloudpickle: 3.1.1
2025-01-18 19:39:16,439:INFO:         deprecation: 2.1.0
2025-01-18 19:39:16,439:INFO:              xxhash: 3.5.0
2025-01-18 19:39:16,439:INFO:           wurlitzer: Not installed
2025-01-18 19:39:16,439:INFO:PyCaret optional dependencies:
2025-01-18 19:39:16,453:INFO:                shap: 0.46.0
2025-01-18 19:39:16,453:INFO:           interpret: Not installed
2025-01-18 19:39:16,453:INFO:                umap: Not installed
2025-01-18 19:39:16,453:INFO:     ydata_profiling: Not installed
2025-01-18 19:39:16,453:INFO:  explainerdashboard: Not installed
2025-01-18 19:39:16,453:INFO:             autoviz: Not installed
2025-01-18 19:39:16,453:INFO:           fairlearn: Not installed
2025-01-18 19:39:16,453:INFO:          deepchecks: Not installed
2025-01-18 19:39:16,453:INFO:             xgboost: Not installed
2025-01-18 19:39:16,453:INFO:            catboost: Not installed
2025-01-18 19:39:16,453:INFO:              kmodes: Not installed
2025-01-18 19:39:16,453:INFO:             mlxtend: Not installed
2025-01-18 19:39:16,453:INFO:       statsforecast: Not installed
2025-01-18 19:39:16,453:INFO:        tune_sklearn: Not installed
2025-01-18 19:39:16,453:INFO:                 ray: Not installed
2025-01-18 19:39:16,453:INFO:            hyperopt: Not installed
2025-01-18 19:39:16,453:INFO:              optuna: Not installed
2025-01-18 19:39:16,453:INFO:               skopt: Not installed
2025-01-18 19:39:16,453:INFO:              mlflow: 2.19.0
2025-01-18 19:39:16,453:INFO:              gradio: Not installed
2025-01-18 19:39:16,453:INFO:             fastapi: Not installed
2025-01-18 19:39:16,453:INFO:             uvicorn: Not installed
2025-01-18 19:39:16,453:INFO:              m2cgen: Not installed
2025-01-18 19:39:16,453:INFO:           evidently: Not installed
2025-01-18 19:39:16,453:INFO:               fugue: Not installed
2025-01-18 19:39:16,453:INFO:           streamlit: Not installed
2025-01-18 19:39:16,453:INFO:             prophet: Not installed
2025-01-18 19:39:16,453:INFO:None
2025-01-18 19:39:16,453:INFO:Set up data.
2025-01-18 19:39:16,469:INFO:Set up folding strategy.
2025-01-18 19:39:16,469:INFO:Set up train/test split.
2025-01-18 19:39:16,481:INFO:Set up index.
2025-01-18 19:39:16,481:INFO:Assigning column types.
2025-01-18 19:39:16,488:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-18 19:39:16,550:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,557:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,599:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,654:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,668:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,696:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,710:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-18 19:39:16,773:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,807:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,807:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,862:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-18 19:39:16,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:16,904:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-18 19:39:17,009:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,009:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,115:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,121:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,121:INFO:Preparing preprocessing pipeline...
2025-01-18 19:39:17,121:INFO:Set up label encoding.
2025-01-18 19:39:17,121:INFO:Set up simple imputation.
2025-01-18 19:39:17,127:INFO:Set up encoding of ordinal features.
2025-01-18 19:39:17,127:INFO:Set up encoding of categorical features.
2025-01-18 19:39:17,203:INFO:Finished creating preprocessing pipeline.
2025-01-18 19:39:17,224:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loya...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-18 19:39:17,224:INFO:Creating final display dataframe.
2025-01-18 19:39:17,508:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             e770
2025-01-18 19:39:17,654:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,654:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,821:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,821:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:17,828:INFO:setup() successfully completed in 1.43s...............
2025-01-18 19:39:17,864:INFO:Initializing compare_models()
2025-01-18 19:39:17,864:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-18 19:39:17,864:INFO:Checking exceptions
2025-01-18 19:39:17,870:INFO:Preparing display monitor
2025-01-18 19:39:17,914:INFO:Initializing Logistic Regression
2025-01-18 19:39:17,914:INFO:Total runtime is 1.6391277313232422e-05 minutes
2025-01-18 19:39:17,920:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:17,920:INFO:Initializing create_model()
2025-01-18 19:39:17,921:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:17,922:INFO:Checking exceptions
2025-01-18 19:39:17,922:INFO:Importing libraries
2025-01-18 19:39:17,922:INFO:Copying training dataset
2025-01-18 19:39:17,930:INFO:Defining folds
2025-01-18 19:39:17,930:INFO:Declaring metric variables
2025-01-18 19:39:17,935:INFO:Importing untrained model
2025-01-18 19:39:17,940:INFO:Logistic Regression Imported successfully
2025-01-18 19:39:17,952:INFO:Starting cross validation
2025-01-18 19:39:17,954:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:23,318:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:23,330:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:23,381:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,452:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,479:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,479:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,483:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,484:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,487:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,877:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:23,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:23,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,946:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,946:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,967:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:23,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:23,981:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:24,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,412:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:24,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:24,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,469:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,510:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,510:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:24,516:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,517:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,565:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,578:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,588:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:24,616:INFO:Calculating mean and std
2025-01-18 19:39:24,620:INFO:Creating metrics dataframe
2025-01-18 19:39:24,628:INFO:Uploading results into container
2025-01-18 19:39:24,629:INFO:Uploading model into container now
2025-01-18 19:39:24,630:INFO:_master_model_container: 1
2025-01-18 19:39:24,631:INFO:_display_container: 2
2025-01-18 19:39:24,633:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:39:24,633:INFO:create_model() successfully completed......................................
2025-01-18 19:39:24,806:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:24,806:INFO:Creating metrics dataframe
2025-01-18 19:39:24,823:INFO:Initializing K Neighbors Classifier
2025-01-18 19:39:24,823:INFO:Total runtime is 0.11515220801035563 minutes
2025-01-18 19:39:24,836:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:24,837:INFO:Initializing create_model()
2025-01-18 19:39:24,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:24,838:INFO:Checking exceptions
2025-01-18 19:39:24,838:INFO:Importing libraries
2025-01-18 19:39:24,840:INFO:Copying training dataset
2025-01-18 19:39:24,861:INFO:Defining folds
2025-01-18 19:39:24,863:INFO:Declaring metric variables
2025-01-18 19:39:24,872:INFO:Importing untrained model
2025-01-18 19:39:24,879:INFO:K Neighbors Classifier Imported successfully
2025-01-18 19:39:24,905:INFO:Starting cross validation
2025-01-18 19:39:24,913:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:25,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,101:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,109:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,115:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,134:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,195:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,199:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,202:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,203:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,219:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,219:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,219:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,231:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,238:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,275:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,280:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,334:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,334:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,351:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,395:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,418:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,433:INFO:Calculating mean and std
2025-01-18 19:39:25,435:INFO:Creating metrics dataframe
2025-01-18 19:39:25,440:INFO:Uploading results into container
2025-01-18 19:39:25,440:INFO:Uploading model into container now
2025-01-18 19:39:25,440:INFO:_master_model_container: 2
2025-01-18 19:39:25,440:INFO:_display_container: 2
2025-01-18 19:39:25,440:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-18 19:39:25,440:INFO:create_model() successfully completed......................................
2025-01-18 19:39:25,636:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:25,637:INFO:Creating metrics dataframe
2025-01-18 19:39:25,647:INFO:Initializing Naive Bayes
2025-01-18 19:39:25,647:INFO:Total runtime is 0.12889861663182575 minutes
2025-01-18 19:39:25,664:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:25,664:INFO:Initializing create_model()
2025-01-18 19:39:25,664:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:25,664:INFO:Checking exceptions
2025-01-18 19:39:25,664:INFO:Importing libraries
2025-01-18 19:39:25,664:INFO:Copying training dataset
2025-01-18 19:39:25,687:INFO:Defining folds
2025-01-18 19:39:25,689:INFO:Declaring metric variables
2025-01-18 19:39:25,704:INFO:Importing untrained model
2025-01-18 19:39:25,717:INFO:Naive Bayes Imported successfully
2025-01-18 19:39:25,733:INFO:Starting cross validation
2025-01-18 19:39:25,736:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:25,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,853:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,853:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,866:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,866:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,906:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,911:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,939:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,955:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,959:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,959:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,959:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,959:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:25,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,026:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,026:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,026:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,042:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,042:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,066:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,100:INFO:Calculating mean and std
2025-01-18 19:39:26,100:INFO:Creating metrics dataframe
2025-01-18 19:39:26,109:INFO:Uploading results into container
2025-01-18 19:39:26,109:INFO:Uploading model into container now
2025-01-18 19:39:26,109:INFO:_master_model_container: 3
2025-01-18 19:39:26,109:INFO:_display_container: 2
2025-01-18 19:39:26,109:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-18 19:39:26,109:INFO:create_model() successfully completed......................................
2025-01-18 19:39:26,326:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:26,327:INFO:Creating metrics dataframe
2025-01-18 19:39:26,356:INFO:Initializing Decision Tree Classifier
2025-01-18 19:39:26,356:INFO:Total runtime is 0.1407003084818522 minutes
2025-01-18 19:39:26,370:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:26,371:INFO:Initializing create_model()
2025-01-18 19:39:26,371:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:26,371:INFO:Checking exceptions
2025-01-18 19:39:26,371:INFO:Importing libraries
2025-01-18 19:39:26,371:INFO:Copying training dataset
2025-01-18 19:39:26,391:INFO:Defining folds
2025-01-18 19:39:26,392:INFO:Declaring metric variables
2025-01-18 19:39:26,401:INFO:Importing untrained model
2025-01-18 19:39:26,408:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:39:26,435:INFO:Starting cross validation
2025-01-18 19:39:26,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:26,538:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,551:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,555:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,571:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,581:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,586:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,661:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,669:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,669:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,683:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,697:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,708:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,752:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,758:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,758:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,774:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:26,801:INFO:Calculating mean and std
2025-01-18 19:39:26,801:INFO:Creating metrics dataframe
2025-01-18 19:39:26,809:INFO:Uploading results into container
2025-01-18 19:39:26,810:INFO:Uploading model into container now
2025-01-18 19:39:26,811:INFO:_master_model_container: 4
2025-01-18 19:39:26,811:INFO:_display_container: 2
2025-01-18 19:39:26,811:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-18 19:39:26,811:INFO:create_model() successfully completed......................................
2025-01-18 19:39:26,912:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:26,918:INFO:Creating metrics dataframe
2025-01-18 19:39:26,929:INFO:Initializing SVM - Linear Kernel
2025-01-18 19:39:26,929:INFO:Total runtime is 0.1502648115158081 minutes
2025-01-18 19:39:26,933:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:26,933:INFO:Initializing create_model()
2025-01-18 19:39:26,933:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:26,933:INFO:Checking exceptions
2025-01-18 19:39:26,933:INFO:Importing libraries
2025-01-18 19:39:26,933:INFO:Copying training dataset
2025-01-18 19:39:26,940:INFO:Defining folds
2025-01-18 19:39:26,940:INFO:Declaring metric variables
2025-01-18 19:39:26,949:INFO:Importing untrained model
2025-01-18 19:39:26,969:INFO:SVM - Linear Kernel Imported successfully
2025-01-18 19:39:26,979:INFO:Starting cross validation
2025-01-18 19:39:26,983:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:27,157:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,160:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,179:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,180:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,190:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,191:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,192:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,193:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,272:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,310:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,327:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,327:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,339:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,382:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,390:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,390:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:27,390:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,423:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,423:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,439:INFO:Calculating mean and std
2025-01-18 19:39:27,439:INFO:Creating metrics dataframe
2025-01-18 19:39:27,439:INFO:Uploading results into container
2025-01-18 19:39:27,439:INFO:Uploading model into container now
2025-01-18 19:39:27,439:INFO:_master_model_container: 5
2025-01-18 19:39:27,439:INFO:_display_container: 2
2025-01-18 19:39:27,439:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-18 19:39:27,439:INFO:create_model() successfully completed......................................
2025-01-18 19:39:27,536:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:27,546:INFO:Creating metrics dataframe
2025-01-18 19:39:27,565:INFO:Initializing Ridge Classifier
2025-01-18 19:39:27,566:INFO:Total runtime is 0.16087674299875893 minutes
2025-01-18 19:39:27,570:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:27,570:INFO:Initializing create_model()
2025-01-18 19:39:27,570:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:27,570:INFO:Checking exceptions
2025-01-18 19:39:27,571:INFO:Importing libraries
2025-01-18 19:39:27,571:INFO:Copying training dataset
2025-01-18 19:39:27,581:INFO:Defining folds
2025-01-18 19:39:27,581:INFO:Declaring metric variables
2025-01-18 19:39:27,587:INFO:Importing untrained model
2025-01-18 19:39:27,669:INFO:Ridge Classifier Imported successfully
2025-01-18 19:39:27,675:INFO:Starting cross validation
2025-01-18 19:39:27,683:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:27,779:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,779:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,786:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,786:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,786:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,816:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,817:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,824:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,842:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,875:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,880:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,918:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,945:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,969:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,976:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:27,982:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,050:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,094:INFO:Calculating mean and std
2025-01-18 19:39:28,094:INFO:Creating metrics dataframe
2025-01-18 19:39:28,102:INFO:Uploading results into container
2025-01-18 19:39:28,102:INFO:Uploading model into container now
2025-01-18 19:39:28,102:INFO:_master_model_container: 6
2025-01-18 19:39:28,102:INFO:_display_container: 2
2025-01-18 19:39:28,102:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-18 19:39:28,102:INFO:create_model() successfully completed......................................
2025-01-18 19:39:28,203:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:28,203:INFO:Creating metrics dataframe
2025-01-18 19:39:28,217:INFO:Initializing Random Forest Classifier
2025-01-18 19:39:28,217:INFO:Total runtime is 0.17172274192174272 minutes
2025-01-18 19:39:28,226:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:28,226:INFO:Initializing create_model()
2025-01-18 19:39:28,226:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:28,226:INFO:Checking exceptions
2025-01-18 19:39:28,226:INFO:Importing libraries
2025-01-18 19:39:28,226:INFO:Copying training dataset
2025-01-18 19:39:28,242:INFO:Defining folds
2025-01-18 19:39:28,242:INFO:Declaring metric variables
2025-01-18 19:39:28,257:INFO:Importing untrained model
2025-01-18 19:39:28,262:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:39:28,282:INFO:Starting cross validation
2025-01-18 19:39:28,285:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:28,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,750:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,755:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,760:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,822:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,822:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:28,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,036:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,744:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:29,759:INFO:Calculating mean and std
2025-01-18 19:39:29,759:INFO:Creating metrics dataframe
2025-01-18 19:39:29,759:INFO:Uploading results into container
2025-01-18 19:39:29,759:INFO:Uploading model into container now
2025-01-18 19:39:29,759:INFO:_master_model_container: 7
2025-01-18 19:39:29,759:INFO:_display_container: 2
2025-01-18 19:39:29,766:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:39:29,767:INFO:create_model() successfully completed......................................
2025-01-18 19:39:29,857:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:29,857:INFO:Creating metrics dataframe
2025-01-18 19:39:29,879:INFO:Initializing Quadratic Discriminant Analysis
2025-01-18 19:39:29,879:INFO:Total runtime is 0.1994194070498148 minutes
2025-01-18 19:39:29,884:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:29,884:INFO:Initializing create_model()
2025-01-18 19:39:29,884:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:29,884:INFO:Checking exceptions
2025-01-18 19:39:29,884:INFO:Importing libraries
2025-01-18 19:39:29,884:INFO:Copying training dataset
2025-01-18 19:39:29,891:INFO:Defining folds
2025-01-18 19:39:29,891:INFO:Declaring metric variables
2025-01-18 19:39:29,900:INFO:Importing untrained model
2025-01-18 19:39:29,907:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-18 19:39:29,918:INFO:Starting cross validation
2025-01-18 19:39:29,921:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:29,976:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,003:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,011:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,011:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,018:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,044:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,044:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,051:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,065:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,065:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,088:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:30,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,133:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,138:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,142:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,157:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,178:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,194:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,198:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,201:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,204:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,219:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,222:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-18 19:39:30,243:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,245:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,268:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,271:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,276:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,289:INFO:Calculating mean and std
2025-01-18 19:39:30,289:INFO:Creating metrics dataframe
2025-01-18 19:39:30,289:INFO:Uploading results into container
2025-01-18 19:39:30,294:INFO:Uploading model into container now
2025-01-18 19:39:30,294:INFO:_master_model_container: 8
2025-01-18 19:39:30,294:INFO:_display_container: 2
2025-01-18 19:39:30,297:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-18 19:39:30,297:INFO:create_model() successfully completed......................................
2025-01-18 19:39:30,391:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:30,391:INFO:Creating metrics dataframe
2025-01-18 19:39:30,409:INFO:Initializing Ada Boost Classifier
2025-01-18 19:39:30,409:INFO:Total runtime is 0.20826442241668697 minutes
2025-01-18 19:39:30,412:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:30,412:INFO:Initializing create_model()
2025-01-18 19:39:30,412:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:30,412:INFO:Checking exceptions
2025-01-18 19:39:30,412:INFO:Importing libraries
2025-01-18 19:39:30,412:INFO:Copying training dataset
2025-01-18 19:39:30,428:INFO:Defining folds
2025-01-18 19:39:30,429:INFO:Declaring metric variables
2025-01-18 19:39:30,434:INFO:Importing untrained model
2025-01-18 19:39:30,447:INFO:Ada Boost Classifier Imported successfully
2025-01-18 19:39:30,463:INFO:Starting cross validation
2025-01-18 19:39:30,465:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:30,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,529:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,703:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,737:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,747:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,763:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,793:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,808:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,808:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,808:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,842:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,883:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:30,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:30,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,029:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:31,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:31,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,192:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,198:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,324:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:31,358:INFO:Calculating mean and std
2025-01-18 19:39:31,358:INFO:Creating metrics dataframe
2025-01-18 19:39:31,358:INFO:Uploading results into container
2025-01-18 19:39:31,358:INFO:Uploading model into container now
2025-01-18 19:39:31,358:INFO:_master_model_container: 9
2025-01-18 19:39:31,358:INFO:_display_container: 2
2025-01-18 19:39:31,358:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-18 19:39:31,358:INFO:create_model() successfully completed......................................
2025-01-18 19:39:31,448:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:31,448:INFO:Creating metrics dataframe
2025-01-18 19:39:31,477:INFO:Initializing Gradient Boosting Classifier
2025-01-18 19:39:31,477:INFO:Total runtime is 0.2260500311851501 minutes
2025-01-18 19:39:31,482:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:31,482:INFO:Initializing create_model()
2025-01-18 19:39:31,482:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:31,482:INFO:Checking exceptions
2025-01-18 19:39:31,482:INFO:Importing libraries
2025-01-18 19:39:31,482:INFO:Copying training dataset
2025-01-18 19:39:31,504:INFO:Defining folds
2025-01-18 19:39:31,510:INFO:Declaring metric variables
2025-01-18 19:39:31,524:INFO:Importing untrained model
2025-01-18 19:39:31,538:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:39:31,546:INFO:Starting cross validation
2025-01-18 19:39:31,548:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:32,083:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,170:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,170:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,170:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,493:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,495:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,504:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,507:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,520:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,523:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,821:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,837:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:32,855:INFO:Calculating mean and std
2025-01-18 19:39:32,855:INFO:Creating metrics dataframe
2025-01-18 19:39:32,855:INFO:Uploading results into container
2025-01-18 19:39:32,855:INFO:Uploading model into container now
2025-01-18 19:39:32,855:INFO:_master_model_container: 10
2025-01-18 19:39:32,855:INFO:_display_container: 2
2025-01-18 19:39:32,855:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:39:32,855:INFO:create_model() successfully completed......................................
2025-01-18 19:39:32,946:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:32,958:INFO:Creating metrics dataframe
2025-01-18 19:39:32,970:INFO:Initializing Linear Discriminant Analysis
2025-01-18 19:39:32,971:INFO:Total runtime is 0.250954512755076 minutes
2025-01-18 19:39:32,974:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:32,974:INFO:Initializing create_model()
2025-01-18 19:39:32,974:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:32,974:INFO:Checking exceptions
2025-01-18 19:39:32,974:INFO:Importing libraries
2025-01-18 19:39:32,974:INFO:Copying training dataset
2025-01-18 19:39:32,986:INFO:Defining folds
2025-01-18 19:39:32,988:INFO:Declaring metric variables
2025-01-18 19:39:33,000:INFO:Importing untrained model
2025-01-18 19:39:33,010:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:39:33,056:INFO:Starting cross validation
2025-01-18 19:39:33,059:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:33,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,267:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,351:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,351:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,355:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,355:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,355:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,355:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,380:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,399:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,406:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,406:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,432:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,453:INFO:Calculating mean and std
2025-01-18 19:39:33,456:INFO:Creating metrics dataframe
2025-01-18 19:39:33,456:INFO:Uploading results into container
2025-01-18 19:39:33,456:INFO:Uploading model into container now
2025-01-18 19:39:33,460:INFO:_master_model_container: 11
2025-01-18 19:39:33,460:INFO:_display_container: 2
2025-01-18 19:39:33,460:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:39:33,460:INFO:create_model() successfully completed......................................
2025-01-18 19:39:33,550:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:33,550:INFO:Creating metrics dataframe
2025-01-18 19:39:33,565:INFO:Initializing Extra Trees Classifier
2025-01-18 19:39:33,565:INFO:Total runtime is 0.2608569939931233 minutes
2025-01-18 19:39:33,565:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:33,565:INFO:Initializing create_model()
2025-01-18 19:39:33,565:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:33,565:INFO:Checking exceptions
2025-01-18 19:39:33,565:INFO:Importing libraries
2025-01-18 19:39:33,565:INFO:Copying training dataset
2025-01-18 19:39:33,585:INFO:Defining folds
2025-01-18 19:39:33,588:INFO:Declaring metric variables
2025-01-18 19:39:33,592:INFO:Importing untrained model
2025-01-18 19:39:33,602:INFO:Extra Trees Classifier Imported successfully
2025-01-18 19:39:33,615:INFO:Starting cross validation
2025-01-18 19:39:33,616:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:33,996:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:33,996:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,015:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,015:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,059:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,073:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,455:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,455:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,470:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,552:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,552:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,568:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,938:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,954:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,954:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,954:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,970:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:34,974:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:35,006:INFO:Calculating mean and std
2025-01-18 19:39:35,011:INFO:Creating metrics dataframe
2025-01-18 19:39:35,017:INFO:Uploading results into container
2025-01-18 19:39:35,019:INFO:Uploading model into container now
2025-01-18 19:39:35,019:INFO:_master_model_container: 12
2025-01-18 19:39:35,022:INFO:_display_container: 2
2025-01-18 19:39:35,023:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-18 19:39:35,023:INFO:create_model() successfully completed......................................
2025-01-18 19:39:35,119:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:35,119:INFO:Creating metrics dataframe
2025-01-18 19:39:35,134:INFO:Initializing Light Gradient Boosting Machine
2025-01-18 19:39:35,134:INFO:Total runtime is 0.28700081904729197 minutes
2025-01-18 19:39:35,149:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:35,149:INFO:Initializing create_model()
2025-01-18 19:39:35,149:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:35,149:INFO:Checking exceptions
2025-01-18 19:39:35,149:INFO:Importing libraries
2025-01-18 19:39:35,149:INFO:Copying training dataset
2025-01-18 19:39:35,155:INFO:Defining folds
2025-01-18 19:39:35,155:INFO:Declaring metric variables
2025-01-18 19:39:35,164:INFO:Importing untrained model
2025-01-18 19:39:35,169:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:39:35,194:INFO:Starting cross validation
2025-01-18 19:39:35,196:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:36,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,114:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,114:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,119:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,150:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,897:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,897:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,905:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,912:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,919:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,925:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:36,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,404:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,414:INFO:Calculating mean and std
2025-01-18 19:39:37,414:INFO:Creating metrics dataframe
2025-01-18 19:39:37,422:INFO:Uploading results into container
2025-01-18 19:39:37,423:INFO:Uploading model into container now
2025-01-18 19:39:37,423:INFO:_master_model_container: 13
2025-01-18 19:39:37,423:INFO:_display_container: 2
2025-01-18 19:39:37,423:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:39:37,423:INFO:create_model() successfully completed......................................
2025-01-18 19:39:37,516:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:37,516:INFO:Creating metrics dataframe
2025-01-18 19:39:37,530:INFO:Initializing Dummy Classifier
2025-01-18 19:39:37,530:INFO:Total runtime is 0.3269375602404275 minutes
2025-01-18 19:39:37,530:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:37,537:INFO:Initializing create_model()
2025-01-18 19:39:37,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AEF02D9250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:37,537:INFO:Checking exceptions
2025-01-18 19:39:37,537:INFO:Importing libraries
2025-01-18 19:39:37,537:INFO:Copying training dataset
2025-01-18 19:39:37,547:INFO:Defining folds
2025-01-18 19:39:37,547:INFO:Declaring metric variables
2025-01-18 19:39:37,552:INFO:Importing untrained model
2025-01-18 19:39:37,558:INFO:Dummy Classifier Imported successfully
2025-01-18 19:39:37,608:INFO:Starting cross validation
2025-01-18 19:39:37,609:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:37,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,697:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,697:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,697:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,710:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,717:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,717:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,717:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,772:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,775:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,775:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,776:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,778:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,780:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,793:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,803:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,805:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,807:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,810:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,812:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,815:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,856:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,856:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,856:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,856:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-18 19:39:37,863:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:37,870:INFO:Calculating mean and std
2025-01-18 19:39:37,870:INFO:Creating metrics dataframe
2025-01-18 19:39:37,879:INFO:Uploading results into container
2025-01-18 19:39:37,879:INFO:Uploading model into container now
2025-01-18 19:39:37,879:INFO:_master_model_container: 14
2025-01-18 19:39:37,879:INFO:_display_container: 2
2025-01-18 19:39:37,879:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-18 19:39:37,879:INFO:create_model() successfully completed......................................
2025-01-18 19:39:37,974:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:37,974:INFO:Creating metrics dataframe
2025-01-18 19:39:37,990:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-18 19:39:38,005:INFO:Initializing create_model()
2025-01-18 19:39:38,006:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:38,006:INFO:Checking exceptions
2025-01-18 19:39:38,009:INFO:Importing libraries
2025-01-18 19:39:38,009:INFO:Copying training dataset
2025-01-18 19:39:38,035:INFO:Defining folds
2025-01-18 19:39:38,035:INFO:Declaring metric variables
2025-01-18 19:39:38,035:INFO:Importing untrained model
2025-01-18 19:39:38,035:INFO:Declaring custom model
2025-01-18 19:39:38,037:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:39:38,038:INFO:Cross validation set to False
2025-01-18 19:39:38,039:INFO:Fitting Model
2025-01-18 19:39:38,097:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:39:38,097:INFO:create_model() successfully completed......................................
2025-01-18 19:39:38,238:INFO:_master_model_container: 14
2025-01-18 19:39:38,238:INFO:_display_container: 2
2025-01-18 19:39:38,238:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:39:38,238:INFO:compare_models() successfully completed......................................
2025-01-18 19:39:38,287:INFO:Initializing create_model()
2025-01-18 19:39:38,287:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:38,287:INFO:Checking exceptions
2025-01-18 19:39:38,305:INFO:Importing libraries
2025-01-18 19:39:38,306:INFO:Copying training dataset
2025-01-18 19:39:38,307:INFO:Defining folds
2025-01-18 19:39:38,307:INFO:Declaring metric variables
2025-01-18 19:39:38,318:INFO:Importing untrained model
2025-01-18 19:39:38,325:INFO:Logistic Regression Imported successfully
2025-01-18 19:39:38,338:INFO:Starting cross validation
2025-01-18 19:39:38,342:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:38,956:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:38,968:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,019:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,031:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,032:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,054:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,056:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,058:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,133:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,133:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,133:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,626:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,664:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,670:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,670:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,697:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,700:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,701:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,704:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,709:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,720:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:39,763:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,770:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:39,779:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,066:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:40,082:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:40,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,099:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,106:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,120:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:40,136:INFO:Calculating mean and std
2025-01-18 19:39:40,136:INFO:Creating metrics dataframe
2025-01-18 19:39:40,145:INFO:Finalizing model
2025-01-18 19:39:40,782:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:40,794:INFO:Uploading results into container
2025-01-18 19:39:40,795:INFO:Uploading model into container now
2025-01-18 19:39:40,818:INFO:_master_model_container: 15
2025-01-18 19:39:40,821:INFO:_display_container: 3
2025-01-18 19:39:40,822:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:39:40,822:INFO:create_model() successfully completed......................................
2025-01-18 19:39:40,941:INFO:Initializing create_model()
2025-01-18 19:39:40,941:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:40,941:INFO:Checking exceptions
2025-01-18 19:39:40,959:INFO:Importing libraries
2025-01-18 19:39:40,959:INFO:Copying training dataset
2025-01-18 19:39:40,973:INFO:Defining folds
2025-01-18 19:39:40,974:INFO:Declaring metric variables
2025-01-18 19:39:40,985:INFO:Importing untrained model
2025-01-18 19:39:41,001:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:39:41,017:INFO:Starting cross validation
2025-01-18 19:39:41,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:41,106:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,123:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,141:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,157:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,178:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,180:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,184:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,242:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,258:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,265:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,283:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,293:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,304:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,355:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,362:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,365:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,365:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,365:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,370:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:41,392:INFO:Calculating mean and std
2025-01-18 19:39:41,392:INFO:Creating metrics dataframe
2025-01-18 19:39:41,397:INFO:Finalizing model
2025-01-18 19:39:41,468:INFO:Uploading results into container
2025-01-18 19:39:41,469:INFO:Uploading model into container now
2025-01-18 19:39:41,488:INFO:_master_model_container: 16
2025-01-18 19:39:41,489:INFO:_display_container: 4
2025-01-18 19:39:41,489:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-18 19:39:41,489:INFO:create_model() successfully completed......................................
2025-01-18 19:39:41,692:INFO:Initializing create_model()
2025-01-18 19:39:41,692:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:41,692:INFO:Checking exceptions
2025-01-18 19:39:41,711:INFO:Importing libraries
2025-01-18 19:39:41,711:INFO:Copying training dataset
2025-01-18 19:39:41,721:INFO:Defining folds
2025-01-18 19:39:41,721:INFO:Declaring metric variables
2025-01-18 19:39:41,733:INFO:Importing untrained model
2025-01-18 19:39:41,757:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:39:41,779:INFO:Starting cross validation
2025-01-18 19:39:41,783:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:42,338:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,353:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,353:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,353:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,353:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,369:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,421:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,424:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,524:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,885:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,885:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,897:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:42,912:INFO:Calculating mean and std
2025-01-18 19:39:42,912:INFO:Creating metrics dataframe
2025-01-18 19:39:42,919:INFO:Finalizing model
2025-01-18 19:39:43,270:INFO:Uploading results into container
2025-01-18 19:39:43,273:INFO:Uploading model into container now
2025-01-18 19:39:43,303:INFO:_master_model_container: 17
2025-01-18 19:39:43,303:INFO:_display_container: 5
2025-01-18 19:39:43,304:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:39:43,304:INFO:create_model() successfully completed......................................
2025-01-18 19:39:43,562:INFO:Initializing create_model()
2025-01-18 19:39:43,562:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:43,562:INFO:Checking exceptions
2025-01-18 19:39:43,580:INFO:Importing libraries
2025-01-18 19:39:43,580:INFO:Copying training dataset
2025-01-18 19:39:43,587:INFO:Defining folds
2025-01-18 19:39:43,588:INFO:Declaring metric variables
2025-01-18 19:39:43,592:INFO:Importing untrained model
2025-01-18 19:39:43,596:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:39:43,605:INFO:Starting cross validation
2025-01-18 19:39:43,606:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:43,706:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,709:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,734:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,830:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,832:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,835:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,838:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,839:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,842:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,845:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,852:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,865:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,868:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,873:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,940:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,950:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,951:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,954:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,954:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,968:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:43,986:INFO:Calculating mean and std
2025-01-18 19:39:43,986:INFO:Creating metrics dataframe
2025-01-18 19:39:43,997:INFO:Finalizing model
2025-01-18 19:39:44,106:INFO:Uploading results into container
2025-01-18 19:39:44,108:INFO:Uploading model into container now
2025-01-18 19:39:44,122:INFO:_master_model_container: 18
2025-01-18 19:39:44,122:INFO:_display_container: 6
2025-01-18 19:39:44,122:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:39:44,123:INFO:create_model() successfully completed......................................
2025-01-18 19:39:44,293:INFO:gpu_param set to False
2025-01-18 19:39:44,492:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,650:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,683:INFO:gpu_param set to False
2025-01-18 19:39:44,781:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,781:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,887:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:44,919:INFO:gpu_param set to False
2025-01-18 19:39:45,031:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:45,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:45,204:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:45,204:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-18 19:39:45,214:INFO:Initializing compare_models()
2025-01-18 19:39:45,214:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-18 19:39:45,214:INFO:Checking exceptions
2025-01-18 19:39:45,217:INFO:Preparing display monitor
2025-01-18 19:39:45,262:INFO:Initializing Random Forest Classifier
2025-01-18 19:39:45,262:INFO:Total runtime is 7.120768229166667e-06 minutes
2025-01-18 19:39:45,268:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:45,268:INFO:Initializing create_model()
2025-01-18 19:39:45,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB0400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:45,268:INFO:Checking exceptions
2025-01-18 19:39:45,268:INFO:Importing libraries
2025-01-18 19:39:45,268:INFO:Copying training dataset
2025-01-18 19:39:45,278:INFO:Defining folds
2025-01-18 19:39:45,278:INFO:Declaring metric variables
2025-01-18 19:39:45,283:INFO:Importing untrained model
2025-01-18 19:39:45,289:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:39:45,294:INFO:Starting cross validation
2025-01-18 19:39:45,300:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:45,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,711:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,711:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,806:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,820:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,833:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:45,901:INFO:Calculating mean and std
2025-01-18 19:39:45,909:INFO:Creating metrics dataframe
2025-01-18 19:39:45,978:INFO:Uploading results into container
2025-01-18 19:39:45,979:INFO:Uploading model into container now
2025-01-18 19:39:45,979:INFO:_master_model_container: 19
2025-01-18 19:39:45,979:INFO:_display_container: 7
2025-01-18 19:39:45,980:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:39:45,980:INFO:create_model() successfully completed......................................
2025-01-18 19:39:46,293:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:46,293:INFO:Creating metrics dataframe
2025-01-18 19:39:46,300:INFO:Initializing Ada Boost Classifier
2025-01-18 19:39:46,300:INFO:Total runtime is 0.017303975423177083 minutes
2025-01-18 19:39:46,308:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:46,308:INFO:Initializing create_model()
2025-01-18 19:39:46,308:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB0400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:46,308:INFO:Checking exceptions
2025-01-18 19:39:46,308:INFO:Importing libraries
2025-01-18 19:39:46,308:INFO:Copying training dataset
2025-01-18 19:39:46,320:INFO:Defining folds
2025-01-18 19:39:46,326:INFO:Declaring metric variables
2025-01-18 19:39:46,360:INFO:Importing untrained model
2025-01-18 19:39:46,384:INFO:Ada Boost Classifier Imported successfully
2025-01-18 19:39:46,442:INFO:Starting cross validation
2025-01-18 19:39:46,444:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:46,493:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:46,518:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:46,518:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:39:46,927:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,931:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,932:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,941:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,947:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,960:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,961:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,961:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:46,977:INFO:Calculating mean and std
2025-01-18 19:39:46,977:INFO:Creating metrics dataframe
2025-01-18 19:39:46,983:INFO:Uploading results into container
2025-01-18 19:39:46,985:INFO:Uploading model into container now
2025-01-18 19:39:46,986:INFO:_master_model_container: 20
2025-01-18 19:39:46,987:INFO:_display_container: 7
2025-01-18 19:39:46,987:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-18 19:39:46,988:INFO:create_model() successfully completed......................................
2025-01-18 19:39:47,081:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:47,081:INFO:Creating metrics dataframe
2025-01-18 19:39:47,092:INFO:Initializing Gradient Boosting Classifier
2025-01-18 19:39:47,092:INFO:Total runtime is 0.030501627922058107 minutes
2025-01-18 19:39:47,092:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:47,092:INFO:Initializing create_model()
2025-01-18 19:39:47,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB0400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:47,092:INFO:Checking exceptions
2025-01-18 19:39:47,092:INFO:Importing libraries
2025-01-18 19:39:47,092:INFO:Copying training dataset
2025-01-18 19:39:47,108:INFO:Defining folds
2025-01-18 19:39:47,109:INFO:Declaring metric variables
2025-01-18 19:39:47,115:INFO:Importing untrained model
2025-01-18 19:39:47,130:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:39:47,148:INFO:Starting cross validation
2025-01-18 19:39:47,149:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,572:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,572:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,572:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:47,586:INFO:Calculating mean and std
2025-01-18 19:39:47,586:INFO:Creating metrics dataframe
2025-01-18 19:39:47,586:INFO:Uploading results into container
2025-01-18 19:39:47,586:INFO:Uploading model into container now
2025-01-18 19:39:47,586:INFO:_master_model_container: 21
2025-01-18 19:39:47,586:INFO:_display_container: 7
2025-01-18 19:39:47,586:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:39:47,586:INFO:create_model() successfully completed......................................
2025-01-18 19:39:47,682:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:47,682:INFO:Creating metrics dataframe
2025-01-18 19:39:47,696:INFO:Initializing Extra Trees Classifier
2025-01-18 19:39:47,696:INFO:Total runtime is 0.040572857856750494 minutes
2025-01-18 19:39:47,704:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:47,704:INFO:Initializing create_model()
2025-01-18 19:39:47,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB0400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:47,705:INFO:Checking exceptions
2025-01-18 19:39:47,705:INFO:Importing libraries
2025-01-18 19:39:47,705:INFO:Copying training dataset
2025-01-18 19:39:47,711:INFO:Defining folds
2025-01-18 19:39:47,711:INFO:Declaring metric variables
2025-01-18 19:39:47,717:INFO:Importing untrained model
2025-01-18 19:39:47,725:INFO:Extra Trees Classifier Imported successfully
2025-01-18 19:39:47,739:INFO:Starting cross validation
2025-01-18 19:39:47,743:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:48,068:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,068:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,083:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,121:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,129:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:48,169:INFO:Calculating mean and std
2025-01-18 19:39:48,169:INFO:Creating metrics dataframe
2025-01-18 19:39:48,176:INFO:Uploading results into container
2025-01-18 19:39:48,177:INFO:Uploading model into container now
2025-01-18 19:39:48,179:INFO:_master_model_container: 22
2025-01-18 19:39:48,179:INFO:_display_container: 7
2025-01-18 19:39:48,180:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-18 19:39:48,180:INFO:create_model() successfully completed......................................
2025-01-18 19:39:48,288:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:48,288:INFO:Creating metrics dataframe
2025-01-18 19:39:48,302:INFO:Initializing Light Gradient Boosting Machine
2025-01-18 19:39:48,302:INFO:Total runtime is 0.050670858224233 minutes
2025-01-18 19:39:48,309:INFO:SubProcess create_model() called ==================================
2025-01-18 19:39:48,309:INFO:Initializing create_model()
2025-01-18 19:39:48,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB0400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:48,309:INFO:Checking exceptions
2025-01-18 19:39:48,309:INFO:Importing libraries
2025-01-18 19:39:48,309:INFO:Copying training dataset
2025-01-18 19:39:48,345:INFO:Defining folds
2025-01-18 19:39:48,346:INFO:Declaring metric variables
2025-01-18 19:39:48,363:INFO:Importing untrained model
2025-01-18 19:39:48,374:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:39:48,385:INFO:Starting cross validation
2025-01-18 19:39:48,389:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:39:49,052:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,057:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,064:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,081:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,128:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,140:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:39:49,156:INFO:Calculating mean and std
2025-01-18 19:39:49,157:INFO:Creating metrics dataframe
2025-01-18 19:39:49,162:INFO:Uploading results into container
2025-01-18 19:39:49,162:INFO:Uploading model into container now
2025-01-18 19:39:49,162:INFO:_master_model_container: 23
2025-01-18 19:39:49,162:INFO:_display_container: 7
2025-01-18 19:39:49,162:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:39:49,162:INFO:create_model() successfully completed......................................
2025-01-18 19:39:49,261:INFO:SubProcess create_model() end ==================================
2025-01-18 19:39:49,261:INFO:Creating metrics dataframe
2025-01-18 19:39:49,277:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-18 19:39:49,288:INFO:Initializing create_model()
2025-01-18 19:39:49,288:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:39:49,288:INFO:Checking exceptions
2025-01-18 19:39:49,294:INFO:Importing libraries
2025-01-18 19:39:49,294:INFO:Copying training dataset
2025-01-18 19:39:49,303:INFO:Defining folds
2025-01-18 19:39:49,303:INFO:Declaring metric variables
2025-01-18 19:39:49,303:INFO:Importing untrained model
2025-01-18 19:39:49,303:INFO:Declaring custom model
2025-01-18 19:39:49,304:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:39:49,305:INFO:Cross validation set to False
2025-01-18 19:39:49,305:INFO:Fitting Model
2025-01-18 19:39:49,629:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:39:49,629:INFO:create_model() successfully completed......................................
2025-01-18 19:39:49,769:INFO:_master_model_container: 23
2025-01-18 19:39:49,769:INFO:_display_container: 7
2025-01-18 19:39:49,770:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:39:49,775:INFO:compare_models() successfully completed......................................
2025-01-18 19:39:49,798:INFO:Initializing tune_model()
2025-01-18 19:39:49,798:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:39:49,803:INFO:Checking exceptions
2025-01-18 19:39:49,882:INFO:Copying training dataset
2025-01-18 19:39:49,889:INFO:Checking base model
2025-01-18 19:39:49,890:INFO:Base model : Logistic Regression
2025-01-18 19:39:49,912:INFO:Declaring metric variables
2025-01-18 19:39:49,957:INFO:Defining Hyperparameters
2025-01-18 19:39:50,169:INFO:Tuning with n_jobs=-1
2025-01-18 19:39:50,175:INFO:Initializing RandomizedSearchCV
2025-01-18 19:39:51,106:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,113:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,209:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,217:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,467:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,495:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:51,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,022:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,162:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,469:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,621:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:52,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,040:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,232:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,546:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,711:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,871:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:53,993:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,078:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,126:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,365:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,531:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,712:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,786:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,886:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:54,933:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:55,094:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:55,210:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:55,321:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:55,431:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,284:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,353:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,363:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,475:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,628:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,701:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,701:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:56,909:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,073:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,088:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,311:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,426:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,730:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,828:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,862:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:57,890:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:58,136:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:58,401:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:58,493:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:58,586:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:59,032:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:59,197:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:59,497:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:39:59,559:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:00,409:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:00,655:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:00,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:00,800:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:00,981:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,105:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,204:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,217:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,459:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,538:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,674:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:01,706:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,010:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,071:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.833}
2025-01-18 19:40:02,073:INFO:Hyperparameter search completed
2025-01-18 19:40:02,073:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:02,077:INFO:Initializing create_model()
2025-01-18 19:40:02,077:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE878BCDF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.833})
2025-01-18 19:40:02,078:INFO:Checking exceptions
2025-01-18 19:40:02,078:INFO:Importing libraries
2025-01-18 19:40:02,078:INFO:Copying training dataset
2025-01-18 19:40:02,097:INFO:Defining folds
2025-01-18 19:40:02,097:INFO:Declaring metric variables
2025-01-18 19:40:02,105:INFO:Importing untrained model
2025-01-18 19:40:02,105:INFO:Declaring custom model
2025-01-18 19:40:02,106:INFO:Logistic Regression Imported successfully
2025-01-18 19:40:02,130:INFO:Starting cross validation
2025-01-18 19:40:02,133:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:02,667:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,667:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,682:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:02,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,702:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,731:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,731:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:02,738:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,169:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,169:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,169:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,175:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,183:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,189:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,210:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,210:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,217:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,528:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,542:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:03,564:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,568:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,572:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,575:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,582:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,586:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:03,598:INFO:Calculating mean and std
2025-01-18 19:40:03,599:INFO:Creating metrics dataframe
2025-01-18 19:40:03,606:INFO:Finalizing model
2025-01-18 19:40:04,048:INFO:Uploading results into container
2025-01-18 19:40:04,055:INFO:Uploading model into container now
2025-01-18 19:40:04,055:INFO:_master_model_container: 24
2025-01-18 19:40:04,055:INFO:_display_container: 8
2025-01-18 19:40:04,057:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:40:04,057:INFO:create_model() successfully completed......................................
2025-01-18 19:40:04,258:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:04,258:INFO:choose_better activated
2025-01-18 19:40:04,274:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:04,274:INFO:Initializing create_model()
2025-01-18 19:40:04,274:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:04,274:INFO:Checking exceptions
2025-01-18 19:40:04,274:INFO:Importing libraries
2025-01-18 19:40:04,274:INFO:Copying training dataset
2025-01-18 19:40:04,287:INFO:Defining folds
2025-01-18 19:40:04,287:INFO:Declaring metric variables
2025-01-18 19:40:04,287:INFO:Importing untrained model
2025-01-18 19:40:04,287:INFO:Declaring custom model
2025-01-18 19:40:04,287:INFO:Logistic Regression Imported successfully
2025-01-18 19:40:04,287:INFO:Starting cross validation
2025-01-18 19:40:04,287:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:04,606:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,649:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,683:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,683:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,686:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,686:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,689:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,953:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,982:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,988:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:04,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:04,995:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:05,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,039:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,039:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,048:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,069:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,427:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:05,443:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:05,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,460:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:05,488:INFO:Calculating mean and std
2025-01-18 19:40:05,488:INFO:Creating metrics dataframe
2025-01-18 19:40:05,488:INFO:Finalizing model
2025-01-18 19:40:06,114:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-18 19:40:06,114:INFO:Uploading results into container
2025-01-18 19:40:06,114:INFO:Uploading model into container now
2025-01-18 19:40:06,114:INFO:_master_model_container: 25
2025-01-18 19:40:06,114:INFO:_display_container: 9
2025-01-18 19:40:06,114:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:40:06,114:INFO:create_model() successfully completed......................................
2025-01-18 19:40:06,205:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:06,205:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8211
2025-01-18 19:40:06,205:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8251
2025-01-18 19:40:06,205:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-18 19:40:06,205:INFO:choose_better completed
2025-01-18 19:40:06,235:INFO:_master_model_container: 25
2025-01-18 19:40:06,236:INFO:_display_container: 8
2025-01-18 19:40:06,236:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-18 19:40:06,237:INFO:tune_model() successfully completed......................................
2025-01-18 19:40:06,367:INFO:Initializing tune_model()
2025-01-18 19:40:06,368:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:40:06,368:INFO:Checking exceptions
2025-01-18 19:40:06,402:INFO:Copying training dataset
2025-01-18 19:40:06,420:INFO:Checking base model
2025-01-18 19:40:06,421:INFO:Base model : Random Forest Classifier
2025-01-18 19:40:06,431:INFO:Declaring metric variables
2025-01-18 19:40:06,438:INFO:Defining Hyperparameters
2025-01-18 19:40:06,531:INFO:Tuning with n_jobs=-1
2025-01-18 19:40:06,531:INFO:Initializing RandomizedSearchCV
2025-01-18 19:40:27,967:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-18 19:40:27,967:INFO:Hyperparameter search completed
2025-01-18 19:40:27,967:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:27,967:INFO:Initializing create_model()
2025-01-18 19:40:27,967:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EEB01C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-18 19:40:27,967:INFO:Checking exceptions
2025-01-18 19:40:27,967:INFO:Importing libraries
2025-01-18 19:40:27,967:INFO:Copying training dataset
2025-01-18 19:40:27,987:INFO:Defining folds
2025-01-18 19:40:27,987:INFO:Declaring metric variables
2025-01-18 19:40:27,996:INFO:Importing untrained model
2025-01-18 19:40:28,002:INFO:Declaring custom model
2025-01-18 19:40:28,010:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:40:28,030:INFO:Starting cross validation
2025-01-18 19:40:28,030:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:28,615:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,641:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,641:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,654:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:28,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,045:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,045:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,061:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,487:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,487:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:29,496:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,023:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,211:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,211:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,223:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,233:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:30,260:INFO:Calculating mean and std
2025-01-18 19:40:30,260:INFO:Creating metrics dataframe
2025-01-18 19:40:30,266:INFO:Finalizing model
2025-01-18 19:40:30,779:INFO:Uploading results into container
2025-01-18 19:40:30,779:INFO:Uploading model into container now
2025-01-18 19:40:30,779:INFO:_master_model_container: 26
2025-01-18 19:40:30,779:INFO:_display_container: 9
2025-01-18 19:40:30,779:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-18 19:40:30,779:INFO:create_model() successfully completed......................................
2025-01-18 19:40:30,862:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:30,862:INFO:choose_better activated
2025-01-18 19:40:30,877:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:30,877:INFO:Initializing create_model()
2025-01-18 19:40:30,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:30,877:INFO:Checking exceptions
2025-01-18 19:40:30,877:INFO:Importing libraries
2025-01-18 19:40:30,877:INFO:Copying training dataset
2025-01-18 19:40:30,891:INFO:Defining folds
2025-01-18 19:40:30,891:INFO:Declaring metric variables
2025-01-18 19:40:30,891:INFO:Importing untrained model
2025-01-18 19:40:30,891:INFO:Declaring custom model
2025-01-18 19:40:30,891:INFO:Random Forest Classifier Imported successfully
2025-01-18 19:40:30,891:INFO:Starting cross validation
2025-01-18 19:40:30,891:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:31,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,279:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,293:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,301:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,425:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,439:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,814:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,829:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,877:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:31,884:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,177:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,180:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,235:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,240:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,243:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,286:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,297:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,299:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:32,315:INFO:Calculating mean and std
2025-01-18 19:40:32,315:INFO:Creating metrics dataframe
2025-01-18 19:40:32,315:INFO:Finalizing model
2025-01-18 19:40:32,579:INFO:Uploading results into container
2025-01-18 19:40:32,580:INFO:Uploading model into container now
2025-01-18 19:40:32,580:INFO:_master_model_container: 27
2025-01-18 19:40:32,580:INFO:_display_container: 10
2025-01-18 19:40:32,581:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-18 19:40:32,581:INFO:create_model() successfully completed......................................
2025-01-18 19:40:32,666:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:32,666:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-18 19:40:32,667:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-18 19:40:32,668:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-18 19:40:32,668:INFO:choose_better completed
2025-01-18 19:40:32,680:INFO:_master_model_container: 27
2025-01-18 19:40:32,680:INFO:_display_container: 9
2025-01-18 19:40:32,681:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-18 19:40:32,682:INFO:tune_model() successfully completed......................................
2025-01-18 19:40:32,919:INFO:Initializing ensemble_model()
2025-01-18 19:40:32,919:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:40:32,920:INFO:Checking exceptions
2025-01-18 19:40:32,956:INFO:Importing libraries
2025-01-18 19:40:32,956:INFO:Copying training dataset
2025-01-18 19:40:32,957:INFO:Checking base model
2025-01-18 19:40:32,957:INFO:Base model : Decision Tree Classifier
2025-01-18 19:40:32,970:INFO:Importing untrained ensembler
2025-01-18 19:40:32,971:INFO:Ensemble method set to Bagging
2025-01-18 19:40:32,971:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:32,972:INFO:Initializing create_model()
2025-01-18 19:40:32,972:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE85616B50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:32,972:INFO:Checking exceptions
2025-01-18 19:40:32,972:INFO:Importing libraries
2025-01-18 19:40:32,972:INFO:Copying training dataset
2025-01-18 19:40:32,979:INFO:Defining folds
2025-01-18 19:40:32,979:INFO:Declaring metric variables
2025-01-18 19:40:32,989:INFO:Importing untrained model
2025-01-18 19:40:32,989:INFO:Declaring custom model
2025-01-18 19:40:33,004:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:40:33,010:INFO:Starting cross validation
2025-01-18 19:40:33,015:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:33,161:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,162:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,162:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,171:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,171:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,173:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,176:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,176:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,197:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,197:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,204:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,364:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,364:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,371:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,416:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,422:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,422:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,449:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,537:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,544:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,558:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,558:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:33,578:INFO:Calculating mean and std
2025-01-18 19:40:33,578:INFO:Creating metrics dataframe
2025-01-18 19:40:33,586:INFO:Finalizing model
2025-01-18 19:40:33,683:INFO:Uploading results into container
2025-01-18 19:40:33,683:INFO:Uploading model into container now
2025-01-18 19:40:33,683:INFO:_master_model_container: 28
2025-01-18 19:40:33,683:INFO:_display_container: 10
2025-01-18 19:40:33,689:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-18 19:40:33,689:INFO:create_model() successfully completed......................................
2025-01-18 19:40:33,891:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:33,898:INFO:_master_model_container: 28
2025-01-18 19:40:33,904:INFO:_display_container: 10
2025-01-18 19:40:33,905:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-18 19:40:33,905:INFO:ensemble_model() successfully completed......................................
2025-01-18 19:40:34,023:INFO:Initializing ensemble_model()
2025-01-18 19:40:34,023:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:40:34,023:INFO:Checking exceptions
2025-01-18 19:40:34,168:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,201:INFO:Importing libraries
2025-01-18 19:40:34,202:INFO:Copying training dataset
2025-01-18 19:40:34,202:INFO:Checking base model
2025-01-18 19:40:34,202:INFO:Base model : Decision Tree Classifier
2025-01-18 19:40:34,215:INFO:Importing untrained ensembler
2025-01-18 19:40:34,216:INFO:Ensemble method set to Boosting
2025-01-18 19:40:34,216:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:34,219:INFO:Initializing create_model()
2025-01-18 19:40:34,219:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8A611F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:34,219:INFO:Checking exceptions
2025-01-18 19:40:34,219:INFO:Importing libraries
2025-01-18 19:40:34,219:INFO:Copying training dataset
2025-01-18 19:40:34,228:INFO:Defining folds
2025-01-18 19:40:34,228:INFO:Declaring metric variables
2025-01-18 19:40:34,233:INFO:Importing untrained model
2025-01-18 19:40:34,233:INFO:Declaring custom model
2025-01-18 19:40:34,239:INFO:Decision Tree Classifier Imported successfully
2025-01-18 19:40:34,250:INFO:Starting cross validation
2025-01-18 19:40:34,253:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:34,296:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,342:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,356:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,349:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,405:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,412:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,437:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,445:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,454:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,467:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,502:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,502:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,502:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,515:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,538:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,541:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,543:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,586:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,592:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,593:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,599:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:34,626:INFO:Calculating mean and std
2025-01-18 19:40:34,626:INFO:Creating metrics dataframe
2025-01-18 19:40:34,634:INFO:Finalizing model
2025-01-18 19:40:34,661:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:34,676:INFO:Uploading results into container
2025-01-18 19:40:34,676:INFO:Uploading model into container now
2025-01-18 19:40:34,682:INFO:_master_model_container: 29
2025-01-18 19:40:34,682:INFO:_display_container: 11
2025-01-18 19:40:34,682:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-18 19:40:34,682:INFO:create_model() successfully completed......................................
2025-01-18 19:40:34,813:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:34,835:INFO:_master_model_container: 29
2025-01-18 19:40:34,835:INFO:_display_container: 11
2025-01-18 19:40:34,835:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-18 19:40:34,835:INFO:ensemble_model() successfully completed......................................
2025-01-18 19:40:35,058:INFO:Initializing blend_models()
2025-01-18 19:40:35,058:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:40:35,058:INFO:Checking exceptions
2025-01-18 19:40:35,080:INFO:Importing libraries
2025-01-18 19:40:35,080:INFO:Copying training dataset
2025-01-18 19:40:35,087:INFO:Getting model names
2025-01-18 19:40:35,103:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:35,118:INFO:Initializing create_model()
2025-01-18 19:40:35,118:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8EFA51F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:35,118:INFO:Checking exceptions
2025-01-18 19:40:35,118:INFO:Importing libraries
2025-01-18 19:40:35,118:INFO:Copying training dataset
2025-01-18 19:40:35,126:INFO:Defining folds
2025-01-18 19:40:35,126:INFO:Declaring metric variables
2025-01-18 19:40:35,132:INFO:Importing untrained model
2025-01-18 19:40:35,132:INFO:Declaring custom model
2025-01-18 19:40:35,141:INFO:Voting Classifier Imported successfully
2025-01-18 19:40:35,147:INFO:Starting cross validation
2025-01-18 19:40:35,147:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:35,218:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,220:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,231:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,249:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,849:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,855:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,863:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,863:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:35,897:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,911:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,927:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:35,952:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:36,550:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,557:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,605:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,613:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,633:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,634:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,640:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:36,647:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:36,696:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:37,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,252:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,260:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,300:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,307:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,314:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:37,320:INFO:Calculating mean and std
2025-01-18 19:40:37,320:INFO:Creating metrics dataframe
2025-01-18 19:40:37,320:INFO:Finalizing model
2025-01-18 19:40:37,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:37,888:INFO:Uploading results into container
2025-01-18 19:40:37,892:INFO:Uploading model into container now
2025-01-18 19:40:37,893:INFO:_master_model_container: 30
2025-01-18 19:40:37,893:INFO:_display_container: 12
2025-01-18 19:40:37,906:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-18 19:40:37,906:INFO:create_model() successfully completed......................................
2025-01-18 19:40:37,994:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:38,009:INFO:_master_model_container: 30
2025-01-18 19:40:38,009:INFO:_display_container: 12
2025-01-18 19:40:38,015:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-18 19:40:38,015:INFO:blend_models() successfully completed......................................
2025-01-18 19:40:38,127:INFO:Initializing stack_models()
2025-01-18 19:40:38,127:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-18 19:40:38,127:INFO:Checking exceptions
2025-01-18 19:40:38,127:INFO:Defining meta model
2025-01-18 19:40:38,172:INFO:Getting model names
2025-01-18 19:40:38,177:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-18 19:40:38,186:INFO:SubProcess create_model() called ==================================
2025-01-18 19:40:38,198:INFO:Initializing create_model()
2025-01-18 19:40:38,199:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AE8A904EB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:40:38,199:INFO:Checking exceptions
2025-01-18 19:40:38,199:INFO:Importing libraries
2025-01-18 19:40:38,200:INFO:Copying training dataset
2025-01-18 19:40:38,213:INFO:Defining folds
2025-01-18 19:40:38,213:INFO:Declaring metric variables
2025-01-18 19:40:38,217:INFO:Importing untrained model
2025-01-18 19:40:38,217:INFO:Declaring custom model
2025-01-18 19:40:38,226:INFO:Stacking Classifier Imported successfully
2025-01-18 19:40:38,231:INFO:Starting cross validation
2025-01-18 19:40:38,238:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-18 19:40:38,302:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:38,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:38,311:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:38,328:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:38,942:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:38,982:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,002:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,030:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,037:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,044:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,044:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,079:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,093:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,106:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,113:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,148:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,440:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,457:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,473:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,509:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:39,530:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:41,983:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:41,983:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:41,983:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:42,288:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:42,371:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,376:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:42,534:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:43,009:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:43,022:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:43,107:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,109:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,127:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,144:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,196:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,212:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,377:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,397:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,404:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,464:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,501:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,698:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,835:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,862:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:43,870:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:44,016:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:44,050:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:44,071:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:44,085:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:44,100:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:46,580:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,580:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,580:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,668:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:46,676:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:46,760:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,274:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,274:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,274:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,287:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:47,384:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,411:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,441:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,447:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,459:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,474:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,488:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,503:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,503:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:47,522:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:50,086:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,092:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,154:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,162:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:40:50,178:INFO:Calculating mean and std
2025-01-18 19:40:50,178:INFO:Creating metrics dataframe
2025-01-18 19:40:50,192:INFO:Finalizing model
2025-01-18 19:40:50,266:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:50,745:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:50,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:50,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:50,751:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-18 19:40:53,204:INFO:Uploading results into container
2025-01-18 19:40:53,205:INFO:Uploading model into container now
2025-01-18 19:40:53,205:INFO:_master_model_container: 31
2025-01-18 19:40:53,205:INFO:_display_container: 13
2025-01-18 19:40:53,218:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-18 19:40:53,218:INFO:create_model() successfully completed......................................
2025-01-18 19:40:53,321:INFO:SubProcess create_model() end ==================================
2025-01-18 19:40:53,350:INFO:_master_model_container: 31
2025-01-18 19:40:53,350:INFO:_display_container: 13
2025-01-18 19:40:53,362:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-18 19:40:53,362:INFO:stack_models() successfully completed......................................
2025-01-18 19:40:53,498:INFO:Initializing plot_model()
2025-01-18 19:40:53,498:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:53,498:INFO:Checking exceptions
2025-01-18 19:40:53,551:INFO:Preloading libraries
2025-01-18 19:40:53,564:INFO:Copying training dataset
2025-01-18 19:40:53,564:INFO:Plot type: auc
2025-01-18 19:40:53,781:INFO:Fitting Model
2025-01-18 19:40:53,781:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:40:53,781:INFO:Scoring test/hold-out set
2025-01-18 19:40:54,328:INFO:Visual Rendered Successfully
2025-01-18 19:40:54,431:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:54,461:INFO:Initializing plot_model()
2025-01-18 19:40:54,461:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:54,461:INFO:Checking exceptions
2025-01-18 19:40:54,504:INFO:Preloading libraries
2025-01-18 19:40:54,516:INFO:Copying training dataset
2025-01-18 19:40:54,516:INFO:Plot type: confusion_matrix
2025-01-18 19:40:54,843:INFO:Fitting Model
2025-01-18 19:40:54,843:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:40:54,843:INFO:Scoring test/hold-out set
2025-01-18 19:40:55,113:INFO:Visual Rendered Successfully
2025-01-18 19:40:55,201:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:55,229:INFO:Initializing plot_model()
2025-01-18 19:40:55,230:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:55,230:INFO:Checking exceptions
2025-01-18 19:40:55,273:INFO:Preloading libraries
2025-01-18 19:40:55,280:INFO:Copying training dataset
2025-01-18 19:40:55,280:INFO:Plot type: feature
2025-01-18 19:40:55,280:WARNING:No coef_ found. Trying feature_importances_
2025-01-18 19:40:55,501:INFO:Visual Rendered Successfully
2025-01-18 19:40:55,612:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:55,650:INFO:Initializing plot_model()
2025-01-18 19:40:55,650:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:55,650:INFO:Checking exceptions
2025-01-18 19:40:55,736:INFO:Preloading libraries
2025-01-18 19:40:55,753:INFO:Copying training dataset
2025-01-18 19:40:55,753:INFO:Plot type: boundary
2025-01-18 19:40:55,829:INFO:Fitting StandardScaler()
2025-01-18 19:40:55,829:INFO:Fitting PCA()
2025-01-18 19:40:55,912:INFO:Fitting Model
2025-01-18 19:40:57,905:INFO:Visual Rendered Successfully
2025-01-18 19:40:58,159:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:58,196:INFO:Initializing plot_model()
2025-01-18 19:40:58,196:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:58,196:INFO:Checking exceptions
2025-01-18 19:40:58,232:INFO:Preloading libraries
2025-01-18 19:40:58,250:INFO:Copying training dataset
2025-01-18 19:40:58,250:INFO:Plot type: pr
2025-01-18 19:40:58,398:INFO:Fitting Model
2025-01-18 19:40:58,398:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:40:58,398:INFO:Scoring test/hold-out set
2025-01-18 19:40:58,724:INFO:Visual Rendered Successfully
2025-01-18 19:40:58,822:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:58,857:INFO:Initializing plot_model()
2025-01-18 19:40:58,857:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:58,857:INFO:Checking exceptions
2025-01-18 19:40:58,892:INFO:Preloading libraries
2025-01-18 19:40:58,905:INFO:Copying training dataset
2025-01-18 19:40:58,905:INFO:Plot type: class_report
2025-01-18 19:40:59,280:INFO:Fitting Model
2025-01-18 19:40:59,280:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-18 19:40:59,280:INFO:Scoring test/hold-out set
2025-01-18 19:40:59,655:INFO:Visual Rendered Successfully
2025-01-18 19:40:59,749:INFO:plot_model() successfully completed......................................
2025-01-18 19:40:59,773:INFO:Initializing evaluate_model()
2025-01-18 19:40:59,773:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-18 19:40:59,794:INFO:Initializing plot_model()
2025-01-18 19:40:59,795:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, system=True)
2025-01-18 19:40:59,795:INFO:Checking exceptions
2025-01-18 19:40:59,832:INFO:Preloading libraries
2025-01-18 19:40:59,843:INFO:Copying training dataset
2025-01-18 19:40:59,843:INFO:Plot type: pipeline
2025-01-18 19:41:00,191:INFO:Visual Rendered Successfully
2025-01-18 19:41:00,279:INFO:plot_model() successfully completed......................................
2025-01-18 19:41:00,322:INFO:Initializing create_model()
2025-01-18 19:41:00,322:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=gbc, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:41:00,322:INFO:Checking exceptions
2025-01-18 19:41:00,360:INFO:Importing libraries
2025-01-18 19:41:00,360:INFO:Copying training dataset
2025-01-18 19:41:00,373:INFO:Defining folds
2025-01-18 19:41:00,373:INFO:Declaring metric variables
2025-01-18 19:41:00,379:INFO:Importing untrained model
2025-01-18 19:41:00,384:INFO:Gradient Boosting Classifier Imported successfully
2025-01-18 19:41:00,390:INFO:Cross validation set to False
2025-01-18 19:41:00,390:INFO:Fitting Model
2025-01-18 19:41:00,828:INFO:Initializing predict_model()
2025-01-18 19:41:00,828:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AE8EF4B040>)
2025-01-18 19:41:00,828:INFO:Checking exceptions
2025-01-18 19:41:00,828:INFO:Preloading libraries
2025-01-18 19:41:00,883:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:41:00,883:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:41:00,899:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:41:01,016:INFO:_display_container: 14
2025-01-18 19:41:01,016:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-18 19:41:01,016:INFO:create_model() successfully completed......................................
2025-01-18 19:41:25,592:INFO:Initializing interpret_model()
2025-01-18 19:41:25,592:INFO:interpret_model(estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:41:25,592:INFO:Checking exceptions
2025-01-18 19:41:25,592:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:42:18,234:INFO:Initializing create_model()
2025-01-18 19:42:18,235:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:42:18,235:INFO:Checking exceptions
2025-01-18 19:42:18,256:INFO:Importing libraries
2025-01-18 19:42:18,256:INFO:Copying training dataset
2025-01-18 19:42:18,268:INFO:Defining folds
2025-01-18 19:42:18,270:INFO:Declaring metric variables
2025-01-18 19:42:18,281:INFO:Importing untrained model
2025-01-18 19:42:18,291:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-18 19:42:18,303:INFO:Cross validation set to False
2025-01-18 19:42:18,304:INFO:Fitting Model
2025-01-18 19:42:18,442:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-18 19:42:18,455:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.009740 seconds.
2025-01-18 19:42:18,455:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-18 19:42:18,455:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-18 19:42:18,456:INFO:[LightGBM] [Info] Total Bins 728
2025-01-18 19:42:18,456:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-18 19:42:18,458:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-18 19:42:18,459:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-18 19:42:18,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,474:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,484:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,486:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,487:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,489:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,491:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,492:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,493:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,494:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,510:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,510:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,515:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,518:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,521:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,521:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,523:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,536:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,543:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,543:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,567:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-18 19:42:18,654:INFO:Initializing predict_model()
2025-01-18 19:42:18,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AE952E1D30>)
2025-01-18 19:42:18,654:INFO:Checking exceptions
2025-01-18 19:42:18,654:INFO:Preloading libraries
2025-01-18 19:42:18,718:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:42:18,719:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:42:18,724:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:42:18,881:INFO:_display_container: 15
2025-01-18 19:42:18,881:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-18 19:42:18,881:INFO:create_model() successfully completed......................................
2025-01-18 19:42:21,116:INFO:Initializing interpret_model()
2025-01-18 19:42:21,117:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:42:21,117:INFO:Checking exceptions
2025-01-18 19:42:21,117:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:42:21,137:INFO:plot type: summary
2025-01-18 19:42:21,140:INFO:Creating TreeExplainer
2025-01-18 19:42:21,397:INFO:Compiling shap values
2025-01-18 19:42:21,766:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:42:22,462:INFO:Visual Rendered Successfully
2025-01-18 19:42:22,462:INFO:interpret_model() successfully completed......................................
2025-01-18 19:42:27,127:INFO:Initializing interpret_model()
2025-01-18 19:42:27,127:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=correlation, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:42:27,127:INFO:Checking exceptions
2025-01-18 19:42:27,127:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:42:27,149:INFO:plot type: correlation
2025-01-18 19:42:27,149:WARNING:No feature passed. Default value of feature used for correlation plot: Id
2025-01-18 19:42:27,149:INFO:Creating TreeExplainer
2025-01-18 19:42:27,397:INFO:Compiling shap values
2025-01-18 19:42:27,745:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:42:27,745:INFO:model type detected: type 1
2025-01-18 19:42:55,842:INFO:Initializing interpret_model()
2025-01-18 19:42:55,842:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:42:55,842:INFO:Checking exceptions
2025-01-18 19:42:55,842:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:42:55,864:INFO:plot type: summary
2025-01-18 19:42:55,864:INFO:Creating TreeExplainer
2025-01-18 19:42:56,085:INFO:Compiling shap values
2025-01-18 19:42:56,446:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:42:57,087:INFO:Visual Rendered Successfully
2025-01-18 19:42:57,087:INFO:interpret_model() successfully completed......................................
2025-01-18 19:43:27,644:INFO:Initializing interpret_model()
2025-01-18 19:43:27,644:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=correlation, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:43:27,644:INFO:Checking exceptions
2025-01-18 19:43:27,644:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:43:27,669:INFO:plot type: correlation
2025-01-18 19:43:27,669:WARNING:No feature passed. Default value of feature used for correlation plot: Id
2025-01-18 19:43:27,669:INFO:Creating TreeExplainer
2025-01-18 19:43:27,917:INFO:Compiling shap values
2025-01-18 19:43:28,260:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:43:28,260:INFO:model type detected: type 1
2025-01-18 19:43:57,058:INFO:Initializing interpret_model()
2025-01-18 19:43:57,058:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:43:57,058:INFO:Checking exceptions
2025-01-18 19:43:57,059:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:43:57,080:INFO:plot type: summary
2025-01-18 19:43:57,080:INFO:Creating TreeExplainer
2025-01-18 19:43:57,300:INFO:Compiling shap values
2025-01-18 19:43:57,661:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:43:58,337:INFO:Visual Rendered Successfully
2025-01-18 19:43:58,337:INFO:interpret_model() successfully completed......................................
2025-01-18 19:44:05,178:INFO:Initializing interpret_model()
2025-01-18 19:44:05,178:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=12, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:44:05,178:INFO:Checking exceptions
2025-01-18 19:44:05,179:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:44:05,197:INFO:plot type: reason
2025-01-18 19:44:05,198:INFO:model type detected: type 1
2025-01-18 19:44:05,198:INFO:Creating TreeExplainer
2025-01-18 19:44:05,490:INFO:Compiling shap values
2025-01-18 19:44:05,491:INFO:model type detected: LGBMClassifier
2025-01-18 19:44:05,823:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:44:21,049:INFO:Initializing interpret_model()
2025-01-18 19:44:21,049:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=0, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:44:21,050:INFO:Checking exceptions
2025-01-18 19:44:21,050:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:44:21,065:INFO:plot type: reason
2025-01-18 19:44:21,065:INFO:model type detected: type 1
2025-01-18 19:44:21,065:INFO:Creating TreeExplainer
2025-01-18 19:44:21,332:INFO:Compiling shap values
2025-01-18 19:44:21,332:INFO:model type detected: LGBMClassifier
2025-01-18 19:44:21,705:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:44:27,088:INFO:Initializing interpret_model()
2025-01-18 19:44:27,088:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:44:27,088:INFO:Checking exceptions
2025-01-18 19:44:27,088:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:44:27,109:INFO:plot type: reason
2025-01-18 19:44:27,109:INFO:model type detected: type 1
2025-01-18 19:44:27,109:INFO:Creating TreeExplainer
2025-01-18 19:44:27,328:INFO:Compiling shap values
2025-01-18 19:44:27,328:WARNING:Observation set to None. Model agnostic plot will be rendered.
2025-01-18 19:44:27,648:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:44:34,442:INFO:Initializing interpret_model()
2025-01-18 19:44:34,442:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=0, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:44:34,442:INFO:Checking exceptions
2025-01-18 19:44:34,442:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:44:34,465:INFO:plot type: reason
2025-01-18 19:44:34,465:INFO:model type detected: type 1
2025-01-18 19:44:34,465:INFO:Creating TreeExplainer
2025-01-18 19:44:34,689:INFO:Compiling shap values
2025-01-18 19:44:34,689:INFO:model type detected: LGBMClassifier
2025-01-18 19:44:35,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:44:48,191:INFO:Initializing interpret_model()
2025-01-18 19:44:48,192:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=1, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:44:48,192:INFO:Checking exceptions
2025-01-18 19:44:48,192:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:44:48,211:INFO:plot type: reason
2025-01-18 19:44:48,212:INFO:model type detected: type 1
2025-01-18 19:44:48,212:INFO:Creating TreeExplainer
2025-01-18 19:44:48,441:INFO:Compiling shap values
2025-01-18 19:44:48,441:INFO:model type detected: LGBMClassifier
2025-01-18 19:44:48,767:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:45:02,841:INFO:Initializing interpret_model()
2025-01-18 19:45:02,841:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=1, plot=reason, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>)
2025-01-18 19:45:02,842:INFO:Checking exceptions
2025-01-18 19:45:02,842:INFO:Soft dependency imported: shap: 0.46.0
2025-01-18 19:45:02,862:INFO:plot type: reason
2025-01-18 19:45:02,863:INFO:model type detected: type 1
2025-01-18 19:45:02,863:INFO:Creating TreeExplainer
2025-01-18 19:45:03,092:INFO:Compiling shap values
2025-01-18 19:45:03,093:INFO:model type detected: LGBMClassifier
2025-01-18 19:45:03,531:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-18 19:45:14,949:INFO:Initializing automl()
2025-01-18 19:45:14,950:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-01-18 19:45:14,950:INFO:Model Selection Basis : CV Results on Training set
2025-01-18 19:45:14,950:INFO:Checking model 0
2025-01-18 19:45:14,951:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-01-18 19:45:14,951:INFO:Checking model 1
2025-01-18 19:45:14,951:INFO:Checking model 2
2025-01-18 19:45:14,951:INFO:Checking model 3
2025-01-18 19:45:14,951:INFO:Checking model 4
2025-01-18 19:45:14,952:INFO:Checking model 5
2025-01-18 19:45:14,952:INFO:Checking model 6
2025-01-18 19:45:14,952:INFO:Checking model 7
2025-01-18 19:45:14,953:INFO:Checking model 8
2025-01-18 19:45:14,953:INFO:Checking model 9
2025-01-18 19:45:14,953:INFO:Checking model 10
2025-01-18 19:45:14,953:INFO:Checking model 11
2025-01-18 19:45:14,953:INFO:Checking model 12
2025-01-18 19:45:14,954:INFO:Checking model 13
2025-01-18 19:45:14,954:INFO:Checking model 14
2025-01-18 19:45:14,954:INFO:Checking model 15
2025-01-18 19:45:14,954:INFO:Checking model 17
2025-01-18 19:45:14,954:INFO:Checking model 23
2025-01-18 19:45:14,954:INFO:Checking model 24
2025-01-18 19:45:14,954:INFO:Checking model 25
2025-01-18 19:45:14,955:INFO:Checking model 26
2025-01-18 19:45:14,955:INFO:Checking model 27
2025-01-18 19:45:14,955:INFO:Checking model 28
2025-01-18 19:45:14,955:INFO:Checking model 29
2025-01-18 19:45:14,955:INFO:Checking model 30
2025-01-18 19:45:14,956:INFO:Initializing create_model()
2025-01-18 19:45:14,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-18 19:45:14,956:INFO:Checking exceptions
2025-01-18 19:45:14,958:INFO:Importing libraries
2025-01-18 19:45:14,958:INFO:Copying training dataset
2025-01-18 19:45:14,967:INFO:Defining folds
2025-01-18 19:45:14,967:INFO:Declaring metric variables
2025-01-18 19:45:14,967:INFO:Importing untrained model
2025-01-18 19:45:14,967:INFO:Declaring custom model
2025-01-18 19:45:14,968:INFO:Linear Discriminant Analysis Imported successfully
2025-01-18 19:45:14,970:INFO:Cross validation set to False
2025-01-18 19:45:14,970:INFO:Fitting Model
2025-01-18 19:45:15,001:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:45:15,001:INFO:create_model() successfully completed......................................
2025-01-18 19:45:15,253:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-18 19:45:15,253:INFO:automl() successfully completed......................................
2025-01-18 19:45:21,976:INFO:Initializing predict_model()
2025-01-18 19:45:21,976:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AE92395AF0>)
2025-01-18 19:45:21,976:INFO:Checking exceptions
2025-01-18 19:45:21,976:INFO:Preloading libraries
2025-01-18 19:45:22,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:45:22,043:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:45:22,046:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-18 19:45:27,326:INFO:Initializing predict_model()
2025-01-18 19:45:27,326:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001AE92395B80>)
2025-01-18 19:45:27,326:INFO:Checking exceptions
2025-01-18 19:45:27,326:INFO:Preloading libraries
2025-01-18 19:45:27,329:INFO:Set up data.
2025-01-18 19:45:27,337:INFO:Set up index.
2025-01-18 19:45:30,389:INFO:Initializing save_model()
2025-01-18 19:45:30,389:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=./saved_models/pycaret_best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loya...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-18 19:45:30,390:INFO:Adding model into prep_pipe
2025-01-18 19:45:30,399:INFO:./saved_models/pycaret_best-model.pkl saved in current working directory
2025-01-18 19:45:30,425:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-01-18 19:45:30,425:INFO:save_model() successfully completed......................................
2025-01-18 19:45:33,815:INFO:Initializing load_model()
2025-01-18 19:45:33,816:INFO:load_model(model_name=./saved_models/pycaret_best-model, platform=None, authentication=None, verbose=True)
2025-01-18 19:46:01,303:INFO:Initializing get_config()
2025-01-18 19:46:01,304:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, variable=X_train)
2025-01-18 19:46:01,304:INFO:Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
2025-01-18 19:46:01,305:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\pycaret_experiment.py:321: UserWarning: Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
  warnings.warn(msg)  # print on screen

2025-01-18 19:46:01,322:INFO:Variable:  returned as       Id  WeekofPurchase  StoreID  PriceCH  PriceMM  DiscCH  DiscMM  \
584  585             264        7     1.86     2.13    0.37    0.00   
751  752             232        4     1.79     2.09    0.00    0.00   
462  463             228        7     1.69     1.69    0.00    0.00   
7      8             234        7     1.75     1.99    0.00    0.40   
161  162             269        4     1.99     2.09    0.10    0.00   
..   ...             ...      ...      ...      ...     ...     ...   
658  659             271        2     1.86     2.18    0.00    0.06   
390  391             236        2     1.75     1.99    0.00    0.00   
725  726             275        3     2.09     2.09    0.00    0.40   
51    52             249        4     1.99     2.23    0.00    0.00   
790  791             241        3     1.79     2.23    0.00    0.00   

     SpecialCH  SpecialMM   LoyalCH  SalePriceMM  SalePriceCH  PriceDiff  \
584          1          0  0.836160         2.13         1.49       0.64   
751          0          0  0.400000         2.09         1.79       0.30   
462          0          0  0.584000         1.69         1.69       0.00   
7            1          0  0.977746         1.59         1.75      -0.16   
161          0          0  0.978010         2.09         1.89       0.20   
..         ...        ...       ...          ...          ...        ...   
658          0          0  0.985493         2.12         1.86       0.26   
390          0          0  0.267737         1.99         1.75       0.24   
725          0          0  0.000014         1.69         2.09      -0.40   
51           0          0  0.742140         2.23         1.99       0.24   
790          0          0  0.500000         2.23         1.79       0.44   

    Store7  PctDiscMM  PctDiscCH  ListPriceDiff  STORE  
584    Yes   0.000000   0.198925           0.27      0  
751     No   0.000000   0.000000           0.30      4  
462    Yes   0.000000   0.000000           0.00      0  
7      Yes   0.201005   0.000000           0.24      0  
161     No   0.000000   0.050251           0.10      4  
..     ...        ...        ...            ...    ...  
658     No   0.027523   0.000000           0.32      2  
390     No   0.000000   0.000000           0.24      2  
725     No   0.191388   0.000000           0.00      3  
51      No   0.000000   0.000000           0.24      4  
790     No   0.000000   0.000000           0.44      3  

[749 rows x 18 columns]
2025-01-18 19:46:01,322:INFO:get_config() successfully completed......................................
2025-01-18 19:46:05,010:INFO:Initializing get_config()
2025-01-18 19:46:05,010:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, variable=seed)
2025-01-18 19:46:05,010:INFO:Variable:  returned as 123
2025-01-18 19:46:05,010:INFO:get_config() successfully completed......................................
2025-01-18 19:46:12,055:INFO:Initializing set_config()
2025-01-18 19:46:12,055:INFO:set_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, variable=seed, value=999, kwargs={})
2025-01-18 19:46:12,055:INFO:Global variable: seed updated to 999
2025-01-18 19:46:12,056:INFO:set_config() successfully completed......................................
2025-01-18 19:46:14,566:INFO:Initializing get_config()
2025-01-18 19:46:14,566:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001AEF02EB4C0>, variable=seed)
2025-01-18 19:46:14,566:INFO:Variable:  returned as 999
2025-01-18 19:46:14,566:INFO:get_config() successfully completed......................................
2025-01-19 12:45:45,636:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:45:45,643:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:45:45,643:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:45:45,643:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:49:56,270:INFO:PyCaret RegressionExperiment
2025-01-19 12:49:56,270:INFO:Logging name: tips_regression
2025-01-19 12:49:56,270:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 12:49:56,270:INFO:version 3.3.2
2025-01-19 12:49:56,270:INFO:Initializing setup()
2025-01-19 12:49:56,270:INFO:self.USI: 1066
2025-01-19 12:49:56,270:INFO:self._variable_keys: {'y_test', '_available_plots', 'X', 'fold_generator', 'X_test', 'exp_name_log', 'n_jobs_param', 'transform_target_param', '_ml_usecase', 'fold_groups_param', 'pipeline', 'fold_shuffle_param', 'gpu_param', 'memory', 'html_param', 'USI', 'y', 'y_train', 'log_plots_param', 'X_train', 'exp_id', 'seed', 'idx', 'target_param', 'gpu_n_jobs_param', 'logging_param', 'data'}
2025-01-19 12:49:56,270:INFO:Checking environment
2025-01-19 12:49:56,270:INFO:python_version: 3.9.21
2025-01-19 12:49:56,270:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 12:49:56,270:INFO:machine: AMD64
2025-01-19 12:49:56,270:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 12:49:56,270:INFO:Memory: svmem(total=8583708672, available=1526886400, percent=82.2, used=7056822272, free=1526886400)
2025-01-19 12:49:56,270:INFO:Physical Core: 4
2025-01-19 12:49:56,270:INFO:Logical Core: 4
2025-01-19 12:49:56,270:INFO:Checking libraries
2025-01-19 12:49:56,270:INFO:System:
2025-01-19 12:49:56,270:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 12:49:56,270:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 12:49:56,270:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 12:49:56,270:INFO:PyCaret required dependencies:
2025-01-19 12:49:56,342:INFO:                 pip: 24.2
2025-01-19 12:49:56,342:INFO:          setuptools: 75.1.0
2025-01-19 12:49:56,342:INFO:             pycaret: 3.3.2
2025-01-19 12:49:56,342:INFO:             IPython: 8.18.1
2025-01-19 12:49:56,342:INFO:          ipywidgets: 8.1.5
2025-01-19 12:49:56,342:INFO:                tqdm: 4.67.1
2025-01-19 12:49:56,342:INFO:               numpy: 1.26.4
2025-01-19 12:49:56,342:INFO:              pandas: 2.1.4
2025-01-19 12:49:56,342:INFO:              jinja2: 3.1.5
2025-01-19 12:49:56,342:INFO:               scipy: 1.11.4
2025-01-19 12:49:56,342:INFO:              joblib: 1.3.2
2025-01-19 12:49:56,342:INFO:             sklearn: 1.4.2
2025-01-19 12:49:56,342:INFO:                pyod: 2.0.3
2025-01-19 12:49:56,342:INFO:            imblearn: 0.12.4
2025-01-19 12:49:56,342:INFO:   category_encoders: 2.6.4
2025-01-19 12:49:56,342:INFO:            lightgbm: 4.5.0
2025-01-19 12:49:56,342:INFO:               numba: 0.60.0
2025-01-19 12:49:56,342:INFO:            requests: 2.32.3
2025-01-19 12:49:56,342:INFO:          matplotlib: 3.7.5
2025-01-19 12:49:56,342:INFO:          scikitplot: 0.3.7
2025-01-19 12:49:56,342:INFO:         yellowbrick: 1.5
2025-01-19 12:49:56,342:INFO:              plotly: 5.24.1
2025-01-19 12:49:56,342:INFO:    plotly-resampler: Not installed
2025-01-19 12:49:56,343:INFO:             kaleido: 0.2.1
2025-01-19 12:49:56,343:INFO:           schemdraw: 0.15
2025-01-19 12:49:56,343:INFO:         statsmodels: 0.14.4
2025-01-19 12:49:56,343:INFO:              sktime: 0.26.0
2025-01-19 12:49:56,343:INFO:               tbats: 1.1.3
2025-01-19 12:49:56,343:INFO:            pmdarima: 2.0.4
2025-01-19 12:49:56,343:INFO:              psutil: 6.1.1
2025-01-19 12:49:56,343:INFO:          markupsafe: 3.0.2
2025-01-19 12:49:56,343:INFO:             pickle5: Not installed
2025-01-19 12:49:56,343:INFO:         cloudpickle: 3.1.1
2025-01-19 12:49:56,343:INFO:         deprecation: 2.1.0
2025-01-19 12:49:56,343:INFO:              xxhash: 3.5.0
2025-01-19 12:49:56,343:INFO:           wurlitzer: Not installed
2025-01-19 12:49:56,343:INFO:PyCaret optional dependencies:
2025-01-19 12:49:56,355:INFO:                shap: 0.46.0
2025-01-19 12:49:56,355:INFO:           interpret: Not installed
2025-01-19 12:49:56,355:INFO:                umap: Not installed
2025-01-19 12:49:56,355:INFO:     ydata_profiling: Not installed
2025-01-19 12:49:56,355:INFO:  explainerdashboard: Not installed
2025-01-19 12:49:56,355:INFO:             autoviz: Not installed
2025-01-19 12:49:56,355:INFO:           fairlearn: Not installed
2025-01-19 12:49:56,355:INFO:          deepchecks: Not installed
2025-01-19 12:49:56,355:INFO:             xgboost: Not installed
2025-01-19 12:49:56,355:INFO:            catboost: Not installed
2025-01-19 12:49:56,355:INFO:              kmodes: Not installed
2025-01-19 12:49:56,355:INFO:             mlxtend: Not installed
2025-01-19 12:49:56,355:INFO:       statsforecast: Not installed
2025-01-19 12:49:56,355:INFO:        tune_sklearn: Not installed
2025-01-19 12:49:56,355:INFO:                 ray: Not installed
2025-01-19 12:49:56,355:INFO:            hyperopt: Not installed
2025-01-19 12:49:56,355:INFO:              optuna: Not installed
2025-01-19 12:49:56,355:INFO:               skopt: Not installed
2025-01-19 12:49:56,355:INFO:              mlflow: 2.19.0
2025-01-19 12:49:56,355:INFO:              gradio: Not installed
2025-01-19 12:49:56,355:INFO:             fastapi: Not installed
2025-01-19 12:49:56,356:INFO:             uvicorn: Not installed
2025-01-19 12:49:56,356:INFO:              m2cgen: Not installed
2025-01-19 12:49:56,356:INFO:           evidently: Not installed
2025-01-19 12:49:56,356:INFO:               fugue: Not installed
2025-01-19 12:49:56,356:INFO:           streamlit: Not installed
2025-01-19 12:49:56,356:INFO:             prophet: Not installed
2025-01-19 12:49:56,356:INFO:None
2025-01-19 12:49:56,356:INFO:Set up data.
2025-01-19 12:49:56,364:INFO:Set up folding strategy.
2025-01-19 12:49:56,365:INFO:Set up train/test split.
2025-01-19 12:49:56,365:INFO:Set up index.
2025-01-19 12:49:56,365:INFO:Assigning column types.
2025-01-19 12:49:56,365:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 12:49:56,365:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,375:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,380:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,464:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,519:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,519:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,519:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,519:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,535:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,539:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,614:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,672:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,672:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,678:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 12:49:56,687:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,693:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,784:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,853:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,853:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:56,859:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,867:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:56,949:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,014:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,014:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 12:49:57,025:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,109:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,172:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,172:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,172:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,184:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,261:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,337:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,337:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,337:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 12:49:57,429:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,490:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,490:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,588:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,643:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,643:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,643:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 12:49:57,830:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:57,963:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:57,963:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,166:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:49:58,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,247:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,247:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 12:49:58,407:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,407:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,576:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,576:INFO:Preparing preprocessing pipeline...
2025-01-19 12:49:58,576:INFO:Set up simple imputation.
2025-01-19 12:49:58,576:INFO:Set up polynomial features.
2025-01-19 12:49:58,576:INFO:Set up removing multicollinearity.
2025-01-19 12:49:58,576:INFO:Set up feature normalization.
2025-01-19 12:49:58,657:INFO:Finished creating preprocessing pipeline.
2025-01-19 12:49:58,664:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 12:49:58,664:INFO:Creating final display dataframe.
2025-01-19 12:49:58,789:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment     MlflowLogger
23              Experiment Name  tips_regression
24                          USI             1066
2025-01-19 12:49:58,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:58,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:59,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:59,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:49:59,080:INFO:Logging experiment in loggers
2025-01-19 12:51:43,268:INFO:PyCaret RegressionExperiment
2025-01-19 12:51:43,269:INFO:Logging name: tips_regression
2025-01-19 12:51:43,269:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 12:51:43,269:INFO:version 3.3.2
2025-01-19 12:51:43,269:INFO:Initializing setup()
2025-01-19 12:51:43,270:INFO:self.USI: a32a
2025-01-19 12:51:43,270:INFO:self._variable_keys: {'y_test', '_available_plots', 'X', 'fold_generator', 'X_test', 'exp_name_log', 'n_jobs_param', 'transform_target_param', '_ml_usecase', 'fold_groups_param', 'pipeline', 'fold_shuffle_param', 'gpu_param', 'memory', 'html_param', 'USI', 'y', 'y_train', 'log_plots_param', 'X_train', 'exp_id', 'seed', 'idx', 'target_param', 'gpu_n_jobs_param', 'logging_param', 'data'}
2025-01-19 12:51:43,270:INFO:Checking environment
2025-01-19 12:51:43,270:INFO:python_version: 3.9.21
2025-01-19 12:51:43,270:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 12:51:43,272:INFO:machine: AMD64
2025-01-19 12:51:43,272:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 12:51:43,274:INFO:Memory: svmem(total=8583708672, available=1469726720, percent=82.9, used=7113981952, free=1469726720)
2025-01-19 12:51:43,274:INFO:Physical Core: 4
2025-01-19 12:51:43,274:INFO:Logical Core: 4
2025-01-19 12:51:43,274:INFO:Checking libraries
2025-01-19 12:51:43,274:INFO:System:
2025-01-19 12:51:43,275:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 12:51:43,275:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 12:51:43,275:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 12:51:43,275:INFO:PyCaret required dependencies:
2025-01-19 12:51:43,275:INFO:                 pip: 24.2
2025-01-19 12:51:43,275:INFO:          setuptools: 75.1.0
2025-01-19 12:51:43,275:INFO:             pycaret: 3.3.2
2025-01-19 12:51:43,275:INFO:             IPython: 8.18.1
2025-01-19 12:51:43,275:INFO:          ipywidgets: 8.1.5
2025-01-19 12:51:43,275:INFO:                tqdm: 4.67.1
2025-01-19 12:51:43,276:INFO:               numpy: 1.26.4
2025-01-19 12:51:43,276:INFO:              pandas: 2.1.4
2025-01-19 12:51:43,276:INFO:              jinja2: 3.1.5
2025-01-19 12:51:43,276:INFO:               scipy: 1.11.4
2025-01-19 12:51:43,276:INFO:              joblib: 1.3.2
2025-01-19 12:51:43,276:INFO:             sklearn: 1.4.2
2025-01-19 12:51:43,277:INFO:                pyod: 2.0.3
2025-01-19 12:51:43,277:INFO:            imblearn: 0.12.4
2025-01-19 12:51:43,277:INFO:   category_encoders: 2.6.4
2025-01-19 12:51:43,277:INFO:            lightgbm: 4.5.0
2025-01-19 12:51:43,277:INFO:               numba: 0.60.0
2025-01-19 12:51:43,277:INFO:            requests: 2.32.3
2025-01-19 12:51:43,277:INFO:          matplotlib: 3.7.5
2025-01-19 12:51:43,277:INFO:          scikitplot: 0.3.7
2025-01-19 12:51:43,277:INFO:         yellowbrick: 1.5
2025-01-19 12:51:43,277:INFO:              plotly: 5.24.1
2025-01-19 12:51:43,277:INFO:    plotly-resampler: Not installed
2025-01-19 12:51:43,277:INFO:             kaleido: 0.2.1
2025-01-19 12:51:43,277:INFO:           schemdraw: 0.15
2025-01-19 12:51:43,277:INFO:         statsmodels: 0.14.4
2025-01-19 12:51:43,277:INFO:              sktime: 0.26.0
2025-01-19 12:51:43,277:INFO:               tbats: 1.1.3
2025-01-19 12:51:43,277:INFO:            pmdarima: 2.0.4
2025-01-19 12:51:43,277:INFO:              psutil: 6.1.1
2025-01-19 12:51:43,277:INFO:          markupsafe: 3.0.2
2025-01-19 12:51:43,277:INFO:             pickle5: Not installed
2025-01-19 12:51:43,277:INFO:         cloudpickle: 3.1.1
2025-01-19 12:51:43,277:INFO:         deprecation: 2.1.0
2025-01-19 12:51:43,277:INFO:              xxhash: 3.5.0
2025-01-19 12:51:43,277:INFO:           wurlitzer: Not installed
2025-01-19 12:51:43,277:INFO:PyCaret optional dependencies:
2025-01-19 12:51:43,277:INFO:                shap: 0.46.0
2025-01-19 12:51:43,277:INFO:           interpret: Not installed
2025-01-19 12:51:43,277:INFO:                umap: Not installed
2025-01-19 12:51:43,277:INFO:     ydata_profiling: Not installed
2025-01-19 12:51:43,278:INFO:  explainerdashboard: Not installed
2025-01-19 12:51:43,278:INFO:             autoviz: Not installed
2025-01-19 12:51:43,278:INFO:           fairlearn: Not installed
2025-01-19 12:51:43,278:INFO:          deepchecks: Not installed
2025-01-19 12:51:43,278:INFO:             xgboost: Not installed
2025-01-19 12:51:43,278:INFO:            catboost: Not installed
2025-01-19 12:51:43,278:INFO:              kmodes: Not installed
2025-01-19 12:51:43,278:INFO:             mlxtend: Not installed
2025-01-19 12:51:43,278:INFO:       statsforecast: Not installed
2025-01-19 12:51:43,278:INFO:        tune_sklearn: Not installed
2025-01-19 12:51:43,278:INFO:                 ray: Not installed
2025-01-19 12:51:43,278:INFO:            hyperopt: Not installed
2025-01-19 12:51:43,278:INFO:              optuna: Not installed
2025-01-19 12:51:43,278:INFO:               skopt: Not installed
2025-01-19 12:51:43,278:INFO:              mlflow: 2.19.0
2025-01-19 12:51:43,278:INFO:              gradio: Not installed
2025-01-19 12:51:43,278:INFO:             fastapi: Not installed
2025-01-19 12:51:43,278:INFO:             uvicorn: Not installed
2025-01-19 12:51:43,278:INFO:              m2cgen: Not installed
2025-01-19 12:51:43,278:INFO:           evidently: Not installed
2025-01-19 12:51:43,278:INFO:               fugue: Not installed
2025-01-19 12:51:43,278:INFO:           streamlit: Not installed
2025-01-19 12:51:43,278:INFO:             prophet: Not installed
2025-01-19 12:51:43,278:INFO:None
2025-01-19 12:51:43,278:INFO:Set up data.
2025-01-19 12:51:43,284:INFO:Set up folding strategy.
2025-01-19 12:51:43,284:INFO:Set up train/test split.
2025-01-19 12:51:43,290:INFO:Set up index.
2025-01-19 12:51:43,290:INFO:Assigning column types.
2025-01-19 12:51:43,294:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 12:51:43,295:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,306:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,311:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,379:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,450:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,451:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,453:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,459:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,463:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,525:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,597:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,599:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,600:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,600:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 12:51:43,604:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,609:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,685:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,742:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,742:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,748:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,755:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,824:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,887:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,887:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:43,887:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 12:51:43,901:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:43,979:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,040:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,040:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,040:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,054:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,213:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,303:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,304:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 12:51:44,532:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,630:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,630:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,630:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,724:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,783:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,783:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,783:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,783:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 12:51:44,867:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:44,927:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:44,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,012:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:51:45,069:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,069:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,070:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 12:51:45,213:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,359:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,359:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,359:INFO:Preparing preprocessing pipeline...
2025-01-19 12:51:45,359:INFO:Set up simple imputation.
2025-01-19 12:51:45,359:INFO:Set up polynomial features.
2025-01-19 12:51:45,359:INFO:Set up removing multicollinearity.
2025-01-19 12:51:45,359:INFO:Set up feature normalization.
2025-01-19 12:51:45,407:INFO:Finished creating preprocessing pipeline.
2025-01-19 12:51:45,420:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 12:51:45,421:INFO:Creating final display dataframe.
2025-01-19 12:51:45,526:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment     MlflowLogger
23              Experiment Name  tips_regression
24                          USI             a32a
2025-01-19 12:51:45,667:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,667:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,819:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,820:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:51:45,820:INFO:Logging experiment in loggers
2025-01-19 12:52:14,376:INFO:PyCaret RegressionExperiment
2025-01-19 12:52:14,377:INFO:Logging name: tips_regression
2025-01-19 12:52:14,377:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 12:52:14,377:INFO:version 3.3.2
2025-01-19 12:52:14,377:INFO:Initializing setup()
2025-01-19 12:52:14,377:INFO:self.USI: 3fd6
2025-01-19 12:52:14,377:INFO:self._variable_keys: {'y_test', '_available_plots', 'X', 'fold_generator', 'X_test', 'exp_name_log', 'n_jobs_param', 'transform_target_param', '_ml_usecase', 'fold_groups_param', 'pipeline', 'fold_shuffle_param', 'gpu_param', 'memory', 'html_param', 'USI', 'y', 'y_train', 'log_plots_param', 'X_train', 'exp_id', 'seed', 'idx', 'target_param', 'gpu_n_jobs_param', 'logging_param', 'data'}
2025-01-19 12:52:14,377:INFO:Checking environment
2025-01-19 12:52:14,377:INFO:python_version: 3.9.21
2025-01-19 12:52:14,378:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 12:52:14,378:INFO:machine: AMD64
2025-01-19 12:52:14,378:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 12:52:14,380:INFO:Memory: svmem(total=8583708672, available=1169154048, percent=86.4, used=7414554624, free=1169154048)
2025-01-19 12:52:14,381:INFO:Physical Core: 4
2025-01-19 12:52:14,381:INFO:Logical Core: 4
2025-01-19 12:52:14,381:INFO:Checking libraries
2025-01-19 12:52:14,381:INFO:System:
2025-01-19 12:52:14,382:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 12:52:14,382:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 12:52:14,382:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 12:52:14,382:INFO:PyCaret required dependencies:
2025-01-19 12:52:14,383:INFO:                 pip: 24.2
2025-01-19 12:52:14,383:INFO:          setuptools: 75.1.0
2025-01-19 12:52:14,383:INFO:             pycaret: 3.3.2
2025-01-19 12:52:14,383:INFO:             IPython: 8.18.1
2025-01-19 12:52:14,383:INFO:          ipywidgets: 8.1.5
2025-01-19 12:52:14,384:INFO:                tqdm: 4.67.1
2025-01-19 12:52:14,384:INFO:               numpy: 1.26.4
2025-01-19 12:52:14,384:INFO:              pandas: 2.1.4
2025-01-19 12:52:14,384:INFO:              jinja2: 3.1.5
2025-01-19 12:52:14,384:INFO:               scipy: 1.11.4
2025-01-19 12:52:14,384:INFO:              joblib: 1.3.2
2025-01-19 12:52:14,385:INFO:             sklearn: 1.4.2
2025-01-19 12:52:14,385:INFO:                pyod: 2.0.3
2025-01-19 12:52:14,385:INFO:            imblearn: 0.12.4
2025-01-19 12:52:14,385:INFO:   category_encoders: 2.6.4
2025-01-19 12:52:14,385:INFO:            lightgbm: 4.5.0
2025-01-19 12:52:14,386:INFO:               numba: 0.60.0
2025-01-19 12:52:14,386:INFO:            requests: 2.32.3
2025-01-19 12:52:14,386:INFO:          matplotlib: 3.7.5
2025-01-19 12:52:14,386:INFO:          scikitplot: 0.3.7
2025-01-19 12:52:14,386:INFO:         yellowbrick: 1.5
2025-01-19 12:52:14,386:INFO:              plotly: 5.24.1
2025-01-19 12:52:14,386:INFO:    plotly-resampler: Not installed
2025-01-19 12:52:14,387:INFO:             kaleido: 0.2.1
2025-01-19 12:52:14,387:INFO:           schemdraw: 0.15
2025-01-19 12:52:14,387:INFO:         statsmodels: 0.14.4
2025-01-19 12:52:14,387:INFO:              sktime: 0.26.0
2025-01-19 12:52:14,387:INFO:               tbats: 1.1.3
2025-01-19 12:52:14,387:INFO:            pmdarima: 2.0.4
2025-01-19 12:52:14,387:INFO:              psutil: 6.1.1
2025-01-19 12:52:14,388:INFO:          markupsafe: 3.0.2
2025-01-19 12:52:14,388:INFO:             pickle5: Not installed
2025-01-19 12:52:14,388:INFO:         cloudpickle: 3.1.1
2025-01-19 12:52:14,388:INFO:         deprecation: 2.1.0
2025-01-19 12:52:14,388:INFO:              xxhash: 3.5.0
2025-01-19 12:52:14,388:INFO:           wurlitzer: Not installed
2025-01-19 12:52:14,388:INFO:PyCaret optional dependencies:
2025-01-19 12:52:14,389:INFO:                shap: 0.46.0
2025-01-19 12:52:14,389:INFO:           interpret: Not installed
2025-01-19 12:52:14,389:INFO:                umap: Not installed
2025-01-19 12:52:14,389:INFO:     ydata_profiling: Not installed
2025-01-19 12:52:14,389:INFO:  explainerdashboard: Not installed
2025-01-19 12:52:14,389:INFO:             autoviz: Not installed
2025-01-19 12:52:14,389:INFO:           fairlearn: Not installed
2025-01-19 12:52:14,389:INFO:          deepchecks: Not installed
2025-01-19 12:52:14,389:INFO:             xgboost: Not installed
2025-01-19 12:52:14,389:INFO:            catboost: Not installed
2025-01-19 12:52:14,389:INFO:              kmodes: Not installed
2025-01-19 12:52:14,389:INFO:             mlxtend: Not installed
2025-01-19 12:52:14,389:INFO:       statsforecast: Not installed
2025-01-19 12:52:14,389:INFO:        tune_sklearn: Not installed
2025-01-19 12:52:14,389:INFO:                 ray: Not installed
2025-01-19 12:52:14,389:INFO:            hyperopt: Not installed
2025-01-19 12:52:14,389:INFO:              optuna: Not installed
2025-01-19 12:52:14,389:INFO:               skopt: Not installed
2025-01-19 12:52:14,389:INFO:              mlflow: 2.19.0
2025-01-19 12:52:14,389:INFO:              gradio: Not installed
2025-01-19 12:52:14,389:INFO:             fastapi: Not installed
2025-01-19 12:52:14,389:INFO:             uvicorn: Not installed
2025-01-19 12:52:14,389:INFO:              m2cgen: Not installed
2025-01-19 12:52:14,389:INFO:           evidently: Not installed
2025-01-19 12:52:14,390:INFO:               fugue: Not installed
2025-01-19 12:52:14,390:INFO:           streamlit: Not installed
2025-01-19 12:52:14,390:INFO:             prophet: Not installed
2025-01-19 12:52:14,390:INFO:None
2025-01-19 12:52:14,390:INFO:Set up data.
2025-01-19 12:52:14,395:INFO:Set up folding strategy.
2025-01-19 12:52:14,395:INFO:Set up train/test split.
2025-01-19 12:52:14,399:INFO:Set up index.
2025-01-19 12:52:14,399:INFO:Assigning column types.
2025-01-19 12:52:14,402:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 12:52:14,402:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,410:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,417:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,497:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,553:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,553:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,553:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,553:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,553:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,568:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,642:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,700:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,700:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,700:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,700:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 12:52:14,700:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,700:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,793:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,854:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,855:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,855:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:14,859:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,868:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:14,943:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,006:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,011:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,012:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 12:52:15,025:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,095:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,164:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,165:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,165:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,171:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,240:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,304:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,304:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 12:52:15,401:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,442:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,544:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,602:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,602:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,602:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,602:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 12:52:15,694:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,747:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,840:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:15,902:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,902:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:15,902:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 12:52:16,049:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,050:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,302:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,303:INFO:Preparing preprocessing pipeline...
2025-01-19 12:52:16,303:INFO:Set up simple imputation.
2025-01-19 12:52:16,303:INFO:Set up polynomial features.
2025-01-19 12:52:16,303:INFO:Set up removing multicollinearity.
2025-01-19 12:52:16,303:INFO:Set up feature normalization.
2025-01-19 12:52:16,470:INFO:Finished creating preprocessing pipeline.
2025-01-19 12:52:16,483:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 12:52:16,483:INFO:Creating final display dataframe.
2025-01-19 12:52:16,693:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             3fd6
2025-01-19 12:52:16,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,981:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,981:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:16,982:INFO:setup() successfully completed in 2.61s...............
2025-01-19 12:52:35,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:52:35,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:52:35,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:52:35,414:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 12:52:35,739:INFO:PyCaret RegressionExperiment
2025-01-19 12:52:35,739:INFO:Logging name: tips_regression
2025-01-19 12:52:35,740:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 12:52:35,741:INFO:version 3.3.2
2025-01-19 12:52:35,741:INFO:Initializing setup()
2025-01-19 12:52:35,741:INFO:self.USI: 2dc1
2025-01-19 12:52:35,741:INFO:self._variable_keys: {'fold_generator', 'USI', 'html_param', 'X', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'pipeline', 'memory', 'logging_param', 'target_param', 'gpu_param', 'y_test', 'exp_id', 'transform_target_param', 'log_plots_param', 'n_jobs_param', 'X_test', 'data', 'idx', 'X_train', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'seed', 'fold_groups_param'}
2025-01-19 12:52:35,741:INFO:Checking environment
2025-01-19 12:52:35,742:INFO:python_version: 3.9.21
2025-01-19 12:52:35,742:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 12:52:35,742:INFO:machine: AMD64
2025-01-19 12:52:35,742:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 12:52:35,744:INFO:Memory: svmem(total=8583708672, available=1342676992, percent=84.4, used=7241031680, free=1342676992)
2025-01-19 12:52:35,744:INFO:Physical Core: 4
2025-01-19 12:52:35,744:INFO:Logical Core: 4
2025-01-19 12:52:35,744:INFO:Checking libraries
2025-01-19 12:52:35,744:INFO:System:
2025-01-19 12:52:35,744:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 12:52:35,744:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 12:52:35,744:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 12:52:35,745:INFO:PyCaret required dependencies:
2025-01-19 12:52:35,784:INFO:                 pip: 24.2
2025-01-19 12:52:35,784:INFO:          setuptools: 75.1.0
2025-01-19 12:52:35,784:INFO:             pycaret: 3.3.2
2025-01-19 12:52:35,784:INFO:             IPython: 8.18.1
2025-01-19 12:52:35,784:INFO:          ipywidgets: 8.1.5
2025-01-19 12:52:35,784:INFO:                tqdm: 4.67.1
2025-01-19 12:52:35,784:INFO:               numpy: 1.26.4
2025-01-19 12:52:35,784:INFO:              pandas: 2.1.4
2025-01-19 12:52:35,784:INFO:              jinja2: 3.1.5
2025-01-19 12:52:35,784:INFO:               scipy: 1.11.4
2025-01-19 12:52:35,785:INFO:              joblib: 1.3.2
2025-01-19 12:52:35,785:INFO:             sklearn: 1.4.2
2025-01-19 12:52:35,785:INFO:                pyod: 2.0.3
2025-01-19 12:52:35,785:INFO:            imblearn: 0.12.4
2025-01-19 12:52:35,785:INFO:   category_encoders: 2.6.4
2025-01-19 12:52:35,785:INFO:            lightgbm: 4.5.0
2025-01-19 12:52:35,785:INFO:               numba: 0.60.0
2025-01-19 12:52:35,785:INFO:            requests: 2.32.3
2025-01-19 12:52:35,785:INFO:          matplotlib: 3.7.5
2025-01-19 12:52:35,785:INFO:          scikitplot: 0.3.7
2025-01-19 12:52:35,785:INFO:         yellowbrick: 1.5
2025-01-19 12:52:35,785:INFO:              plotly: 5.24.1
2025-01-19 12:52:35,785:INFO:    plotly-resampler: Not installed
2025-01-19 12:52:35,785:INFO:             kaleido: 0.2.1
2025-01-19 12:52:35,785:INFO:           schemdraw: 0.15
2025-01-19 12:52:35,785:INFO:         statsmodels: 0.14.4
2025-01-19 12:52:35,785:INFO:              sktime: 0.26.0
2025-01-19 12:52:35,785:INFO:               tbats: 1.1.3
2025-01-19 12:52:35,785:INFO:            pmdarima: 2.0.4
2025-01-19 12:52:35,785:INFO:              psutil: 6.1.1
2025-01-19 12:52:35,785:INFO:          markupsafe: 3.0.2
2025-01-19 12:52:35,785:INFO:             pickle5: Not installed
2025-01-19 12:52:35,785:INFO:         cloudpickle: 3.1.1
2025-01-19 12:52:35,785:INFO:         deprecation: 2.1.0
2025-01-19 12:52:35,785:INFO:              xxhash: 3.5.0
2025-01-19 12:52:35,785:INFO:           wurlitzer: Not installed
2025-01-19 12:52:35,785:INFO:PyCaret optional dependencies:
2025-01-19 12:52:35,801:INFO:                shap: 0.46.0
2025-01-19 12:52:35,801:INFO:           interpret: Not installed
2025-01-19 12:52:35,801:INFO:                umap: Not installed
2025-01-19 12:52:35,801:INFO:     ydata_profiling: Not installed
2025-01-19 12:52:35,801:INFO:  explainerdashboard: Not installed
2025-01-19 12:52:35,801:INFO:             autoviz: Not installed
2025-01-19 12:52:35,801:INFO:           fairlearn: Not installed
2025-01-19 12:52:35,801:INFO:          deepchecks: Not installed
2025-01-19 12:52:35,801:INFO:             xgboost: Not installed
2025-01-19 12:52:35,802:INFO:            catboost: Not installed
2025-01-19 12:52:35,802:INFO:              kmodes: Not installed
2025-01-19 12:52:35,802:INFO:             mlxtend: Not installed
2025-01-19 12:52:35,802:INFO:       statsforecast: Not installed
2025-01-19 12:52:35,802:INFO:        tune_sklearn: Not installed
2025-01-19 12:52:35,802:INFO:                 ray: Not installed
2025-01-19 12:52:35,802:INFO:            hyperopt: Not installed
2025-01-19 12:52:35,802:INFO:              optuna: Not installed
2025-01-19 12:52:35,802:INFO:               skopt: Not installed
2025-01-19 12:52:35,802:INFO:              mlflow: 2.19.0
2025-01-19 12:52:35,802:INFO:              gradio: Not installed
2025-01-19 12:52:35,802:INFO:             fastapi: Not installed
2025-01-19 12:52:35,802:INFO:             uvicorn: Not installed
2025-01-19 12:52:35,802:INFO:              m2cgen: Not installed
2025-01-19 12:52:35,802:INFO:           evidently: Not installed
2025-01-19 12:52:35,802:INFO:               fugue: Not installed
2025-01-19 12:52:35,802:INFO:           streamlit: Not installed
2025-01-19 12:52:35,802:INFO:             prophet: Not installed
2025-01-19 12:52:35,803:INFO:None
2025-01-19 12:52:35,803:INFO:Set up data.
2025-01-19 12:52:35,810:INFO:Set up folding strategy.
2025-01-19 12:52:35,810:INFO:Set up train/test split.
2025-01-19 12:52:35,813:INFO:Set up index.
2025-01-19 12:52:35,813:INFO:Assigning column types.
2025-01-19 12:52:35,816:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 12:52:35,817:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,822:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,824:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,908:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,970:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,970:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:35,970:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:35,970:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,978:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:35,983:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,053:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,109:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,109:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,109:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 12:52:36,109:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,130:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,204:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,254:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,254:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,254:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,270:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,339:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,398:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,399:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,399:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,400:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 12:52:36,400:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,477:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,538:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,538:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,539:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,546:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,618:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,678:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,678:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,678:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,678:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 12:52:36,748:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,904:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:36,905:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,905:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:36,991:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:37,102:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:52:37,102:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,109:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,110:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 12:52:37,200:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:37,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,484:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,575:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:52:37,630:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,630:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,630:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 12:52:37,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:37,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,020:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,021:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,022:INFO:Preparing preprocessing pipeline...
2025-01-19 12:52:38,022:INFO:Set up simple imputation.
2025-01-19 12:52:38,022:INFO:Set up polynomial features.
2025-01-19 12:52:38,022:INFO:Set up removing multicollinearity.
2025-01-19 12:52:38,022:INFO:Set up feature normalization.
2025-01-19 12:52:38,115:INFO:Finished creating preprocessing pipeline.
2025-01-19 12:52:38,126:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 12:52:38,126:INFO:Creating final display dataframe.
2025-01-19 12:52:38,261:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             2dc1
2025-01-19 12:52:38,404:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,405:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,555:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,555:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:52:38,555:INFO:setup() successfully completed in 2.82s...............
2025-01-19 12:52:38,567:INFO:Initializing compare_models()
2025-01-19 12:52:38,567:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-19 12:52:38,567:INFO:Checking exceptions
2025-01-19 12:52:38,569:INFO:Preparing display monitor
2025-01-19 12:52:38,614:INFO:Initializing Linear Regression
2025-01-19 12:52:38,615:INFO:Total runtime is 0.0 minutes
2025-01-19 12:52:38,623:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:38,623:INFO:Initializing create_model()
2025-01-19 12:52:38,623:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:38,623:INFO:Checking exceptions
2025-01-19 12:52:38,623:INFO:Importing libraries
2025-01-19 12:52:38,623:INFO:Copying training dataset
2025-01-19 12:52:38,636:INFO:Defining folds
2025-01-19 12:52:38,637:INFO:Declaring metric variables
2025-01-19 12:52:38,653:INFO:Importing untrained model
2025-01-19 12:52:38,660:INFO:Linear Regression Imported successfully
2025-01-19 12:52:38,669:INFO:Starting cross validation
2025-01-19 12:52:38,689:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:42,636:INFO:Calculating mean and std
2025-01-19 12:52:42,638:INFO:Creating metrics dataframe
2025-01-19 12:52:42,643:INFO:Uploading results into container
2025-01-19 12:52:42,644:INFO:Uploading model into container now
2025-01-19 12:52:42,645:INFO:_master_model_container: 1
2025-01-19 12:52:42,646:INFO:_display_container: 2
2025-01-19 12:52:42,646:INFO:LinearRegression(n_jobs=-1)
2025-01-19 12:52:42,646:INFO:create_model() successfully completed......................................
2025-01-19 12:52:42,723:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:42,723:INFO:Creating metrics dataframe
2025-01-19 12:52:42,727:INFO:Initializing Lasso Regression
2025-01-19 12:52:42,727:INFO:Total runtime is 0.068549911181132 minutes
2025-01-19 12:52:42,734:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:42,734:INFO:Initializing create_model()
2025-01-19 12:52:42,734:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:42,734:INFO:Checking exceptions
2025-01-19 12:52:42,735:INFO:Importing libraries
2025-01-19 12:52:42,735:INFO:Copying training dataset
2025-01-19 12:52:42,739:INFO:Defining folds
2025-01-19 12:52:42,739:INFO:Declaring metric variables
2025-01-19 12:52:42,743:INFO:Importing untrained model
2025-01-19 12:52:42,752:INFO:Lasso Regression Imported successfully
2025-01-19 12:52:42,768:INFO:Starting cross validation
2025-01-19 12:52:42,773:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:42,936:INFO:Calculating mean and std
2025-01-19 12:52:42,938:INFO:Creating metrics dataframe
2025-01-19 12:52:42,943:INFO:Uploading results into container
2025-01-19 12:52:42,944:INFO:Uploading model into container now
2025-01-19 12:52:42,944:INFO:_master_model_container: 2
2025-01-19 12:52:42,944:INFO:_display_container: 2
2025-01-19 12:52:42,944:INFO:Lasso(random_state=123)
2025-01-19 12:52:42,944:INFO:create_model() successfully completed......................................
2025-01-19 12:52:43,019:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:43,019:INFO:Creating metrics dataframe
2025-01-19 12:52:43,025:INFO:Initializing Ridge Regression
2025-01-19 12:52:43,025:INFO:Total runtime is 0.07352629899978638 minutes
2025-01-19 12:52:43,025:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:43,025:INFO:Initializing create_model()
2025-01-19 12:52:43,025:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:43,025:INFO:Checking exceptions
2025-01-19 12:52:43,025:INFO:Importing libraries
2025-01-19 12:52:43,025:INFO:Copying training dataset
2025-01-19 12:52:43,035:INFO:Defining folds
2025-01-19 12:52:43,035:INFO:Declaring metric variables
2025-01-19 12:52:43,039:INFO:Importing untrained model
2025-01-19 12:52:43,042:INFO:Ridge Regression Imported successfully
2025-01-19 12:52:43,059:INFO:Starting cross validation
2025-01-19 12:52:43,064:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:43,234:INFO:Calculating mean and std
2025-01-19 12:52:43,234:INFO:Creating metrics dataframe
2025-01-19 12:52:43,237:INFO:Uploading results into container
2025-01-19 12:52:43,237:INFO:Uploading model into container now
2025-01-19 12:52:43,238:INFO:_master_model_container: 3
2025-01-19 12:52:43,238:INFO:_display_container: 2
2025-01-19 12:52:43,238:INFO:Ridge(random_state=123)
2025-01-19 12:52:43,238:INFO:create_model() successfully completed......................................
2025-01-19 12:52:43,314:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:43,315:INFO:Creating metrics dataframe
2025-01-19 12:52:43,325:INFO:Initializing Elastic Net
2025-01-19 12:52:43,326:INFO:Total runtime is 0.07854364315668742 minutes
2025-01-19 12:52:43,329:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:43,330:INFO:Initializing create_model()
2025-01-19 12:52:43,330:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:43,330:INFO:Checking exceptions
2025-01-19 12:52:43,330:INFO:Importing libraries
2025-01-19 12:52:43,331:INFO:Copying training dataset
2025-01-19 12:52:43,333:INFO:Defining folds
2025-01-19 12:52:43,333:INFO:Declaring metric variables
2025-01-19 12:52:43,340:INFO:Importing untrained model
2025-01-19 12:52:43,344:INFO:Elastic Net Imported successfully
2025-01-19 12:52:43,358:INFO:Starting cross validation
2025-01-19 12:52:43,360:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:43,561:INFO:Calculating mean and std
2025-01-19 12:52:43,562:INFO:Creating metrics dataframe
2025-01-19 12:52:43,565:INFO:Uploading results into container
2025-01-19 12:52:43,565:INFO:Uploading model into container now
2025-01-19 12:52:43,566:INFO:_master_model_container: 4
2025-01-19 12:52:43,566:INFO:_display_container: 2
2025-01-19 12:52:43,567:INFO:ElasticNet(random_state=123)
2025-01-19 12:52:43,567:INFO:create_model() successfully completed......................................
2025-01-19 12:52:43,648:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:43,648:INFO:Creating metrics dataframe
2025-01-19 12:52:43,657:INFO:Initializing Least Angle Regression
2025-01-19 12:52:43,657:INFO:Total runtime is 0.084051247437795 minutes
2025-01-19 12:52:43,661:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:43,662:INFO:Initializing create_model()
2025-01-19 12:52:43,662:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:43,662:INFO:Checking exceptions
2025-01-19 12:52:43,662:INFO:Importing libraries
2025-01-19 12:52:43,662:INFO:Copying training dataset
2025-01-19 12:52:43,664:INFO:Defining folds
2025-01-19 12:52:43,664:INFO:Declaring metric variables
2025-01-19 12:52:43,664:INFO:Importing untrained model
2025-01-19 12:52:43,672:INFO:Least Angle Regression Imported successfully
2025-01-19 12:52:43,694:INFO:Starting cross validation
2025-01-19 12:52:43,697:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:43,881:INFO:Calculating mean and std
2025-01-19 12:52:43,881:INFO:Creating metrics dataframe
2025-01-19 12:52:43,881:INFO:Uploading results into container
2025-01-19 12:52:43,881:INFO:Uploading model into container now
2025-01-19 12:52:43,881:INFO:_master_model_container: 5
2025-01-19 12:52:43,881:INFO:_display_container: 2
2025-01-19 12:52:43,881:INFO:Lars(random_state=123)
2025-01-19 12:52:43,881:INFO:create_model() successfully completed......................................
2025-01-19 12:52:43,950:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:43,950:INFO:Creating metrics dataframe
2025-01-19 12:52:43,964:INFO:Initializing Lasso Least Angle Regression
2025-01-19 12:52:43,964:INFO:Total runtime is 0.08916976849238079 minutes
2025-01-19 12:52:43,971:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:43,971:INFO:Initializing create_model()
2025-01-19 12:52:43,971:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:43,971:INFO:Checking exceptions
2025-01-19 12:52:43,971:INFO:Importing libraries
2025-01-19 12:52:43,971:INFO:Copying training dataset
2025-01-19 12:52:43,980:INFO:Defining folds
2025-01-19 12:52:43,980:INFO:Declaring metric variables
2025-01-19 12:52:43,983:INFO:Importing untrained model
2025-01-19 12:52:43,986:INFO:Lasso Least Angle Regression Imported successfully
2025-01-19 12:52:44,009:INFO:Starting cross validation
2025-01-19 12:52:44,012:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:44,235:INFO:Calculating mean and std
2025-01-19 12:52:44,236:INFO:Creating metrics dataframe
2025-01-19 12:52:44,238:INFO:Uploading results into container
2025-01-19 12:52:44,239:INFO:Uploading model into container now
2025-01-19 12:52:44,239:INFO:_master_model_container: 6
2025-01-19 12:52:44,239:INFO:_display_container: 2
2025-01-19 12:52:44,240:INFO:LassoLars(random_state=123)
2025-01-19 12:52:44,240:INFO:create_model() successfully completed......................................
2025-01-19 12:52:44,320:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:44,320:INFO:Creating metrics dataframe
2025-01-19 12:52:44,331:INFO:Initializing Orthogonal Matching Pursuit
2025-01-19 12:52:44,332:INFO:Total runtime is 0.09530511299769084 minutes
2025-01-19 12:52:44,335:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:44,335:INFO:Initializing create_model()
2025-01-19 12:52:44,336:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:44,336:INFO:Checking exceptions
2025-01-19 12:52:44,336:INFO:Importing libraries
2025-01-19 12:52:44,336:INFO:Copying training dataset
2025-01-19 12:52:44,339:INFO:Defining folds
2025-01-19 12:52:44,340:INFO:Declaring metric variables
2025-01-19 12:52:44,344:INFO:Importing untrained model
2025-01-19 12:52:44,344:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-19 12:52:44,362:INFO:Starting cross validation
2025-01-19 12:52:44,366:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:44,567:INFO:Calculating mean and std
2025-01-19 12:52:44,567:INFO:Creating metrics dataframe
2025-01-19 12:52:44,570:INFO:Uploading results into container
2025-01-19 12:52:44,571:INFO:Uploading model into container now
2025-01-19 12:52:44,571:INFO:_master_model_container: 7
2025-01-19 12:52:44,571:INFO:_display_container: 2
2025-01-19 12:52:44,571:INFO:OrthogonalMatchingPursuit()
2025-01-19 12:52:44,571:INFO:create_model() successfully completed......................................
2025-01-19 12:52:44,643:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:44,643:INFO:Creating metrics dataframe
2025-01-19 12:52:44,653:INFO:Initializing Bayesian Ridge
2025-01-19 12:52:44,653:INFO:Total runtime is 0.10065671205520631 minutes
2025-01-19 12:52:44,658:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:44,658:INFO:Initializing create_model()
2025-01-19 12:52:44,659:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:44,659:INFO:Checking exceptions
2025-01-19 12:52:44,659:INFO:Importing libraries
2025-01-19 12:52:44,659:INFO:Copying training dataset
2025-01-19 12:52:44,662:INFO:Defining folds
2025-01-19 12:52:44,663:INFO:Declaring metric variables
2025-01-19 12:52:44,666:INFO:Importing untrained model
2025-01-19 12:52:44,669:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:52:44,684:INFO:Starting cross validation
2025-01-19 12:52:44,697:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:44,887:INFO:Calculating mean and std
2025-01-19 12:52:44,888:INFO:Creating metrics dataframe
2025-01-19 12:52:44,890:INFO:Uploading results into container
2025-01-19 12:52:44,892:INFO:Uploading model into container now
2025-01-19 12:52:44,892:INFO:_master_model_container: 8
2025-01-19 12:52:44,892:INFO:_display_container: 2
2025-01-19 12:52:44,895:INFO:BayesianRidge()
2025-01-19 12:52:44,895:INFO:create_model() successfully completed......................................
2025-01-19 12:52:44,997:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:45,012:INFO:Creating metrics dataframe
2025-01-19 12:52:45,024:INFO:Initializing Passive Aggressive Regressor
2025-01-19 12:52:45,025:INFO:Total runtime is 0.10685904423395794 minutes
2025-01-19 12:52:45,029:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:45,032:INFO:Initializing create_model()
2025-01-19 12:52:45,032:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:45,032:INFO:Checking exceptions
2025-01-19 12:52:45,032:INFO:Importing libraries
2025-01-19 12:52:45,032:INFO:Copying training dataset
2025-01-19 12:52:45,036:INFO:Defining folds
2025-01-19 12:52:45,036:INFO:Declaring metric variables
2025-01-19 12:52:45,040:INFO:Importing untrained model
2025-01-19 12:52:45,061:INFO:Passive Aggressive Regressor Imported successfully
2025-01-19 12:52:45,076:INFO:Starting cross validation
2025-01-19 12:52:45,078:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:45,292:INFO:Calculating mean and std
2025-01-19 12:52:45,292:INFO:Creating metrics dataframe
2025-01-19 12:52:45,325:INFO:Uploading results into container
2025-01-19 12:52:45,325:INFO:Uploading model into container now
2025-01-19 12:52:45,325:INFO:_master_model_container: 9
2025-01-19 12:52:45,325:INFO:_display_container: 2
2025-01-19 12:52:45,325:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-19 12:52:45,325:INFO:create_model() successfully completed......................................
2025-01-19 12:52:45,487:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:45,488:INFO:Creating metrics dataframe
2025-01-19 12:52:45,507:INFO:Initializing Huber Regressor
2025-01-19 12:52:45,507:INFO:Total runtime is 0.11488903363545737 minutes
2025-01-19 12:52:45,514:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:45,515:INFO:Initializing create_model()
2025-01-19 12:52:45,515:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:45,515:INFO:Checking exceptions
2025-01-19 12:52:45,515:INFO:Importing libraries
2025-01-19 12:52:45,515:INFO:Copying training dataset
2025-01-19 12:52:45,520:INFO:Defining folds
2025-01-19 12:52:45,520:INFO:Declaring metric variables
2025-01-19 12:52:45,527:INFO:Importing untrained model
2025-01-19 12:52:45,537:INFO:Huber Regressor Imported successfully
2025-01-19 12:52:45,558:INFO:Starting cross validation
2025-01-19 12:52:45,560:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:45,883:INFO:Calculating mean and std
2025-01-19 12:52:45,883:INFO:Creating metrics dataframe
2025-01-19 12:52:45,889:INFO:Uploading results into container
2025-01-19 12:52:45,890:INFO:Uploading model into container now
2025-01-19 12:52:45,891:INFO:_master_model_container: 10
2025-01-19 12:52:45,891:INFO:_display_container: 2
2025-01-19 12:52:45,892:INFO:HuberRegressor()
2025-01-19 12:52:45,893:INFO:create_model() successfully completed......................................
2025-01-19 12:52:46,008:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:46,008:INFO:Creating metrics dataframe
2025-01-19 12:52:46,018:INFO:Initializing K Neighbors Regressor
2025-01-19 12:52:46,018:INFO:Total runtime is 0.12340658108393353 minutes
2025-01-19 12:52:46,022:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:46,022:INFO:Initializing create_model()
2025-01-19 12:52:46,022:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:46,022:INFO:Checking exceptions
2025-01-19 12:52:46,022:INFO:Importing libraries
2025-01-19 12:52:46,022:INFO:Copying training dataset
2025-01-19 12:52:46,025:INFO:Defining folds
2025-01-19 12:52:46,025:INFO:Declaring metric variables
2025-01-19 12:52:46,032:INFO:Importing untrained model
2025-01-19 12:52:46,039:INFO:K Neighbors Regressor Imported successfully
2025-01-19 12:52:46,056:INFO:Starting cross validation
2025-01-19 12:52:46,056:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:46,305:INFO:Calculating mean and std
2025-01-19 12:52:46,305:INFO:Creating metrics dataframe
2025-01-19 12:52:46,305:INFO:Uploading results into container
2025-01-19 12:52:46,305:INFO:Uploading model into container now
2025-01-19 12:52:46,305:INFO:_master_model_container: 11
2025-01-19 12:52:46,305:INFO:_display_container: 2
2025-01-19 12:52:46,310:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-19 12:52:46,310:INFO:create_model() successfully completed......................................
2025-01-19 12:52:46,388:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:46,388:INFO:Creating metrics dataframe
2025-01-19 12:52:46,397:INFO:Initializing Decision Tree Regressor
2025-01-19 12:52:46,397:INFO:Total runtime is 0.12973105907440188 minutes
2025-01-19 12:52:46,400:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:46,400:INFO:Initializing create_model()
2025-01-19 12:52:46,400:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:46,400:INFO:Checking exceptions
2025-01-19 12:52:46,400:INFO:Importing libraries
2025-01-19 12:52:46,400:INFO:Copying training dataset
2025-01-19 12:52:46,400:INFO:Defining folds
2025-01-19 12:52:46,400:INFO:Declaring metric variables
2025-01-19 12:52:46,409:INFO:Importing untrained model
2025-01-19 12:52:46,412:INFO:Decision Tree Regressor Imported successfully
2025-01-19 12:52:46,427:INFO:Starting cross validation
2025-01-19 12:52:46,429:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:46,685:INFO:Calculating mean and std
2025-01-19 12:52:46,686:INFO:Creating metrics dataframe
2025-01-19 12:52:46,689:INFO:Uploading results into container
2025-01-19 12:52:46,689:INFO:Uploading model into container now
2025-01-19 12:52:46,689:INFO:_master_model_container: 12
2025-01-19 12:52:46,689:INFO:_display_container: 2
2025-01-19 12:52:46,690:INFO:DecisionTreeRegressor(random_state=123)
2025-01-19 12:52:46,690:INFO:create_model() successfully completed......................................
2025-01-19 12:52:46,764:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:46,766:INFO:Creating metrics dataframe
2025-01-19 12:52:46,777:INFO:Initializing Random Forest Regressor
2025-01-19 12:52:46,779:INFO:Total runtime is 0.13608182271321617 minutes
2025-01-19 12:52:46,783:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:46,784:INFO:Initializing create_model()
2025-01-19 12:52:46,784:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:46,785:INFO:Checking exceptions
2025-01-19 12:52:46,785:INFO:Importing libraries
2025-01-19 12:52:46,785:INFO:Copying training dataset
2025-01-19 12:52:46,788:INFO:Defining folds
2025-01-19 12:52:46,788:INFO:Declaring metric variables
2025-01-19 12:52:46,792:INFO:Importing untrained model
2025-01-19 12:52:46,795:INFO:Random Forest Regressor Imported successfully
2025-01-19 12:52:46,824:INFO:Starting cross validation
2025-01-19 12:52:46,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:47,699:INFO:Calculating mean and std
2025-01-19 12:52:47,699:INFO:Creating metrics dataframe
2025-01-19 12:52:47,699:INFO:Uploading results into container
2025-01-19 12:52:47,699:INFO:Uploading model into container now
2025-01-19 12:52:47,699:INFO:_master_model_container: 13
2025-01-19 12:52:47,699:INFO:_display_container: 2
2025-01-19 12:52:47,699:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:52:47,699:INFO:create_model() successfully completed......................................
2025-01-19 12:52:47,772:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:47,773:INFO:Creating metrics dataframe
2025-01-19 12:52:47,785:INFO:Initializing Extra Trees Regressor
2025-01-19 12:52:47,785:INFO:Total runtime is 0.15284954309463503 minutes
2025-01-19 12:52:47,792:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:47,792:INFO:Initializing create_model()
2025-01-19 12:52:47,792:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:47,792:INFO:Checking exceptions
2025-01-19 12:52:47,792:INFO:Importing libraries
2025-01-19 12:52:47,793:INFO:Copying training dataset
2025-01-19 12:52:47,796:INFO:Defining folds
2025-01-19 12:52:47,797:INFO:Declaring metric variables
2025-01-19 12:52:47,799:INFO:Importing untrained model
2025-01-19 12:52:47,802:INFO:Extra Trees Regressor Imported successfully
2025-01-19 12:52:47,821:INFO:Starting cross validation
2025-01-19 12:52:47,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:48,748:INFO:Calculating mean and std
2025-01-19 12:52:48,748:INFO:Creating metrics dataframe
2025-01-19 12:52:48,748:INFO:Uploading results into container
2025-01-19 12:52:48,748:INFO:Uploading model into container now
2025-01-19 12:52:48,748:INFO:_master_model_container: 14
2025-01-19 12:52:48,748:INFO:_display_container: 2
2025-01-19 12:52:48,748:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:52:48,748:INFO:create_model() successfully completed......................................
2025-01-19 12:52:48,824:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:48,824:INFO:Creating metrics dataframe
2025-01-19 12:52:48,846:INFO:Initializing AdaBoost Regressor
2025-01-19 12:52:48,846:INFO:Total runtime is 0.17053725719451907 minutes
2025-01-19 12:52:48,849:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:48,850:INFO:Initializing create_model()
2025-01-19 12:52:48,850:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:48,850:INFO:Checking exceptions
2025-01-19 12:52:48,850:INFO:Importing libraries
2025-01-19 12:52:48,850:INFO:Copying training dataset
2025-01-19 12:52:48,852:INFO:Defining folds
2025-01-19 12:52:48,852:INFO:Declaring metric variables
2025-01-19 12:52:48,860:INFO:Importing untrained model
2025-01-19 12:52:48,866:INFO:AdaBoost Regressor Imported successfully
2025-01-19 12:52:48,876:INFO:Starting cross validation
2025-01-19 12:52:48,877:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:49,291:INFO:Calculating mean and std
2025-01-19 12:52:49,291:INFO:Creating metrics dataframe
2025-01-19 12:52:49,291:INFO:Uploading results into container
2025-01-19 12:52:49,291:INFO:Uploading model into container now
2025-01-19 12:52:49,291:INFO:_master_model_container: 15
2025-01-19 12:52:49,291:INFO:_display_container: 2
2025-01-19 12:52:49,297:INFO:AdaBoostRegressor(random_state=123)
2025-01-19 12:52:49,297:INFO:create_model() successfully completed......................................
2025-01-19 12:52:49,372:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:49,372:INFO:Creating metrics dataframe
2025-01-19 12:52:49,390:INFO:Initializing Gradient Boosting Regressor
2025-01-19 12:52:49,391:INFO:Total runtime is 0.17961543401082358 minutes
2025-01-19 12:52:49,394:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:49,394:INFO:Initializing create_model()
2025-01-19 12:52:49,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:49,394:INFO:Checking exceptions
2025-01-19 12:52:49,394:INFO:Importing libraries
2025-01-19 12:52:49,394:INFO:Copying training dataset
2025-01-19 12:52:49,402:INFO:Defining folds
2025-01-19 12:52:49,402:INFO:Declaring metric variables
2025-01-19 12:52:49,402:INFO:Importing untrained model
2025-01-19 12:52:49,415:INFO:Gradient Boosting Regressor Imported successfully
2025-01-19 12:52:49,422:INFO:Starting cross validation
2025-01-19 12:52:49,428:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:49,840:INFO:Calculating mean and std
2025-01-19 12:52:49,840:INFO:Creating metrics dataframe
2025-01-19 12:52:49,840:INFO:Uploading results into container
2025-01-19 12:52:49,840:INFO:Uploading model into container now
2025-01-19 12:52:49,840:INFO:_master_model_container: 16
2025-01-19 12:52:49,840:INFO:_display_container: 2
2025-01-19 12:52:49,840:INFO:GradientBoostingRegressor(random_state=123)
2025-01-19 12:52:49,840:INFO:create_model() successfully completed......................................
2025-01-19 12:52:49,913:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:49,914:INFO:Creating metrics dataframe
2025-01-19 12:52:49,922:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 12:52:49,922:INFO:Total runtime is 0.18847457965215048 minutes
2025-01-19 12:52:49,931:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:49,931:INFO:Initializing create_model()
2025-01-19 12:52:49,931:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:49,931:INFO:Checking exceptions
2025-01-19 12:52:49,931:INFO:Importing libraries
2025-01-19 12:52:49,932:INFO:Copying training dataset
2025-01-19 12:52:49,935:INFO:Defining folds
2025-01-19 12:52:49,935:INFO:Declaring metric variables
2025-01-19 12:52:49,938:INFO:Importing untrained model
2025-01-19 12:52:49,941:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 12:52:49,952:INFO:Starting cross validation
2025-01-19 12:52:49,958:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:50,699:INFO:Calculating mean and std
2025-01-19 12:52:50,700:INFO:Creating metrics dataframe
2025-01-19 12:52:50,707:INFO:Uploading results into container
2025-01-19 12:52:50,707:INFO:Uploading model into container now
2025-01-19 12:52:50,707:INFO:_master_model_container: 17
2025-01-19 12:52:50,713:INFO:_display_container: 2
2025-01-19 12:52:50,715:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:52:50,715:INFO:create_model() successfully completed......................................
2025-01-19 12:52:50,775:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:50,775:INFO:Creating metrics dataframe
2025-01-19 12:52:50,791:INFO:Initializing Dummy Regressor
2025-01-19 12:52:50,791:INFO:Total runtime is 0.2029540220896403 minutes
2025-01-19 12:52:50,791:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:50,791:INFO:Initializing create_model()
2025-01-19 12:52:50,791:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253985400>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:50,791:INFO:Checking exceptions
2025-01-19 12:52:50,791:INFO:Importing libraries
2025-01-19 12:52:50,791:INFO:Copying training dataset
2025-01-19 12:52:50,807:INFO:Defining folds
2025-01-19 12:52:50,807:INFO:Declaring metric variables
2025-01-19 12:52:50,810:INFO:Importing untrained model
2025-01-19 12:52:50,813:INFO:Dummy Regressor Imported successfully
2025-01-19 12:52:50,827:INFO:Starting cross validation
2025-01-19 12:52:50,829:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:50,992:INFO:Calculating mean and std
2025-01-19 12:52:50,992:INFO:Creating metrics dataframe
2025-01-19 12:52:50,992:INFO:Uploading results into container
2025-01-19 12:52:50,992:INFO:Uploading model into container now
2025-01-19 12:52:51,003:INFO:_master_model_container: 18
2025-01-19 12:52:51,003:INFO:_display_container: 2
2025-01-19 12:52:51,003:INFO:DummyRegressor()
2025-01-19 12:52:51,003:INFO:create_model() successfully completed......................................
2025-01-19 12:52:51,123:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:51,123:INFO:Creating metrics dataframe
2025-01-19 12:52:51,138:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 12:52:51,151:INFO:Initializing create_model()
2025-01-19 12:52:51,151:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:51,152:INFO:Checking exceptions
2025-01-19 12:52:51,154:INFO:Importing libraries
2025-01-19 12:52:51,154:INFO:Copying training dataset
2025-01-19 12:52:51,163:INFO:Defining folds
2025-01-19 12:52:51,163:INFO:Declaring metric variables
2025-01-19 12:52:51,163:INFO:Importing untrained model
2025-01-19 12:52:51,163:INFO:Declaring custom model
2025-01-19 12:52:51,164:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:52:51,166:INFO:Cross validation set to False
2025-01-19 12:52:51,166:INFO:Fitting Model
2025-01-19 12:52:51,215:INFO:BayesianRidge()
2025-01-19 12:52:51,215:INFO:create_model() successfully completed......................................
2025-01-19 12:52:51,335:INFO:_master_model_container: 18
2025-01-19 12:52:51,335:INFO:_display_container: 2
2025-01-19 12:52:51,335:INFO:BayesianRidge()
2025-01-19 12:52:51,335:INFO:compare_models() successfully completed......................................
2025-01-19 12:52:51,418:INFO:Initializing tune_model()
2025-01-19 12:52:51,419:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>)
2025-01-19 12:52:51,419:INFO:Checking exceptions
2025-01-19 12:52:51,439:INFO:Copying training dataset
2025-01-19 12:52:51,442:INFO:Checking base model
2025-01-19 12:52:51,442:INFO:Base model : Bayesian Ridge
2025-01-19 12:52:51,446:INFO:Declaring metric variables
2025-01-19 12:52:51,451:INFO:Defining Hyperparameters
2025-01-19 12:52:51,540:INFO:Tuning with n_jobs=-1
2025-01-19 12:52:51,542:INFO:Initializing RandomizedSearchCV
2025-01-19 12:52:53,179:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 12:52:53,179:INFO:Hyperparameter search completed
2025-01-19 12:52:53,179:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:53,179:INFO:Initializing create_model()
2025-01-19 12:52:53,179:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020253588040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 12:52:53,179:INFO:Checking exceptions
2025-01-19 12:52:53,179:INFO:Importing libraries
2025-01-19 12:52:53,179:INFO:Copying training dataset
2025-01-19 12:52:53,188:INFO:Defining folds
2025-01-19 12:52:53,189:INFO:Declaring metric variables
2025-01-19 12:52:53,193:INFO:Importing untrained model
2025-01-19 12:52:53,194:INFO:Declaring custom model
2025-01-19 12:52:53,200:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:52:53,217:INFO:Starting cross validation
2025-01-19 12:52:53,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:53,428:INFO:Calculating mean and std
2025-01-19 12:52:53,430:INFO:Creating metrics dataframe
2025-01-19 12:52:53,438:INFO:Finalizing model
2025-01-19 12:52:53,484:INFO:Uploading results into container
2025-01-19 12:52:53,486:INFO:Uploading model into container now
2025-01-19 12:52:53,487:INFO:_master_model_container: 19
2025-01-19 12:52:53,487:INFO:_display_container: 3
2025-01-19 12:52:53,487:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:52:53,487:INFO:create_model() successfully completed......................................
2025-01-19 12:52:53,567:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:53,574:INFO:choose_better activated
2025-01-19 12:52:53,574:INFO:SubProcess create_model() called ==================================
2025-01-19 12:52:53,574:INFO:Initializing create_model()
2025-01-19 12:52:53,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:53,574:INFO:Checking exceptions
2025-01-19 12:52:53,581:INFO:Importing libraries
2025-01-19 12:52:53,581:INFO:Copying training dataset
2025-01-19 12:52:53,582:INFO:Defining folds
2025-01-19 12:52:53,582:INFO:Declaring metric variables
2025-01-19 12:52:53,582:INFO:Importing untrained model
2025-01-19 12:52:53,582:INFO:Declaring custom model
2025-01-19 12:52:53,582:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:52:53,582:INFO:Starting cross validation
2025-01-19 12:52:53,589:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:52:53,785:INFO:Calculating mean and std
2025-01-19 12:52:53,785:INFO:Creating metrics dataframe
2025-01-19 12:52:53,788:INFO:Finalizing model
2025-01-19 12:52:53,833:INFO:Uploading results into container
2025-01-19 12:52:53,834:INFO:Uploading model into container now
2025-01-19 12:52:53,834:INFO:_master_model_container: 20
2025-01-19 12:52:53,834:INFO:_display_container: 4
2025-01-19 12:52:53,834:INFO:BayesianRidge()
2025-01-19 12:52:53,834:INFO:create_model() successfully completed......................................
2025-01-19 12:52:53,914:INFO:SubProcess create_model() end ==================================
2025-01-19 12:52:53,914:INFO:BayesianRidge() result for R2 is 0.4007
2025-01-19 12:52:53,914:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for R2 is 0.4048
2025-01-19 12:52:53,914:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 12:52:53,914:INFO:choose_better completed
2025-01-19 12:52:53,928:INFO:_master_model_container: 20
2025-01-19 12:52:53,929:INFO:_display_container: 3
2025-01-19 12:52:53,930:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:52:53,930:INFO:tune_model() successfully completed......................................
2025-01-19 12:52:54,040:INFO:Initializing plot_model()
2025-01-19 12:52:54,040:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, system=True)
2025-01-19 12:52:54,040:INFO:Checking exceptions
2025-01-19 12:52:54,046:INFO:Preloading libraries
2025-01-19 12:52:54,047:INFO:Copying training dataset
2025-01-19 12:52:54,047:INFO:Plot type: residuals
2025-01-19 12:52:54,206:INFO:Fitting Model
2025-01-19 12:52:54,208:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 12:52:54,241:INFO:Scoring test/hold-out set
2025-01-19 12:52:54,845:INFO:Visual Rendered Successfully
2025-01-19 12:52:54,929:INFO:plot_model() successfully completed......................................
2025-01-19 12:52:54,929:INFO:Initializing plot_model()
2025-01-19 12:52:54,929:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, system=True)
2025-01-19 12:52:54,929:INFO:Checking exceptions
2025-01-19 12:52:54,936:INFO:Preloading libraries
2025-01-19 12:52:54,936:INFO:Copying training dataset
2025-01-19 12:52:54,936:INFO:Plot type: error
2025-01-19 12:52:55,053:INFO:Fitting Model
2025-01-19 12:52:55,053:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 12:52:55,053:INFO:Scoring test/hold-out set
2025-01-19 12:52:55,449:INFO:Visual Rendered Successfully
2025-01-19 12:52:55,568:INFO:plot_model() successfully completed......................................
2025-01-19 12:52:55,575:INFO:Initializing plot_model()
2025-01-19 12:52:55,575:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, system=True)
2025-01-19 12:52:55,575:INFO:Checking exceptions
2025-01-19 12:52:55,575:INFO:Preloading libraries
2025-01-19 12:52:55,575:INFO:Copying training dataset
2025-01-19 12:52:55,575:INFO:Plot type: feature
2025-01-19 12:52:55,869:INFO:Visual Rendered Successfully
2025-01-19 12:52:55,975:INFO:plot_model() successfully completed......................................
2025-01-19 12:52:55,977:INFO:Initializing plot_model()
2025-01-19 12:52:55,977:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, system=True)
2025-01-19 12:52:55,977:INFO:Checking exceptions
2025-01-19 12:52:55,979:INFO:Preloading libraries
2025-01-19 12:52:55,979:INFO:Copying training dataset
2025-01-19 12:52:55,979:INFO:Plot type: cooks
2025-01-19 12:52:56,204:INFO:Fitting Model
2025-01-19 12:52:56,462:INFO:Visual Rendered Successfully
2025-01-19 12:52:56,557:INFO:plot_model() successfully completed......................................
2025-01-19 12:52:56,568:INFO:Initializing finalize_model()
2025-01-19 12:52:56,568:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-19 12:52:56,569:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:52:56,572:INFO:Initializing create_model()
2025-01-19 12:52:56,572:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:52:56,572:INFO:Checking exceptions
2025-01-19 12:52:56,574:INFO:Importing libraries
2025-01-19 12:52:56,574:INFO:Copying training dataset
2025-01-19 12:52:56,574:INFO:Defining folds
2025-01-19 12:52:56,574:INFO:Declaring metric variables
2025-01-19 12:52:56,574:INFO:Importing untrained model
2025-01-19 12:52:56,574:INFO:Declaring custom model
2025-01-19 12:52:56,574:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:52:56,574:INFO:Cross validation set to False
2025-01-19 12:52:56,574:INFO:Fitting Model
2025-01-19 12:52:56,620:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:52:56,620:INFO:create_model() successfully completed......................................
2025-01-19 12:52:56,688:INFO:_master_model_container: 20
2025-01-19 12:52:56,688:INFO:_display_container: 3
2025-01-19 12:52:56,706:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:52:56,706:INFO:finalize_model() successfully completed......................................
2025-01-19 12:52:56,796:INFO:Initializing predict_model()
2025-01-19 12:52:56,796:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000202539F1EE0>)
2025-01-19 12:52:56,796:INFO:Checking exceptions
2025-01-19 12:52:56,796:INFO:Preloading libraries
2025-01-19 12:52:56,822:INFO:Set up data.
2025-01-19 12:52:56,824:INFO:Set up index.
2025-01-19 12:52:56,840:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-19 12:54:44,562:INFO:Initializing save_model()
2025-01-19 12:54:44,562:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-19 12:54:44,562:INFO:Adding model into prep_pipe
2025-01-19 12:54:44,563:WARNING:Only Model saved as it was a pipeline.
2025-01-19 12:54:44,567:INFO:./saved_models/pycaret_best_tips_regression_model.pkl saved in current working directory
2025-01-19 12:54:44,575:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:54:44,575:INFO:save_model() successfully completed......................................
2025-01-19 12:54:44,740:INFO:Initializing load_model()
2025-01-19 12:54:44,740:INFO:load_model(model_name=./saved_models/pycaret_best_tips_regression_model, platform=None, authentication=None, verbose=True)
2025-01-19 12:54:44,771:INFO:Initializing predict_model()
2025-01-19 12:54:44,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020259282AF0>)
2025-01-19 12:54:44,773:INFO:Checking exceptions
2025-01-19 12:54:44,773:INFO:Preloading libraries
2025-01-19 12:54:44,775:INFO:Set up data.
2025-01-19 12:54:44,780:INFO:Set up index.
2025-01-19 12:54:44,796:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-19 12:55:58,956:INFO:Initializing tune_model()
2025-01-19 12:55:58,956:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>)
2025-01-19 12:55:58,957:INFO:Checking exceptions
2025-01-19 12:55:58,976:INFO:Copying training dataset
2025-01-19 12:55:58,980:INFO:Checking base model
2025-01-19 12:55:58,980:INFO:Base model : Bayesian Ridge
2025-01-19 12:55:58,985:INFO:Declaring metric variables
2025-01-19 12:55:58,989:INFO:Defining Hyperparameters
2025-01-19 12:55:59,117:INFO:Tuning with n_jobs=-1
2025-01-19 12:55:59,117:INFO:Initializing RandomizedSearchCV
2025-01-19 12:56:00,387:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 12:56:00,387:INFO:Hyperparameter search completed
2025-01-19 12:56:00,387:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:00,387:INFO:Initializing create_model()
2025-01-19 12:56:00,387:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020259642F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 12:56:00,387:INFO:Checking exceptions
2025-01-19 12:56:00,387:INFO:Importing libraries
2025-01-19 12:56:00,387:INFO:Copying training dataset
2025-01-19 12:56:00,396:INFO:Defining folds
2025-01-19 12:56:00,397:INFO:Declaring metric variables
2025-01-19 12:56:00,403:INFO:Importing untrained model
2025-01-19 12:56:00,404:INFO:Declaring custom model
2025-01-19 12:56:00,410:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:00,417:INFO:Starting cross validation
2025-01-19 12:56:00,418:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:00,589:INFO:Calculating mean and std
2025-01-19 12:56:00,589:INFO:Creating metrics dataframe
2025-01-19 12:56:00,597:INFO:Finalizing model
2025-01-19 12:56:00,666:INFO:Uploading results into container
2025-01-19 12:56:00,670:INFO:Uploading model into container now
2025-01-19 12:56:00,670:INFO:_master_model_container: 21
2025-01-19 12:56:00,670:INFO:_display_container: 6
2025-01-19 12:56:00,671:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:56:00,671:INFO:create_model() successfully completed......................................
2025-01-19 12:56:00,776:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:00,776:INFO:choose_better activated
2025-01-19 12:56:00,790:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:00,790:INFO:Initializing create_model()
2025-01-19 12:56:00,790:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020253210BE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:00,790:INFO:Checking exceptions
2025-01-19 12:56:00,790:INFO:Importing libraries
2025-01-19 12:56:00,790:INFO:Copying training dataset
2025-01-19 12:56:00,797:INFO:Defining folds
2025-01-19 12:56:00,797:INFO:Declaring metric variables
2025-01-19 12:56:00,797:INFO:Importing untrained model
2025-01-19 12:56:00,797:INFO:Declaring custom model
2025-01-19 12:56:00,798:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:00,799:INFO:Starting cross validation
2025-01-19 12:56:00,799:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:00,984:INFO:Calculating mean and std
2025-01-19 12:56:00,984:INFO:Creating metrics dataframe
2025-01-19 12:56:00,984:INFO:Finalizing model
2025-01-19 12:56:01,019:INFO:Uploading results into container
2025-01-19 12:56:01,019:INFO:Uploading model into container now
2025-01-19 12:56:01,019:INFO:_master_model_container: 22
2025-01-19 12:56:01,019:INFO:_display_container: 7
2025-01-19 12:56:01,019:INFO:BayesianRidge()
2025-01-19 12:56:01,019:INFO:create_model() successfully completed......................................
2025-01-19 12:56:01,123:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:01,123:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-19 12:56:01,123:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-19 12:56:01,123:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 12:56:01,123:INFO:choose_better completed
2025-01-19 12:56:01,137:INFO:_master_model_container: 22
2025-01-19 12:56:01,137:INFO:_display_container: 6
2025-01-19 12:56:01,137:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:56:01,137:INFO:tune_model() successfully completed......................................
2025-01-19 12:56:11,983:INFO:PyCaret RegressionExperiment
2025-01-19 12:56:11,983:INFO:Logging name: tips_regression
2025-01-19 12:56:11,983:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 12:56:11,983:INFO:version 3.3.2
2025-01-19 12:56:11,983:INFO:Initializing setup()
2025-01-19 12:56:11,983:INFO:self.USI: 7199
2025-01-19 12:56:11,983:INFO:self._variable_keys: {'fold_generator', 'USI', 'html_param', 'X', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'pipeline', 'memory', 'logging_param', 'target_param', 'gpu_param', 'y_test', 'exp_id', 'transform_target_param', 'log_plots_param', 'n_jobs_param', 'X_test', 'data', 'idx', 'X_train', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'seed', 'fold_groups_param'}
2025-01-19 12:56:11,983:INFO:Checking environment
2025-01-19 12:56:11,983:INFO:python_version: 3.9.21
2025-01-19 12:56:11,983:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 12:56:11,983:INFO:machine: AMD64
2025-01-19 12:56:11,984:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 12:56:11,984:INFO:Memory: svmem(total=8583708672, available=1004208128, percent=88.3, used=7579500544, free=1004208128)
2025-01-19 12:56:11,984:INFO:Physical Core: 4
2025-01-19 12:56:11,984:INFO:Logical Core: 4
2025-01-19 12:56:11,984:INFO:Checking libraries
2025-01-19 12:56:11,984:INFO:System:
2025-01-19 12:56:11,984:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 12:56:11,984:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 12:56:11,984:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 12:56:11,984:INFO:PyCaret required dependencies:
2025-01-19 12:56:11,984:INFO:                 pip: 24.2
2025-01-19 12:56:11,984:INFO:          setuptools: 75.1.0
2025-01-19 12:56:11,984:INFO:             pycaret: 3.3.2
2025-01-19 12:56:11,984:INFO:             IPython: 8.18.1
2025-01-19 12:56:11,984:INFO:          ipywidgets: 8.1.5
2025-01-19 12:56:11,984:INFO:                tqdm: 4.67.1
2025-01-19 12:56:11,984:INFO:               numpy: 1.26.4
2025-01-19 12:56:11,984:INFO:              pandas: 2.1.4
2025-01-19 12:56:11,984:INFO:              jinja2: 3.1.5
2025-01-19 12:56:11,984:INFO:               scipy: 1.11.4
2025-01-19 12:56:11,984:INFO:              joblib: 1.3.2
2025-01-19 12:56:11,984:INFO:             sklearn: 1.4.2
2025-01-19 12:56:11,984:INFO:                pyod: 2.0.3
2025-01-19 12:56:11,984:INFO:            imblearn: 0.12.4
2025-01-19 12:56:11,984:INFO:   category_encoders: 2.6.4
2025-01-19 12:56:11,984:INFO:            lightgbm: 4.5.0
2025-01-19 12:56:11,984:INFO:               numba: 0.60.0
2025-01-19 12:56:11,984:INFO:            requests: 2.32.3
2025-01-19 12:56:11,984:INFO:          matplotlib: 3.7.5
2025-01-19 12:56:11,984:INFO:          scikitplot: 0.3.7
2025-01-19 12:56:11,984:INFO:         yellowbrick: 1.5
2025-01-19 12:56:11,984:INFO:              plotly: 5.24.1
2025-01-19 12:56:11,984:INFO:    plotly-resampler: Not installed
2025-01-19 12:56:11,984:INFO:             kaleido: 0.2.1
2025-01-19 12:56:11,984:INFO:           schemdraw: 0.15
2025-01-19 12:56:11,984:INFO:         statsmodels: 0.14.4
2025-01-19 12:56:11,984:INFO:              sktime: 0.26.0
2025-01-19 12:56:11,984:INFO:               tbats: 1.1.3
2025-01-19 12:56:11,984:INFO:            pmdarima: 2.0.4
2025-01-19 12:56:11,984:INFO:              psutil: 6.1.1
2025-01-19 12:56:11,984:INFO:          markupsafe: 3.0.2
2025-01-19 12:56:11,984:INFO:             pickle5: Not installed
2025-01-19 12:56:11,984:INFO:         cloudpickle: 3.1.1
2025-01-19 12:56:11,984:INFO:         deprecation: 2.1.0
2025-01-19 12:56:11,984:INFO:              xxhash: 3.5.0
2025-01-19 12:56:11,984:INFO:           wurlitzer: Not installed
2025-01-19 12:56:11,984:INFO:PyCaret optional dependencies:
2025-01-19 12:56:11,984:INFO:                shap: 0.46.0
2025-01-19 12:56:11,984:INFO:           interpret: Not installed
2025-01-19 12:56:11,984:INFO:                umap: Not installed
2025-01-19 12:56:11,984:INFO:     ydata_profiling: Not installed
2025-01-19 12:56:11,984:INFO:  explainerdashboard: Not installed
2025-01-19 12:56:11,984:INFO:             autoviz: Not installed
2025-01-19 12:56:11,984:INFO:           fairlearn: Not installed
2025-01-19 12:56:11,984:INFO:          deepchecks: Not installed
2025-01-19 12:56:11,984:INFO:             xgboost: Not installed
2025-01-19 12:56:11,984:INFO:            catboost: Not installed
2025-01-19 12:56:11,984:INFO:              kmodes: Not installed
2025-01-19 12:56:11,984:INFO:             mlxtend: Not installed
2025-01-19 12:56:11,984:INFO:       statsforecast: Not installed
2025-01-19 12:56:11,984:INFO:        tune_sklearn: Not installed
2025-01-19 12:56:11,984:INFO:                 ray: Not installed
2025-01-19 12:56:11,984:INFO:            hyperopt: Not installed
2025-01-19 12:56:11,984:INFO:              optuna: Not installed
2025-01-19 12:56:11,984:INFO:               skopt: Not installed
2025-01-19 12:56:11,984:INFO:              mlflow: 2.19.0
2025-01-19 12:56:11,984:INFO:              gradio: Not installed
2025-01-19 12:56:11,984:INFO:             fastapi: Not installed
2025-01-19 12:56:11,984:INFO:             uvicorn: Not installed
2025-01-19 12:56:11,984:INFO:              m2cgen: Not installed
2025-01-19 12:56:11,984:INFO:           evidently: Not installed
2025-01-19 12:56:11,984:INFO:               fugue: Not installed
2025-01-19 12:56:11,984:INFO:           streamlit: Not installed
2025-01-19 12:56:11,984:INFO:             prophet: Not installed
2025-01-19 12:56:11,984:INFO:None
2025-01-19 12:56:11,984:INFO:Set up data.
2025-01-19 12:56:11,984:INFO:Set up folding strategy.
2025-01-19 12:56:11,984:INFO:Set up train/test split.
2025-01-19 12:56:11,984:INFO:Set up index.
2025-01-19 12:56:11,984:INFO:Assigning column types.
2025-01-19 12:56:11,984:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 12:56:11,984:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,000:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,005:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,075:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,134:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,135:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,140:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,144:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,214:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,284:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,285:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,285:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,285:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 12:56:12,334:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,345:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,526:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,587:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,589:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,589:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,596:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,604:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,693:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,762:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,762:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 12:56:12,799:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,885:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,942:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:12,942:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,942:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:12,958:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,040:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,103:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,103:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,103:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,103:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 12:56:13,192:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,387:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,389:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,485:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,545:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,546:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,546:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,546:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 12:56:13,620:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,680:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,680:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,770:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 12:56:13,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,833:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 12:56:13,970:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:13,970:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,111:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,111:INFO:Preparing preprocessing pipeline...
2025-01-19 12:56:14,111:INFO:Set up simple imputation.
2025-01-19 12:56:14,111:INFO:Set up polynomial features.
2025-01-19 12:56:14,111:INFO:Set up removing multicollinearity.
2025-01-19 12:56:14,111:INFO:Set up feature normalization.
2025-01-19 12:56:14,160:INFO:Finished creating preprocessing pipeline.
2025-01-19 12:56:14,175:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 12:56:14,175:INFO:Creating final display dataframe.
2025-01-19 12:56:14,285:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             7199
2025-01-19 12:56:14,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,410:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,562:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 12:56:14,562:INFO:setup() successfully completed in 2.58s...............
2025-01-19 12:56:14,588:INFO:Initializing compare_models()
2025-01-19 12:56:14,588:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-19 12:56:14,588:INFO:Checking exceptions
2025-01-19 12:56:14,588:INFO:Preparing display monitor
2025-01-19 12:56:14,619:INFO:Initializing Linear Regression
2025-01-19 12:56:14,619:INFO:Total runtime is 0.0 minutes
2025-01-19 12:56:14,626:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:14,626:INFO:Initializing create_model()
2025-01-19 12:56:14,626:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:14,626:INFO:Checking exceptions
2025-01-19 12:56:14,626:INFO:Importing libraries
2025-01-19 12:56:14,626:INFO:Copying training dataset
2025-01-19 12:56:14,632:INFO:Defining folds
2025-01-19 12:56:14,632:INFO:Declaring metric variables
2025-01-19 12:56:14,635:INFO:Importing untrained model
2025-01-19 12:56:14,639:INFO:Linear Regression Imported successfully
2025-01-19 12:56:14,647:INFO:Starting cross validation
2025-01-19 12:56:14,648:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:14,844:INFO:Calculating mean and std
2025-01-19 12:56:14,845:INFO:Creating metrics dataframe
2025-01-19 12:56:14,848:INFO:Uploading results into container
2025-01-19 12:56:14,849:INFO:Uploading model into container now
2025-01-19 12:56:14,849:INFO:_master_model_container: 1
2025-01-19 12:56:14,849:INFO:_display_container: 2
2025-01-19 12:56:14,849:INFO:LinearRegression(n_jobs=-1)
2025-01-19 12:56:14,850:INFO:create_model() successfully completed......................................
2025-01-19 12:56:14,943:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:14,943:INFO:Creating metrics dataframe
2025-01-19 12:56:14,943:INFO:Initializing Lasso Regression
2025-01-19 12:56:14,943:INFO:Total runtime is 0.005403455098470052 minutes
2025-01-19 12:56:14,959:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:14,959:INFO:Initializing create_model()
2025-01-19 12:56:14,959:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:14,959:INFO:Checking exceptions
2025-01-19 12:56:14,959:INFO:Importing libraries
2025-01-19 12:56:14,959:INFO:Copying training dataset
2025-01-19 12:56:14,959:INFO:Defining folds
2025-01-19 12:56:14,959:INFO:Declaring metric variables
2025-01-19 12:56:14,959:INFO:Importing untrained model
2025-01-19 12:56:14,972:INFO:Lasso Regression Imported successfully
2025-01-19 12:56:14,978:INFO:Starting cross validation
2025-01-19 12:56:14,980:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:15,168:INFO:Calculating mean and std
2025-01-19 12:56:15,168:INFO:Creating metrics dataframe
2025-01-19 12:56:15,168:INFO:Uploading results into container
2025-01-19 12:56:15,168:INFO:Uploading model into container now
2025-01-19 12:56:15,168:INFO:_master_model_container: 2
2025-01-19 12:56:15,168:INFO:_display_container: 2
2025-01-19 12:56:15,168:INFO:Lasso(random_state=123)
2025-01-19 12:56:15,168:INFO:create_model() successfully completed......................................
2025-01-19 12:56:15,269:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:15,269:INFO:Creating metrics dataframe
2025-01-19 12:56:15,269:INFO:Initializing Ridge Regression
2025-01-19 12:56:15,269:INFO:Total runtime is 0.010836013158162435 minutes
2025-01-19 12:56:15,269:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:15,283:INFO:Initializing create_model()
2025-01-19 12:56:15,283:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:15,283:INFO:Checking exceptions
2025-01-19 12:56:15,283:INFO:Importing libraries
2025-01-19 12:56:15,283:INFO:Copying training dataset
2025-01-19 12:56:15,287:INFO:Defining folds
2025-01-19 12:56:15,287:INFO:Declaring metric variables
2025-01-19 12:56:15,290:INFO:Importing untrained model
2025-01-19 12:56:15,293:INFO:Ridge Regression Imported successfully
2025-01-19 12:56:15,297:INFO:Starting cross validation
2025-01-19 12:56:15,297:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:15,465:INFO:Calculating mean and std
2025-01-19 12:56:15,465:INFO:Creating metrics dataframe
2025-01-19 12:56:15,465:INFO:Uploading results into container
2025-01-19 12:56:15,465:INFO:Uploading model into container now
2025-01-19 12:56:15,465:INFO:_master_model_container: 3
2025-01-19 12:56:15,465:INFO:_display_container: 2
2025-01-19 12:56:15,465:INFO:Ridge(random_state=123)
2025-01-19 12:56:15,465:INFO:create_model() successfully completed......................................
2025-01-19 12:56:15,548:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:15,548:INFO:Creating metrics dataframe
2025-01-19 12:56:15,564:INFO:Initializing Elastic Net
2025-01-19 12:56:15,564:INFO:Total runtime is 0.015753952662150066 minutes
2025-01-19 12:56:15,564:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:15,564:INFO:Initializing create_model()
2025-01-19 12:56:15,564:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:15,564:INFO:Checking exceptions
2025-01-19 12:56:15,564:INFO:Importing libraries
2025-01-19 12:56:15,564:INFO:Copying training dataset
2025-01-19 12:56:15,575:INFO:Defining folds
2025-01-19 12:56:15,575:INFO:Declaring metric variables
2025-01-19 12:56:15,575:INFO:Importing untrained model
2025-01-19 12:56:15,584:INFO:Elastic Net Imported successfully
2025-01-19 12:56:15,591:INFO:Starting cross validation
2025-01-19 12:56:15,592:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:15,765:INFO:Calculating mean and std
2025-01-19 12:56:15,765:INFO:Creating metrics dataframe
2025-01-19 12:56:15,765:INFO:Uploading results into container
2025-01-19 12:56:15,765:INFO:Uploading model into container now
2025-01-19 12:56:15,765:INFO:_master_model_container: 4
2025-01-19 12:56:15,765:INFO:_display_container: 2
2025-01-19 12:56:15,765:INFO:ElasticNet(random_state=123)
2025-01-19 12:56:15,765:INFO:create_model() successfully completed......................................
2025-01-19 12:56:15,861:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:15,869:INFO:Creating metrics dataframe
2025-01-19 12:56:15,880:INFO:Initializing Least Angle Regression
2025-01-19 12:56:15,881:INFO:Total runtime is 0.02103883425394694 minutes
2025-01-19 12:56:15,882:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:15,882:INFO:Initializing create_model()
2025-01-19 12:56:15,882:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:15,882:INFO:Checking exceptions
2025-01-19 12:56:15,882:INFO:Importing libraries
2025-01-19 12:56:15,882:INFO:Copying training dataset
2025-01-19 12:56:15,891:INFO:Defining folds
2025-01-19 12:56:15,891:INFO:Declaring metric variables
2025-01-19 12:56:15,895:INFO:Importing untrained model
2025-01-19 12:56:15,899:INFO:Least Angle Regression Imported successfully
2025-01-19 12:56:15,908:INFO:Starting cross validation
2025-01-19 12:56:15,910:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:16,137:INFO:Calculating mean and std
2025-01-19 12:56:16,139:INFO:Creating metrics dataframe
2025-01-19 12:56:16,140:INFO:Uploading results into container
2025-01-19 12:56:16,141:INFO:Uploading model into container now
2025-01-19 12:56:16,141:INFO:_master_model_container: 5
2025-01-19 12:56:16,141:INFO:_display_container: 2
2025-01-19 12:56:16,142:INFO:Lars(random_state=123)
2025-01-19 12:56:16,142:INFO:create_model() successfully completed......................................
2025-01-19 12:56:16,248:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:16,248:INFO:Creating metrics dataframe
2025-01-19 12:56:16,263:INFO:Initializing Lasso Least Angle Regression
2025-01-19 12:56:16,263:INFO:Total runtime is 0.02740113337834676 minutes
2025-01-19 12:56:16,267:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:16,267:INFO:Initializing create_model()
2025-01-19 12:56:16,267:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:16,268:INFO:Checking exceptions
2025-01-19 12:56:16,268:INFO:Importing libraries
2025-01-19 12:56:16,268:INFO:Copying training dataset
2025-01-19 12:56:16,272:INFO:Defining folds
2025-01-19 12:56:16,272:INFO:Declaring metric variables
2025-01-19 12:56:16,276:INFO:Importing untrained model
2025-01-19 12:56:16,281:INFO:Lasso Least Angle Regression Imported successfully
2025-01-19 12:56:16,290:INFO:Starting cross validation
2025-01-19 12:56:16,291:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:16,475:INFO:Calculating mean and std
2025-01-19 12:56:16,475:INFO:Creating metrics dataframe
2025-01-19 12:56:16,481:INFO:Uploading results into container
2025-01-19 12:56:16,481:INFO:Uploading model into container now
2025-01-19 12:56:16,484:INFO:_master_model_container: 6
2025-01-19 12:56:16,484:INFO:_display_container: 2
2025-01-19 12:56:16,484:INFO:LassoLars(random_state=123)
2025-01-19 12:56:16,484:INFO:create_model() successfully completed......................................
2025-01-19 12:56:16,578:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:16,578:INFO:Creating metrics dataframe
2025-01-19 12:56:16,588:INFO:Initializing Orthogonal Matching Pursuit
2025-01-19 12:56:16,588:INFO:Total runtime is 0.0328290065129598 minutes
2025-01-19 12:56:16,591:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:16,592:INFO:Initializing create_model()
2025-01-19 12:56:16,592:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:16,592:INFO:Checking exceptions
2025-01-19 12:56:16,592:INFO:Importing libraries
2025-01-19 12:56:16,592:INFO:Copying training dataset
2025-01-19 12:56:16,595:INFO:Defining folds
2025-01-19 12:56:16,595:INFO:Declaring metric variables
2025-01-19 12:56:16,602:INFO:Importing untrained model
2025-01-19 12:56:16,603:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-19 12:56:16,610:INFO:Starting cross validation
2025-01-19 12:56:16,610:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:16,875:INFO:Calculating mean and std
2025-01-19 12:56:16,876:INFO:Creating metrics dataframe
2025-01-19 12:56:16,882:INFO:Uploading results into container
2025-01-19 12:56:16,882:INFO:Uploading model into container now
2025-01-19 12:56:16,882:INFO:_master_model_container: 7
2025-01-19 12:56:16,882:INFO:_display_container: 2
2025-01-19 12:56:16,882:INFO:OrthogonalMatchingPursuit()
2025-01-19 12:56:16,882:INFO:create_model() successfully completed......................................
2025-01-19 12:56:16,985:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:16,986:INFO:Creating metrics dataframe
2025-01-19 12:56:16,996:INFO:Initializing Bayesian Ridge
2025-01-19 12:56:16,997:INFO:Total runtime is 0.0396322766939799 minutes
2025-01-19 12:56:16,998:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:16,998:INFO:Initializing create_model()
2025-01-19 12:56:16,998:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:16,998:INFO:Checking exceptions
2025-01-19 12:56:16,998:INFO:Importing libraries
2025-01-19 12:56:16,998:INFO:Copying training dataset
2025-01-19 12:56:17,005:INFO:Defining folds
2025-01-19 12:56:17,005:INFO:Declaring metric variables
2025-01-19 12:56:17,011:INFO:Importing untrained model
2025-01-19 12:56:17,013:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:17,019:INFO:Starting cross validation
2025-01-19 12:56:17,027:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:17,200:INFO:Calculating mean and std
2025-01-19 12:56:17,202:INFO:Creating metrics dataframe
2025-01-19 12:56:17,207:INFO:Uploading results into container
2025-01-19 12:56:17,208:INFO:Uploading model into container now
2025-01-19 12:56:17,208:INFO:_master_model_container: 8
2025-01-19 12:56:17,208:INFO:_display_container: 2
2025-01-19 12:56:17,208:INFO:BayesianRidge()
2025-01-19 12:56:17,208:INFO:create_model() successfully completed......................................
2025-01-19 12:56:17,297:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:17,297:INFO:Creating metrics dataframe
2025-01-19 12:56:17,313:INFO:Initializing Passive Aggressive Regressor
2025-01-19 12:56:17,313:INFO:Total runtime is 0.044898271560668945 minutes
2025-01-19 12:56:17,325:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:17,325:INFO:Initializing create_model()
2025-01-19 12:56:17,325:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:17,325:INFO:Checking exceptions
2025-01-19 12:56:17,325:INFO:Importing libraries
2025-01-19 12:56:17,325:INFO:Copying training dataset
2025-01-19 12:56:17,336:INFO:Defining folds
2025-01-19 12:56:17,336:INFO:Declaring metric variables
2025-01-19 12:56:17,340:INFO:Importing untrained model
2025-01-19 12:56:17,346:INFO:Passive Aggressive Regressor Imported successfully
2025-01-19 12:56:17,357:INFO:Starting cross validation
2025-01-19 12:56:17,359:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:17,540:INFO:Calculating mean and std
2025-01-19 12:56:17,541:INFO:Creating metrics dataframe
2025-01-19 12:56:17,543:INFO:Uploading results into container
2025-01-19 12:56:17,544:INFO:Uploading model into container now
2025-01-19 12:56:17,544:INFO:_master_model_container: 9
2025-01-19 12:56:17,544:INFO:_display_container: 2
2025-01-19 12:56:17,544:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-19 12:56:17,545:INFO:create_model() successfully completed......................................
2025-01-19 12:56:17,639:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:17,639:INFO:Creating metrics dataframe
2025-01-19 12:56:17,652:INFO:Initializing Huber Regressor
2025-01-19 12:56:17,652:INFO:Total runtime is 0.050554474194844566 minutes
2025-01-19 12:56:17,655:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:17,656:INFO:Initializing create_model()
2025-01-19 12:56:17,656:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:17,656:INFO:Checking exceptions
2025-01-19 12:56:17,656:INFO:Importing libraries
2025-01-19 12:56:17,656:INFO:Copying training dataset
2025-01-19 12:56:17,660:INFO:Defining folds
2025-01-19 12:56:17,660:INFO:Declaring metric variables
2025-01-19 12:56:17,664:INFO:Importing untrained model
2025-01-19 12:56:17,665:INFO:Huber Regressor Imported successfully
2025-01-19 12:56:17,672:INFO:Starting cross validation
2025-01-19 12:56:17,672:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:17,903:INFO:Calculating mean and std
2025-01-19 12:56:17,903:INFO:Creating metrics dataframe
2025-01-19 12:56:17,903:INFO:Uploading results into container
2025-01-19 12:56:17,903:INFO:Uploading model into container now
2025-01-19 12:56:17,903:INFO:_master_model_container: 10
2025-01-19 12:56:17,903:INFO:_display_container: 2
2025-01-19 12:56:17,903:INFO:HuberRegressor()
2025-01-19 12:56:17,903:INFO:create_model() successfully completed......................................
2025-01-19 12:56:17,998:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:18,007:INFO:Creating metrics dataframe
2025-01-19 12:56:18,013:INFO:Initializing K Neighbors Regressor
2025-01-19 12:56:18,013:INFO:Total runtime is 0.05657920440038045 minutes
2025-01-19 12:56:18,022:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:18,022:INFO:Initializing create_model()
2025-01-19 12:56:18,022:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:18,022:INFO:Checking exceptions
2025-01-19 12:56:18,023:INFO:Importing libraries
2025-01-19 12:56:18,023:INFO:Copying training dataset
2025-01-19 12:56:18,027:INFO:Defining folds
2025-01-19 12:56:18,027:INFO:Declaring metric variables
2025-01-19 12:56:18,031:INFO:Importing untrained model
2025-01-19 12:56:18,035:INFO:K Neighbors Regressor Imported successfully
2025-01-19 12:56:18,043:INFO:Starting cross validation
2025-01-19 12:56:18,044:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:18,264:INFO:Calculating mean and std
2025-01-19 12:56:18,264:INFO:Creating metrics dataframe
2025-01-19 12:56:18,264:INFO:Uploading results into container
2025-01-19 12:56:18,264:INFO:Uploading model into container now
2025-01-19 12:56:18,264:INFO:_master_model_container: 11
2025-01-19 12:56:18,264:INFO:_display_container: 2
2025-01-19 12:56:18,264:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-19 12:56:18,271:INFO:create_model() successfully completed......................................
2025-01-19 12:56:18,362:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:18,362:INFO:Creating metrics dataframe
2025-01-19 12:56:18,384:INFO:Initializing Decision Tree Regressor
2025-01-19 12:56:18,384:INFO:Total runtime is 0.06276185909907023 minutes
2025-01-19 12:56:18,388:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:18,388:INFO:Initializing create_model()
2025-01-19 12:56:18,388:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:18,388:INFO:Checking exceptions
2025-01-19 12:56:18,389:INFO:Importing libraries
2025-01-19 12:56:18,389:INFO:Copying training dataset
2025-01-19 12:56:18,393:INFO:Defining folds
2025-01-19 12:56:18,393:INFO:Declaring metric variables
2025-01-19 12:56:18,398:INFO:Importing untrained model
2025-01-19 12:56:18,401:INFO:Decision Tree Regressor Imported successfully
2025-01-19 12:56:18,408:INFO:Starting cross validation
2025-01-19 12:56:18,409:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:18,588:INFO:Calculating mean and std
2025-01-19 12:56:18,590:INFO:Creating metrics dataframe
2025-01-19 12:56:18,592:INFO:Uploading results into container
2025-01-19 12:56:18,592:INFO:Uploading model into container now
2025-01-19 12:56:18,592:INFO:_master_model_container: 12
2025-01-19 12:56:18,592:INFO:_display_container: 2
2025-01-19 12:56:18,593:INFO:DecisionTreeRegressor(random_state=123)
2025-01-19 12:56:18,593:INFO:create_model() successfully completed......................................
2025-01-19 12:56:18,694:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:18,694:INFO:Creating metrics dataframe
2025-01-19 12:56:18,708:INFO:Initializing Random Forest Regressor
2025-01-19 12:56:18,709:INFO:Total runtime is 0.06817775170008342 minutes
2025-01-19 12:56:18,712:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:18,712:INFO:Initializing create_model()
2025-01-19 12:56:18,713:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:18,713:INFO:Checking exceptions
2025-01-19 12:56:18,713:INFO:Importing libraries
2025-01-19 12:56:18,713:INFO:Copying training dataset
2025-01-19 12:56:18,717:INFO:Defining folds
2025-01-19 12:56:18,717:INFO:Declaring metric variables
2025-01-19 12:56:18,722:INFO:Importing untrained model
2025-01-19 12:56:18,723:INFO:Random Forest Regressor Imported successfully
2025-01-19 12:56:18,734:INFO:Starting cross validation
2025-01-19 12:56:18,736:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:19,514:INFO:Calculating mean and std
2025-01-19 12:56:19,514:INFO:Creating metrics dataframe
2025-01-19 12:56:19,514:INFO:Uploading results into container
2025-01-19 12:56:19,514:INFO:Uploading model into container now
2025-01-19 12:56:19,514:INFO:_master_model_container: 13
2025-01-19 12:56:19,514:INFO:_display_container: 2
2025-01-19 12:56:19,514:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:56:19,514:INFO:create_model() successfully completed......................................
2025-01-19 12:56:19,604:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:19,604:INFO:Creating metrics dataframe
2025-01-19 12:56:19,618:INFO:Initializing Extra Trees Regressor
2025-01-19 12:56:19,619:INFO:Total runtime is 0.08334339459737142 minutes
2025-01-19 12:56:19,624:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:19,624:INFO:Initializing create_model()
2025-01-19 12:56:19,624:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:19,624:INFO:Checking exceptions
2025-01-19 12:56:19,624:INFO:Importing libraries
2025-01-19 12:56:19,624:INFO:Copying training dataset
2025-01-19 12:56:19,624:INFO:Defining folds
2025-01-19 12:56:19,624:INFO:Declaring metric variables
2025-01-19 12:56:19,632:INFO:Importing untrained model
2025-01-19 12:56:19,637:INFO:Extra Trees Regressor Imported successfully
2025-01-19 12:56:19,643:INFO:Starting cross validation
2025-01-19 12:56:19,645:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:20,563:INFO:Calculating mean and std
2025-01-19 12:56:20,563:INFO:Creating metrics dataframe
2025-01-19 12:56:20,563:INFO:Uploading results into container
2025-01-19 12:56:20,563:INFO:Uploading model into container now
2025-01-19 12:56:20,563:INFO:_master_model_container: 14
2025-01-19 12:56:20,563:INFO:_display_container: 2
2025-01-19 12:56:20,563:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:56:20,563:INFO:create_model() successfully completed......................................
2025-01-19 12:56:20,660:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:20,660:INFO:Creating metrics dataframe
2025-01-19 12:56:20,680:INFO:Initializing AdaBoost Regressor
2025-01-19 12:56:20,680:INFO:Total runtime is 0.1010219653447469 minutes
2025-01-19 12:56:20,683:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:20,683:INFO:Initializing create_model()
2025-01-19 12:56:20,683:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:20,684:INFO:Checking exceptions
2025-01-19 12:56:20,684:INFO:Importing libraries
2025-01-19 12:56:20,684:INFO:Copying training dataset
2025-01-19 12:56:20,688:INFO:Defining folds
2025-01-19 12:56:20,688:INFO:Declaring metric variables
2025-01-19 12:56:20,693:INFO:Importing untrained model
2025-01-19 12:56:20,693:INFO:AdaBoost Regressor Imported successfully
2025-01-19 12:56:20,699:INFO:Starting cross validation
2025-01-19 12:56:20,699:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:21,064:INFO:Calculating mean and std
2025-01-19 12:56:21,064:INFO:Creating metrics dataframe
2025-01-19 12:56:21,064:INFO:Uploading results into container
2025-01-19 12:56:21,064:INFO:Uploading model into container now
2025-01-19 12:56:21,070:INFO:_master_model_container: 15
2025-01-19 12:56:21,070:INFO:_display_container: 2
2025-01-19 12:56:21,071:INFO:AdaBoostRegressor(random_state=123)
2025-01-19 12:56:21,071:INFO:create_model() successfully completed......................................
2025-01-19 12:56:21,166:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:21,166:INFO:Creating metrics dataframe
2025-01-19 12:56:21,166:INFO:Initializing Gradient Boosting Regressor
2025-01-19 12:56:21,166:INFO:Total runtime is 0.10912810166676838 minutes
2025-01-19 12:56:21,182:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:21,183:INFO:Initializing create_model()
2025-01-19 12:56:21,183:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:21,183:INFO:Checking exceptions
2025-01-19 12:56:21,183:INFO:Importing libraries
2025-01-19 12:56:21,184:INFO:Copying training dataset
2025-01-19 12:56:21,189:INFO:Defining folds
2025-01-19 12:56:21,189:INFO:Declaring metric variables
2025-01-19 12:56:21,192:INFO:Importing untrained model
2025-01-19 12:56:21,192:INFO:Gradient Boosting Regressor Imported successfully
2025-01-19 12:56:21,206:INFO:Starting cross validation
2025-01-19 12:56:21,209:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:21,579:INFO:Calculating mean and std
2025-01-19 12:56:21,579:INFO:Creating metrics dataframe
2025-01-19 12:56:21,583:INFO:Uploading results into container
2025-01-19 12:56:21,584:INFO:Uploading model into container now
2025-01-19 12:56:21,585:INFO:_master_model_container: 16
2025-01-19 12:56:21,585:INFO:_display_container: 2
2025-01-19 12:56:21,586:INFO:GradientBoostingRegressor(random_state=123)
2025-01-19 12:56:21,586:INFO:create_model() successfully completed......................................
2025-01-19 12:56:21,685:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:21,685:INFO:Creating metrics dataframe
2025-01-19 12:56:21,692:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 12:56:21,692:INFO:Total runtime is 0.11789570252100626 minutes
2025-01-19 12:56:21,692:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:21,692:INFO:Initializing create_model()
2025-01-19 12:56:21,692:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:21,692:INFO:Checking exceptions
2025-01-19 12:56:21,692:INFO:Importing libraries
2025-01-19 12:56:21,692:INFO:Copying training dataset
2025-01-19 12:56:21,692:INFO:Defining folds
2025-01-19 12:56:21,692:INFO:Declaring metric variables
2025-01-19 12:56:21,709:INFO:Importing untrained model
2025-01-19 12:56:21,714:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 12:56:21,714:INFO:Starting cross validation
2025-01-19 12:56:21,720:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:22,201:INFO:Calculating mean and std
2025-01-19 12:56:22,201:INFO:Creating metrics dataframe
2025-01-19 12:56:22,201:INFO:Uploading results into container
2025-01-19 12:56:22,201:INFO:Uploading model into container now
2025-01-19 12:56:22,201:INFO:_master_model_container: 17
2025-01-19 12:56:22,201:INFO:_display_container: 2
2025-01-19 12:56:22,201:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-19 12:56:22,201:INFO:create_model() successfully completed......................................
2025-01-19 12:56:22,310:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:22,311:INFO:Creating metrics dataframe
2025-01-19 12:56:22,325:INFO:Initializing Dummy Regressor
2025-01-19 12:56:22,325:INFO:Total runtime is 0.1284316619237264 minutes
2025-01-19 12:56:22,330:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:22,330:INFO:Initializing create_model()
2025-01-19 12:56:22,330:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025362D790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:22,330:INFO:Checking exceptions
2025-01-19 12:56:22,330:INFO:Importing libraries
2025-01-19 12:56:22,330:INFO:Copying training dataset
2025-01-19 12:56:22,336:INFO:Defining folds
2025-01-19 12:56:22,336:INFO:Declaring metric variables
2025-01-19 12:56:22,340:INFO:Importing untrained model
2025-01-19 12:56:22,347:INFO:Dummy Regressor Imported successfully
2025-01-19 12:56:22,355:INFO:Starting cross validation
2025-01-19 12:56:22,356:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:22,513:INFO:Calculating mean and std
2025-01-19 12:56:22,513:INFO:Creating metrics dataframe
2025-01-19 12:56:22,513:INFO:Uploading results into container
2025-01-19 12:56:22,513:INFO:Uploading model into container now
2025-01-19 12:56:22,513:INFO:_master_model_container: 18
2025-01-19 12:56:22,513:INFO:_display_container: 2
2025-01-19 12:56:22,513:INFO:DummyRegressor()
2025-01-19 12:56:22,513:INFO:create_model() successfully completed......................................
2025-01-19 12:56:22,616:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:22,616:INFO:Creating metrics dataframe
2025-01-19 12:56:22,631:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 12:56:22,639:INFO:Initializing create_model()
2025-01-19 12:56:22,639:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:22,639:INFO:Checking exceptions
2025-01-19 12:56:22,643:INFO:Importing libraries
2025-01-19 12:56:22,643:INFO:Copying training dataset
2025-01-19 12:56:22,648:INFO:Defining folds
2025-01-19 12:56:22,648:INFO:Declaring metric variables
2025-01-19 12:56:22,648:INFO:Importing untrained model
2025-01-19 12:56:22,648:INFO:Declaring custom model
2025-01-19 12:56:22,648:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:22,649:INFO:Cross validation set to False
2025-01-19 12:56:22,650:INFO:Fitting Model
2025-01-19 12:56:22,680:INFO:BayesianRidge()
2025-01-19 12:56:22,680:INFO:create_model() successfully completed......................................
2025-01-19 12:56:22,811:INFO:_master_model_container: 18
2025-01-19 12:56:22,811:INFO:_display_container: 2
2025-01-19 12:56:22,811:INFO:BayesianRidge()
2025-01-19 12:56:22,811:INFO:compare_models() successfully completed......................................
2025-01-19 12:56:25,082:INFO:Initializing tune_model()
2025-01-19 12:56:25,083:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>)
2025-01-19 12:56:25,083:INFO:Checking exceptions
2025-01-19 12:56:25,099:INFO:Copying training dataset
2025-01-19 12:56:25,104:INFO:Checking base model
2025-01-19 12:56:25,104:INFO:Base model : Bayesian Ridge
2025-01-19 12:56:25,108:INFO:Declaring metric variables
2025-01-19 12:56:25,112:INFO:Defining Hyperparameters
2025-01-19 12:56:25,229:INFO:Tuning with n_jobs=-1
2025-01-19 12:56:25,229:INFO:Initializing RandomizedSearchCV
2025-01-19 12:56:26,963:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 12:56:26,963:INFO:Hyperparameter search completed
2025-01-19 12:56:26,963:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:26,972:INFO:Initializing create_model()
2025-01-19 12:56:26,972:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020258F8B220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 12:56:26,972:INFO:Checking exceptions
2025-01-19 12:56:26,972:INFO:Importing libraries
2025-01-19 12:56:26,972:INFO:Copying training dataset
2025-01-19 12:56:26,979:INFO:Defining folds
2025-01-19 12:56:26,979:INFO:Declaring metric variables
2025-01-19 12:56:26,985:INFO:Importing untrained model
2025-01-19 12:56:26,985:INFO:Declaring custom model
2025-01-19 12:56:26,992:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:27,001:INFO:Starting cross validation
2025-01-19 12:56:27,002:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:27,334:INFO:Calculating mean and std
2025-01-19 12:56:27,334:INFO:Creating metrics dataframe
2025-01-19 12:56:27,339:INFO:Finalizing model
2025-01-19 12:56:27,396:INFO:Uploading results into container
2025-01-19 12:56:27,396:INFO:Uploading model into container now
2025-01-19 12:56:27,396:INFO:_master_model_container: 19
2025-01-19 12:56:27,396:INFO:_display_container: 3
2025-01-19 12:56:27,396:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:56:27,396:INFO:create_model() successfully completed......................................
2025-01-19 12:56:27,524:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:27,524:INFO:choose_better activated
2025-01-19 12:56:27,527:INFO:SubProcess create_model() called ==================================
2025-01-19 12:56:27,527:INFO:Initializing create_model()
2025-01-19 12:56:27,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:27,527:INFO:Checking exceptions
2025-01-19 12:56:27,527:INFO:Importing libraries
2025-01-19 12:56:27,527:INFO:Copying training dataset
2025-01-19 12:56:27,533:INFO:Defining folds
2025-01-19 12:56:27,533:INFO:Declaring metric variables
2025-01-19 12:56:27,533:INFO:Importing untrained model
2025-01-19 12:56:27,533:INFO:Declaring custom model
2025-01-19 12:56:27,533:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:27,533:INFO:Starting cross validation
2025-01-19 12:56:27,533:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 12:56:27,734:INFO:Calculating mean and std
2025-01-19 12:56:27,734:INFO:Creating metrics dataframe
2025-01-19 12:56:27,734:INFO:Finalizing model
2025-01-19 12:56:27,769:INFO:Uploading results into container
2025-01-19 12:56:27,769:INFO:Uploading model into container now
2025-01-19 12:56:27,769:INFO:_master_model_container: 20
2025-01-19 12:56:27,769:INFO:_display_container: 4
2025-01-19 12:56:27,769:INFO:BayesianRidge()
2025-01-19 12:56:27,769:INFO:create_model() successfully completed......................................
2025-01-19 12:56:27,880:INFO:SubProcess create_model() end ==================================
2025-01-19 12:56:27,880:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-19 12:56:27,880:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-19 12:56:27,880:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 12:56:27,880:INFO:choose_better completed
2025-01-19 12:56:27,894:INFO:_master_model_container: 20
2025-01-19 12:56:27,894:INFO:_display_container: 3
2025-01-19 12:56:27,894:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:56:27,894:INFO:tune_model() successfully completed......................................
2025-01-19 12:56:28,035:INFO:Initializing plot_model()
2025-01-19 12:56:28,036:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, system=True)
2025-01-19 12:56:28,036:INFO:Checking exceptions
2025-01-19 12:56:28,041:INFO:Preloading libraries
2025-01-19 12:56:28,042:INFO:Copying training dataset
2025-01-19 12:56:28,042:INFO:Plot type: residuals
2025-01-19 12:56:28,167:INFO:Fitting Model
2025-01-19 12:56:28,167:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 12:56:28,224:INFO:Scoring test/hold-out set
2025-01-19 12:56:28,616:INFO:Visual Rendered Successfully
2025-01-19 12:56:28,764:INFO:plot_model() successfully completed......................................
2025-01-19 12:56:28,764:INFO:Initializing plot_model()
2025-01-19 12:56:28,764:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, system=True)
2025-01-19 12:56:28,764:INFO:Checking exceptions
2025-01-19 12:56:28,772:INFO:Preloading libraries
2025-01-19 12:56:28,773:INFO:Copying training dataset
2025-01-19 12:56:28,773:INFO:Plot type: error
2025-01-19 12:56:28,895:INFO:Fitting Model
2025-01-19 12:56:28,895:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 12:56:28,895:INFO:Scoring test/hold-out set
2025-01-19 12:56:29,161:INFO:Visual Rendered Successfully
2025-01-19 12:56:29,324:INFO:plot_model() successfully completed......................................
2025-01-19 12:56:29,331:INFO:Initializing plot_model()
2025-01-19 12:56:29,331:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, system=True)
2025-01-19 12:56:29,331:INFO:Checking exceptions
2025-01-19 12:56:29,332:INFO:Preloading libraries
2025-01-19 12:56:29,332:INFO:Copying training dataset
2025-01-19 12:56:29,332:INFO:Plot type: feature
2025-01-19 12:56:29,552:INFO:Visual Rendered Successfully
2025-01-19 12:56:29,651:INFO:plot_model() successfully completed......................................
2025-01-19 12:56:29,651:INFO:Initializing plot_model()
2025-01-19 12:56:29,651:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, system=True)
2025-01-19 12:56:29,651:INFO:Checking exceptions
2025-01-19 12:56:29,651:INFO:Preloading libraries
2025-01-19 12:56:29,651:INFO:Copying training dataset
2025-01-19 12:56:29,651:INFO:Plot type: cooks
2025-01-19 12:56:29,810:INFO:Fitting Model
2025-01-19 12:56:30,019:INFO:Visual Rendered Successfully
2025-01-19 12:56:30,208:INFO:plot_model() successfully completed......................................
2025-01-19 12:56:30,226:INFO:Initializing finalize_model()
2025-01-19 12:56:30,226:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-19 12:56:30,226:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 12:56:30,231:INFO:Initializing create_model()
2025-01-19 12:56:30,232:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 12:56:30,232:INFO:Checking exceptions
2025-01-19 12:56:30,234:INFO:Importing libraries
2025-01-19 12:56:30,234:INFO:Copying training dataset
2025-01-19 12:56:30,235:INFO:Defining folds
2025-01-19 12:56:30,235:INFO:Declaring metric variables
2025-01-19 12:56:30,236:INFO:Importing untrained model
2025-01-19 12:56:30,236:INFO:Declaring custom model
2025-01-19 12:56:30,236:INFO:Bayesian Ridge Imported successfully
2025-01-19 12:56:30,237:INFO:Cross validation set to False
2025-01-19 12:56:30,237:INFO:Fitting Model
2025-01-19 12:56:30,284:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:56:30,284:INFO:create_model() successfully completed......................................
2025-01-19 12:56:30,382:INFO:_master_model_container: 20
2025-01-19 12:56:30,382:INFO:_display_container: 3
2025-01-19 12:56:30,389:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:56:30,390:INFO:finalize_model() successfully completed......................................
2025-01-19 12:56:30,498:INFO:Initializing predict_model()
2025-01-19 12:56:30,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020253AEE820>)
2025-01-19 12:56:30,498:INFO:Checking exceptions
2025-01-19 12:56:30,498:INFO:Preloading libraries
2025-01-19 12:56:30,498:INFO:Set up data.
2025-01-19 12:56:30,505:INFO:Set up index.
2025-01-19 12:56:30,505:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-19 12:56:30,792:INFO:Initializing save_model()
2025-01-19 12:56:30,792:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-19 12:56:30,792:INFO:Adding model into prep_pipe
2025-01-19 12:56:30,792:WARNING:Only Model saved as it was a pipeline.
2025-01-19 12:56:30,801:INFO:./saved_models/pycaret_best_tips_regression_model.pkl saved in current working directory
2025-01-19 12:56:30,841:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 12:56:30,842:INFO:save_model() successfully completed......................................
2025-01-19 12:56:31,179:INFO:Initializing load_model()
2025-01-19 12:56:31,179:INFO:load_model(model_name=./saved_models/pycaret_best_tips_regression_model, platform=None, authentication=None, verbose=True)
2025-01-19 12:56:31,200:INFO:Initializing predict_model()
2025-01-19 12:56:31,200:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020253909550>)
2025-01-19 12:56:31,200:INFO:Checking exceptions
2025-01-19 12:56:31,200:INFO:Preloading libraries
2025-01-19 12:56:31,200:INFO:Set up data.
2025-01-19 12:56:31,214:INFO:Set up index.
2025-01-19 12:56:31,230:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-19 12:56:46,551:INFO:Initializing interpret_model()
2025-01-19 12:56:46,551:INFO:interpret_model(estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>)
2025-01-19 12:56:46,551:INFO:Checking exceptions
2025-01-19 12:56:46,551:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 12:57:00,325:INFO:Initializing interpret_model()
2025-01-19 12:57:00,331:INFO:interpret_model(estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>)
2025-01-19 12:57:00,331:INFO:Checking exceptions
2025-01-19 12:57:00,331:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 13:02:06,890:INFO:Initializing evaluate_model()
2025-01-19 13:02:06,891:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 13:02:06,904:INFO:Initializing plot_model()
2025-01-19 13:02:06,904:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025A3F09D0>, system=True)
2025-01-19 13:02:06,904:INFO:Checking exceptions
2025-01-19 13:02:06,909:INFO:Preloading libraries
2025-01-19 13:02:06,909:INFO:Copying training dataset
2025-01-19 13:02:06,909:INFO:Plot type: pipeline
2025-01-19 13:02:07,261:INFO:Visual Rendered Successfully
2025-01-19 13:02:07,438:INFO:plot_model() successfully completed......................................
2025-01-19 13:17:16,071:INFO:PyCaret RegressionExperiment
2025-01-19 13:17:16,071:INFO:Logging name: tips_regression
2025-01-19 13:17:16,071:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 13:17:16,071:INFO:version 3.3.2
2025-01-19 13:17:16,071:INFO:Initializing setup()
2025-01-19 13:17:16,071:INFO:self.USI: ee0e
2025-01-19 13:17:16,071:INFO:self._variable_keys: {'fold_generator', 'USI', 'html_param', 'X', 'y', '_available_plots', 'gpu_n_jobs_param', 'y_train', 'pipeline', 'memory', 'logging_param', 'target_param', 'gpu_param', 'y_test', 'exp_id', 'transform_target_param', 'log_plots_param', 'n_jobs_param', 'X_test', 'data', 'idx', 'X_train', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'seed', 'fold_groups_param'}
2025-01-19 13:17:16,071:INFO:Checking environment
2025-01-19 13:17:16,071:INFO:python_version: 3.9.21
2025-01-19 13:17:16,071:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-19 13:17:16,071:INFO:machine: AMD64
2025-01-19 13:17:16,071:INFO:platform: Windows-10-10.0.22631-SP0
2025-01-19 13:17:16,077:INFO:Memory: svmem(total=8583708672, available=1458360320, percent=83.0, used=7125348352, free=1458360320)
2025-01-19 13:17:16,077:INFO:Physical Core: 4
2025-01-19 13:17:16,078:INFO:Logical Core: 4
2025-01-19 13:17:16,078:INFO:Checking libraries
2025-01-19 13:17:16,078:INFO:System:
2025-01-19 13:17:16,078:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-19 13:17:16,078:INFO:executable: c:\Users\aammar\miniconda3\envs\pycaret_env\python.exe
2025-01-19 13:17:16,079:INFO:   machine: Windows-10-10.0.22631-SP0
2025-01-19 13:17:16,079:INFO:PyCaret required dependencies:
2025-01-19 13:17:16,079:INFO:                 pip: 24.2
2025-01-19 13:17:16,079:INFO:          setuptools: 75.1.0
2025-01-19 13:17:16,079:INFO:             pycaret: 3.3.2
2025-01-19 13:17:16,080:INFO:             IPython: 8.18.1
2025-01-19 13:17:16,080:INFO:          ipywidgets: 8.1.5
2025-01-19 13:17:16,081:INFO:                tqdm: 4.67.1
2025-01-19 13:17:16,081:INFO:               numpy: 1.26.4
2025-01-19 13:17:16,081:INFO:              pandas: 2.1.4
2025-01-19 13:17:16,081:INFO:              jinja2: 3.1.5
2025-01-19 13:17:16,082:INFO:               scipy: 1.11.4
2025-01-19 13:17:16,082:INFO:              joblib: 1.3.2
2025-01-19 13:17:16,082:INFO:             sklearn: 1.4.2
2025-01-19 13:17:16,082:INFO:                pyod: 2.0.3
2025-01-19 13:17:16,082:INFO:            imblearn: 0.12.4
2025-01-19 13:17:16,082:INFO:   category_encoders: 2.6.4
2025-01-19 13:17:16,082:INFO:            lightgbm: 4.5.0
2025-01-19 13:17:16,082:INFO:               numba: 0.60.0
2025-01-19 13:17:16,083:INFO:            requests: 2.32.3
2025-01-19 13:17:16,083:INFO:          matplotlib: 3.7.5
2025-01-19 13:17:16,084:INFO:          scikitplot: 0.3.7
2025-01-19 13:17:16,084:INFO:         yellowbrick: 1.5
2025-01-19 13:17:16,084:INFO:              plotly: 5.24.1
2025-01-19 13:17:16,084:INFO:    plotly-resampler: Not installed
2025-01-19 13:17:16,084:INFO:             kaleido: 0.2.1
2025-01-19 13:17:16,085:INFO:           schemdraw: 0.15
2025-01-19 13:17:16,085:INFO:         statsmodels: 0.14.4
2025-01-19 13:17:16,085:INFO:              sktime: 0.26.0
2025-01-19 13:17:16,085:INFO:               tbats: 1.1.3
2025-01-19 13:17:16,085:INFO:            pmdarima: 2.0.4
2025-01-19 13:17:16,085:INFO:              psutil: 6.1.1
2025-01-19 13:17:16,085:INFO:          markupsafe: 3.0.2
2025-01-19 13:17:16,085:INFO:             pickle5: Not installed
2025-01-19 13:17:16,085:INFO:         cloudpickle: 3.1.1
2025-01-19 13:17:16,085:INFO:         deprecation: 2.1.0
2025-01-19 13:17:16,085:INFO:              xxhash: 3.5.0
2025-01-19 13:17:16,085:INFO:           wurlitzer: Not installed
2025-01-19 13:17:16,085:INFO:PyCaret optional dependencies:
2025-01-19 13:17:16,085:INFO:                shap: 0.46.0
2025-01-19 13:17:16,085:INFO:           interpret: Not installed
2025-01-19 13:17:16,085:INFO:                umap: Not installed
2025-01-19 13:17:16,085:INFO:     ydata_profiling: Not installed
2025-01-19 13:17:16,085:INFO:  explainerdashboard: Not installed
2025-01-19 13:17:16,085:INFO:             autoviz: Not installed
2025-01-19 13:17:16,085:INFO:           fairlearn: Not installed
2025-01-19 13:17:16,085:INFO:          deepchecks: Not installed
2025-01-19 13:17:16,085:INFO:             xgboost: Not installed
2025-01-19 13:17:16,085:INFO:            catboost: Not installed
2025-01-19 13:17:16,085:INFO:              kmodes: Not installed
2025-01-19 13:17:16,085:INFO:             mlxtend: Not installed
2025-01-19 13:17:16,085:INFO:       statsforecast: Not installed
2025-01-19 13:17:16,085:INFO:        tune_sklearn: Not installed
2025-01-19 13:17:16,085:INFO:                 ray: Not installed
2025-01-19 13:17:16,085:INFO:            hyperopt: Not installed
2025-01-19 13:17:16,085:INFO:              optuna: Not installed
2025-01-19 13:17:16,085:INFO:               skopt: Not installed
2025-01-19 13:17:16,085:INFO:              mlflow: 2.19.0
2025-01-19 13:17:16,085:INFO:              gradio: Not installed
2025-01-19 13:17:16,085:INFO:             fastapi: Not installed
2025-01-19 13:17:16,085:INFO:             uvicorn: Not installed
2025-01-19 13:17:16,085:INFO:              m2cgen: Not installed
2025-01-19 13:17:16,085:INFO:           evidently: Not installed
2025-01-19 13:17:16,085:INFO:               fugue: Not installed
2025-01-19 13:17:16,085:INFO:           streamlit: Not installed
2025-01-19 13:17:16,085:INFO:             prophet: Not installed
2025-01-19 13:17:16,085:INFO:None
2025-01-19 13:17:16,085:INFO:Set up data.
2025-01-19 13:17:16,099:INFO:Set up folding strategy.
2025-01-19 13:17:16,099:INFO:Set up train/test split.
2025-01-19 13:17:16,099:INFO:Set up index.
2025-01-19 13:17:16,099:INFO:Assigning column types.
2025-01-19 13:17:16,099:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 13:17:16,099:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,099:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,121:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,213:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,292:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,293:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,293:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,293:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,299:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,307:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,389:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,452:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,459:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,459:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,459:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 13:17:16,466:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,474:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,550:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,611:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,611:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,620:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,704:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,779:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,779:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 13:17:16,793:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,868:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,932:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:16,932:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:16,945:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,031:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,091:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,091:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,091:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 13:17:17,174:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,243:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,245:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,328:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,410:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,412:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,412:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,413:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 13:17:17,523:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,591:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,591:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,688:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 13:17:17,751:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,751:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 13:17:17,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:17,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,141:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,141:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,141:INFO:Preparing preprocessing pipeline...
2025-01-19 13:17:18,141:INFO:Set up simple imputation.
2025-01-19 13:17:18,141:INFO:Set up polynomial features.
2025-01-19 13:17:18,141:INFO:Set up removing multicollinearity.
2025-01-19 13:17:18,141:INFO:Set up feature normalization.
2025-01-19 13:17:18,230:INFO:Finished creating preprocessing pipeline.
2025-01-19 13:17:18,237:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 13:17:18,237:INFO:Creating final display dataframe.
2025-01-19 13:17:18,383:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             ee0e
2025-01-19 13:17:18,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,689:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:18,689:INFO:setup() successfully completed in 2.62s...............
2025-01-19 13:17:27,223:INFO:Initializing compare_models()
2025-01-19 13:17:27,224:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-19 13:17:27,224:INFO:Checking exceptions
2025-01-19 13:17:27,227:INFO:Preparing display monitor
2025-01-19 13:17:27,268:INFO:Initializing Linear Regression
2025-01-19 13:17:27,268:INFO:Total runtime is 0.0 minutes
2025-01-19 13:17:27,279:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:27,280:INFO:Initializing create_model()
2025-01-19 13:17:27,281:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:27,281:INFO:Checking exceptions
2025-01-19 13:17:27,281:INFO:Importing libraries
2025-01-19 13:17:27,281:INFO:Copying training dataset
2025-01-19 13:17:27,286:INFO:Defining folds
2025-01-19 13:17:27,286:INFO:Declaring metric variables
2025-01-19 13:17:27,296:INFO:Importing untrained model
2025-01-19 13:17:27,310:INFO:Linear Regression Imported successfully
2025-01-19 13:17:27,329:INFO:Starting cross validation
2025-01-19 13:17:27,329:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:31,556:INFO:Calculating mean and std
2025-01-19 13:17:31,558:INFO:Creating metrics dataframe
2025-01-19 13:17:31,563:INFO:Uploading results into container
2025-01-19 13:17:31,563:INFO:Uploading model into container now
2025-01-19 13:17:31,571:INFO:_master_model_container: 1
2025-01-19 13:17:31,572:INFO:_display_container: 2
2025-01-19 13:17:31,573:INFO:LinearRegression(n_jobs=-1)
2025-01-19 13:17:31,573:INFO:create_model() successfully completed......................................
2025-01-19 13:17:31,890:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:31,890:INFO:Creating metrics dataframe
2025-01-19 13:17:31,890:INFO:Initializing Lasso Regression
2025-01-19 13:17:31,890:INFO:Total runtime is 0.07702073256174723 minutes
2025-01-19 13:17:31,904:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:31,905:INFO:Initializing create_model()
2025-01-19 13:17:31,905:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:31,905:INFO:Checking exceptions
2025-01-19 13:17:31,905:INFO:Importing libraries
2025-01-19 13:17:31,905:INFO:Copying training dataset
2025-01-19 13:17:31,913:INFO:Defining folds
2025-01-19 13:17:31,914:INFO:Declaring metric variables
2025-01-19 13:17:31,925:INFO:Importing untrained model
2025-01-19 13:17:31,931:INFO:Lasso Regression Imported successfully
2025-01-19 13:17:31,945:INFO:Starting cross validation
2025-01-19 13:17:31,948:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:32,174:INFO:Calculating mean and std
2025-01-19 13:17:32,174:INFO:Creating metrics dataframe
2025-01-19 13:17:32,180:INFO:Uploading results into container
2025-01-19 13:17:32,183:INFO:Uploading model into container now
2025-01-19 13:17:32,183:INFO:_master_model_container: 2
2025-01-19 13:17:32,183:INFO:_display_container: 2
2025-01-19 13:17:32,184:INFO:Lasso(random_state=123)
2025-01-19 13:17:32,184:INFO:create_model() successfully completed......................................
2025-01-19 13:17:32,343:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:32,343:INFO:Creating metrics dataframe
2025-01-19 13:17:32,354:INFO:Initializing Ridge Regression
2025-01-19 13:17:32,354:INFO:Total runtime is 0.08476106325785318 minutes
2025-01-19 13:17:32,354:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:32,361:INFO:Initializing create_model()
2025-01-19 13:17:32,361:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:32,361:INFO:Checking exceptions
2025-01-19 13:17:32,361:INFO:Importing libraries
2025-01-19 13:17:32,361:INFO:Copying training dataset
2025-01-19 13:17:32,361:INFO:Defining folds
2025-01-19 13:17:32,361:INFO:Declaring metric variables
2025-01-19 13:17:32,377:INFO:Importing untrained model
2025-01-19 13:17:32,390:INFO:Ridge Regression Imported successfully
2025-01-19 13:17:32,410:INFO:Starting cross validation
2025-01-19 13:17:32,419:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:32,625:INFO:Calculating mean and std
2025-01-19 13:17:32,625:INFO:Creating metrics dataframe
2025-01-19 13:17:32,625:INFO:Uploading results into container
2025-01-19 13:17:32,625:INFO:Uploading model into container now
2025-01-19 13:17:32,625:INFO:_master_model_container: 3
2025-01-19 13:17:32,625:INFO:_display_container: 2
2025-01-19 13:17:32,625:INFO:Ridge(random_state=123)
2025-01-19 13:17:32,625:INFO:create_model() successfully completed......................................
2025-01-19 13:17:32,792:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:32,798:INFO:Creating metrics dataframe
2025-01-19 13:17:32,806:INFO:Initializing Elastic Net
2025-01-19 13:17:32,806:INFO:Total runtime is 0.0922917366027832 minutes
2025-01-19 13:17:32,817:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:32,817:INFO:Initializing create_model()
2025-01-19 13:17:32,817:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:32,817:INFO:Checking exceptions
2025-01-19 13:17:32,817:INFO:Importing libraries
2025-01-19 13:17:32,817:INFO:Copying training dataset
2025-01-19 13:17:32,832:INFO:Defining folds
2025-01-19 13:17:32,832:INFO:Declaring metric variables
2025-01-19 13:17:32,842:INFO:Importing untrained model
2025-01-19 13:17:32,849:INFO:Elastic Net Imported successfully
2025-01-19 13:17:32,862:INFO:Starting cross validation
2025-01-19 13:17:32,864:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:33,056:INFO:Calculating mean and std
2025-01-19 13:17:33,056:INFO:Creating metrics dataframe
2025-01-19 13:17:33,056:INFO:Uploading results into container
2025-01-19 13:17:33,056:INFO:Uploading model into container now
2025-01-19 13:17:33,056:INFO:_master_model_container: 4
2025-01-19 13:17:33,056:INFO:_display_container: 2
2025-01-19 13:17:33,056:INFO:ElasticNet(random_state=123)
2025-01-19 13:17:33,056:INFO:create_model() successfully completed......................................
2025-01-19 13:17:33,212:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:33,213:INFO:Creating metrics dataframe
2025-01-19 13:17:33,223:INFO:Initializing Least Angle Regression
2025-01-19 13:17:33,223:INFO:Total runtime is 0.09923619429270426 minutes
2025-01-19 13:17:33,223:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:33,230:INFO:Initializing create_model()
2025-01-19 13:17:33,231:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:33,231:INFO:Checking exceptions
2025-01-19 13:17:33,231:INFO:Importing libraries
2025-01-19 13:17:33,231:INFO:Copying training dataset
2025-01-19 13:17:33,238:INFO:Defining folds
2025-01-19 13:17:33,238:INFO:Declaring metric variables
2025-01-19 13:17:33,245:INFO:Importing untrained model
2025-01-19 13:17:33,254:INFO:Least Angle Regression Imported successfully
2025-01-19 13:17:33,267:INFO:Starting cross validation
2025-01-19 13:17:33,270:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:33,486:INFO:Calculating mean and std
2025-01-19 13:17:33,486:INFO:Creating metrics dataframe
2025-01-19 13:17:33,486:INFO:Uploading results into container
2025-01-19 13:17:33,486:INFO:Uploading model into container now
2025-01-19 13:17:33,486:INFO:_master_model_container: 5
2025-01-19 13:17:33,486:INFO:_display_container: 2
2025-01-19 13:17:33,486:INFO:Lars(random_state=123)
2025-01-19 13:17:33,486:INFO:create_model() successfully completed......................................
2025-01-19 13:17:33,640:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:33,645:INFO:Creating metrics dataframe
2025-01-19 13:17:33,654:INFO:Initializing Lasso Least Angle Regression
2025-01-19 13:17:33,654:INFO:Total runtime is 0.10642982721328735 minutes
2025-01-19 13:17:33,661:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:33,661:INFO:Initializing create_model()
2025-01-19 13:17:33,661:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:33,661:INFO:Checking exceptions
2025-01-19 13:17:33,661:INFO:Importing libraries
2025-01-19 13:17:33,661:INFO:Copying training dataset
2025-01-19 13:17:33,672:INFO:Defining folds
2025-01-19 13:17:33,672:INFO:Declaring metric variables
2025-01-19 13:17:33,676:INFO:Importing untrained model
2025-01-19 13:17:33,685:INFO:Lasso Least Angle Regression Imported successfully
2025-01-19 13:17:33,697:INFO:Starting cross validation
2025-01-19 13:17:33,702:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:33,966:INFO:Calculating mean and std
2025-01-19 13:17:33,967:INFO:Creating metrics dataframe
2025-01-19 13:17:33,969:INFO:Uploading results into container
2025-01-19 13:17:33,970:INFO:Uploading model into container now
2025-01-19 13:17:33,970:INFO:_master_model_container: 6
2025-01-19 13:17:33,970:INFO:_display_container: 2
2025-01-19 13:17:33,971:INFO:LassoLars(random_state=123)
2025-01-19 13:17:33,971:INFO:create_model() successfully completed......................................
2025-01-19 13:17:34,121:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:34,121:INFO:Creating metrics dataframe
2025-01-19 13:17:34,133:INFO:Initializing Orthogonal Matching Pursuit
2025-01-19 13:17:34,134:INFO:Total runtime is 0.11443236668904622 minutes
2025-01-19 13:17:34,139:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:34,139:INFO:Initializing create_model()
2025-01-19 13:17:34,139:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:34,140:INFO:Checking exceptions
2025-01-19 13:17:34,140:INFO:Importing libraries
2025-01-19 13:17:34,140:INFO:Copying training dataset
2025-01-19 13:17:34,145:INFO:Defining folds
2025-01-19 13:17:34,145:INFO:Declaring metric variables
2025-01-19 13:17:34,147:INFO:Importing untrained model
2025-01-19 13:17:34,156:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-19 13:17:34,168:INFO:Starting cross validation
2025-01-19 13:17:34,168:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:34,375:INFO:Calculating mean and std
2025-01-19 13:17:34,375:INFO:Creating metrics dataframe
2025-01-19 13:17:34,381:INFO:Uploading results into container
2025-01-19 13:17:34,384:INFO:Uploading model into container now
2025-01-19 13:17:34,384:INFO:_master_model_container: 7
2025-01-19 13:17:34,384:INFO:_display_container: 2
2025-01-19 13:17:34,384:INFO:OrthogonalMatchingPursuit()
2025-01-19 13:17:34,384:INFO:create_model() successfully completed......................................
2025-01-19 13:17:34,528:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:34,528:INFO:Creating metrics dataframe
2025-01-19 13:17:34,528:INFO:Initializing Bayesian Ridge
2025-01-19 13:17:34,528:INFO:Total runtime is 0.12099699576695759 minutes
2025-01-19 13:17:34,542:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:34,542:INFO:Initializing create_model()
2025-01-19 13:17:34,542:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:34,542:INFO:Checking exceptions
2025-01-19 13:17:34,542:INFO:Importing libraries
2025-01-19 13:17:34,542:INFO:Copying training dataset
2025-01-19 13:17:34,549:INFO:Defining folds
2025-01-19 13:17:34,549:INFO:Declaring metric variables
2025-01-19 13:17:34,558:INFO:Importing untrained model
2025-01-19 13:17:34,572:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:17:34,584:INFO:Starting cross validation
2025-01-19 13:17:34,585:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:34,792:INFO:Calculating mean and std
2025-01-19 13:17:34,792:INFO:Creating metrics dataframe
2025-01-19 13:17:34,792:INFO:Uploading results into container
2025-01-19 13:17:34,792:INFO:Uploading model into container now
2025-01-19 13:17:34,792:INFO:_master_model_container: 8
2025-01-19 13:17:34,792:INFO:_display_container: 2
2025-01-19 13:17:34,792:INFO:BayesianRidge()
2025-01-19 13:17:34,792:INFO:create_model() successfully completed......................................
2025-01-19 13:17:34,945:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:34,945:INFO:Creating metrics dataframe
2025-01-19 13:17:34,961:INFO:Initializing Passive Aggressive Regressor
2025-01-19 13:17:34,962:INFO:Total runtime is 0.1282308260599772 minutes
2025-01-19 13:17:34,967:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:34,968:INFO:Initializing create_model()
2025-01-19 13:17:34,968:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:34,968:INFO:Checking exceptions
2025-01-19 13:17:34,968:INFO:Importing libraries
2025-01-19 13:17:34,968:INFO:Copying training dataset
2025-01-19 13:17:34,975:INFO:Defining folds
2025-01-19 13:17:34,975:INFO:Declaring metric variables
2025-01-19 13:17:34,982:INFO:Importing untrained model
2025-01-19 13:17:34,987:INFO:Passive Aggressive Regressor Imported successfully
2025-01-19 13:17:35,000:INFO:Starting cross validation
2025-01-19 13:17:35,002:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:35,202:INFO:Calculating mean and std
2025-01-19 13:17:35,202:INFO:Creating metrics dataframe
2025-01-19 13:17:35,202:INFO:Uploading results into container
2025-01-19 13:17:35,202:INFO:Uploading model into container now
2025-01-19 13:17:35,202:INFO:_master_model_container: 9
2025-01-19 13:17:35,202:INFO:_display_container: 2
2025-01-19 13:17:35,202:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-19 13:17:35,202:INFO:create_model() successfully completed......................................
2025-01-19 13:17:35,358:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:35,359:INFO:Creating metrics dataframe
2025-01-19 13:17:35,371:INFO:Initializing Huber Regressor
2025-01-19 13:17:35,371:INFO:Total runtime is 0.13504509925842284 minutes
2025-01-19 13:17:35,376:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:35,376:INFO:Initializing create_model()
2025-01-19 13:17:35,376:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:35,376:INFO:Checking exceptions
2025-01-19 13:17:35,376:INFO:Importing libraries
2025-01-19 13:17:35,376:INFO:Copying training dataset
2025-01-19 13:17:35,376:INFO:Defining folds
2025-01-19 13:17:35,376:INFO:Declaring metric variables
2025-01-19 13:17:35,386:INFO:Importing untrained model
2025-01-19 13:17:35,393:INFO:Huber Regressor Imported successfully
2025-01-19 13:17:35,406:INFO:Starting cross validation
2025-01-19 13:17:35,410:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:35,660:INFO:Calculating mean and std
2025-01-19 13:17:35,660:INFO:Creating metrics dataframe
2025-01-19 13:17:35,660:INFO:Uploading results into container
2025-01-19 13:17:35,660:INFO:Uploading model into container now
2025-01-19 13:17:35,660:INFO:_master_model_container: 10
2025-01-19 13:17:35,660:INFO:_display_container: 2
2025-01-19 13:17:35,660:INFO:HuberRegressor()
2025-01-19 13:17:35,660:INFO:create_model() successfully completed......................................
2025-01-19 13:17:35,813:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:35,813:INFO:Creating metrics dataframe
2025-01-19 13:17:35,829:INFO:Initializing K Neighbors Regressor
2025-01-19 13:17:35,829:INFO:Total runtime is 0.14267135461171468 minutes
2025-01-19 13:17:35,834:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:35,835:INFO:Initializing create_model()
2025-01-19 13:17:35,835:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:35,835:INFO:Checking exceptions
2025-01-19 13:17:35,835:INFO:Importing libraries
2025-01-19 13:17:35,836:INFO:Copying training dataset
2025-01-19 13:17:35,841:INFO:Defining folds
2025-01-19 13:17:35,841:INFO:Declaring metric variables
2025-01-19 13:17:35,849:INFO:Importing untrained model
2025-01-19 13:17:35,856:INFO:K Neighbors Regressor Imported successfully
2025-01-19 13:17:35,882:INFO:Starting cross validation
2025-01-19 13:17:35,884:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:36,174:INFO:Calculating mean and std
2025-01-19 13:17:36,174:INFO:Creating metrics dataframe
2025-01-19 13:17:36,174:INFO:Uploading results into container
2025-01-19 13:17:36,174:INFO:Uploading model into container now
2025-01-19 13:17:36,174:INFO:_master_model_container: 11
2025-01-19 13:17:36,174:INFO:_display_container: 2
2025-01-19 13:17:36,174:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-19 13:17:36,174:INFO:create_model() successfully completed......................................
2025-01-19 13:17:36,334:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:36,334:INFO:Creating metrics dataframe
2025-01-19 13:17:36,348:INFO:Initializing Decision Tree Regressor
2025-01-19 13:17:36,348:INFO:Total runtime is 0.15132058064142861 minutes
2025-01-19 13:17:36,356:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:36,356:INFO:Initializing create_model()
2025-01-19 13:17:36,356:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:36,356:INFO:Checking exceptions
2025-01-19 13:17:36,356:INFO:Importing libraries
2025-01-19 13:17:36,356:INFO:Copying training dataset
2025-01-19 13:17:36,365:INFO:Defining folds
2025-01-19 13:17:36,365:INFO:Declaring metric variables
2025-01-19 13:17:36,369:INFO:Importing untrained model
2025-01-19 13:17:36,377:INFO:Decision Tree Regressor Imported successfully
2025-01-19 13:17:36,391:INFO:Starting cross validation
2025-01-19 13:17:36,391:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:36,653:INFO:Calculating mean and std
2025-01-19 13:17:36,653:INFO:Creating metrics dataframe
2025-01-19 13:17:36,653:INFO:Uploading results into container
2025-01-19 13:17:36,653:INFO:Uploading model into container now
2025-01-19 13:17:36,653:INFO:_master_model_container: 12
2025-01-19 13:17:36,653:INFO:_display_container: 2
2025-01-19 13:17:36,653:INFO:DecisionTreeRegressor(random_state=123)
2025-01-19 13:17:36,653:INFO:create_model() successfully completed......................................
2025-01-19 13:17:36,814:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:36,818:INFO:Creating metrics dataframe
2025-01-19 13:17:36,836:INFO:Initializing Random Forest Regressor
2025-01-19 13:17:36,836:INFO:Total runtime is 0.1594605445861816 minutes
2025-01-19 13:17:36,841:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:36,842:INFO:Initializing create_model()
2025-01-19 13:17:36,843:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:36,843:INFO:Checking exceptions
2025-01-19 13:17:36,843:INFO:Importing libraries
2025-01-19 13:17:36,843:INFO:Copying training dataset
2025-01-19 13:17:36,851:INFO:Defining folds
2025-01-19 13:17:36,852:INFO:Declaring metric variables
2025-01-19 13:17:36,858:INFO:Importing untrained model
2025-01-19 13:17:36,871:INFO:Random Forest Regressor Imported successfully
2025-01-19 13:17:36,887:INFO:Starting cross validation
2025-01-19 13:17:36,891:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:38,167:INFO:Calculating mean and std
2025-01-19 13:17:38,169:INFO:Creating metrics dataframe
2025-01-19 13:17:38,169:INFO:Uploading results into container
2025-01-19 13:17:38,169:INFO:Uploading model into container now
2025-01-19 13:17:38,174:INFO:_master_model_container: 13
2025-01-19 13:17:38,174:INFO:_display_container: 2
2025-01-19 13:17:38,174:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:17:38,176:INFO:create_model() successfully completed......................................
2025-01-19 13:17:38,320:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:38,320:INFO:Creating metrics dataframe
2025-01-19 13:17:38,338:INFO:Initializing Extra Trees Regressor
2025-01-19 13:17:38,338:INFO:Total runtime is 0.18448731501897173 minutes
2025-01-19 13:17:38,343:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:38,344:INFO:Initializing create_model()
2025-01-19 13:17:38,344:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:38,344:INFO:Checking exceptions
2025-01-19 13:17:38,344:INFO:Importing libraries
2025-01-19 13:17:38,344:INFO:Copying training dataset
2025-01-19 13:17:38,348:INFO:Defining folds
2025-01-19 13:17:38,348:INFO:Declaring metric variables
2025-01-19 13:17:38,348:INFO:Importing untrained model
2025-01-19 13:17:38,362:INFO:Extra Trees Regressor Imported successfully
2025-01-19 13:17:38,373:INFO:Starting cross validation
2025-01-19 13:17:38,373:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:39,309:INFO:Calculating mean and std
2025-01-19 13:17:39,315:INFO:Creating metrics dataframe
2025-01-19 13:17:39,319:INFO:Uploading results into container
2025-01-19 13:17:39,321:INFO:Uploading model into container now
2025-01-19 13:17:39,321:INFO:_master_model_container: 14
2025-01-19 13:17:39,321:INFO:_display_container: 2
2025-01-19 13:17:39,321:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:17:39,321:INFO:create_model() successfully completed......................................
2025-01-19 13:17:39,466:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:39,466:INFO:Creating metrics dataframe
2025-01-19 13:17:39,485:INFO:Initializing AdaBoost Regressor
2025-01-19 13:17:39,486:INFO:Total runtime is 0.20362110535303748 minutes
2025-01-19 13:17:39,489:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:39,490:INFO:Initializing create_model()
2025-01-19 13:17:39,490:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:39,490:INFO:Checking exceptions
2025-01-19 13:17:39,491:INFO:Importing libraries
2025-01-19 13:17:39,491:INFO:Copying training dataset
2025-01-19 13:17:39,494:INFO:Defining folds
2025-01-19 13:17:39,494:INFO:Declaring metric variables
2025-01-19 13:17:39,501:INFO:Importing untrained model
2025-01-19 13:17:39,503:INFO:AdaBoost Regressor Imported successfully
2025-01-19 13:17:39,521:INFO:Starting cross validation
2025-01-19 13:17:39,522:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:40,078:INFO:Calculating mean and std
2025-01-19 13:17:40,080:INFO:Creating metrics dataframe
2025-01-19 13:17:40,081:INFO:Uploading results into container
2025-01-19 13:17:40,082:INFO:Uploading model into container now
2025-01-19 13:17:40,082:INFO:_master_model_container: 15
2025-01-19 13:17:40,082:INFO:_display_container: 2
2025-01-19 13:17:40,082:INFO:AdaBoostRegressor(random_state=123)
2025-01-19 13:17:40,082:INFO:create_model() successfully completed......................................
2025-01-19 13:17:40,317:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:40,318:INFO:Creating metrics dataframe
2025-01-19 13:17:40,335:INFO:Initializing Gradient Boosting Regressor
2025-01-19 13:17:40,335:INFO:Total runtime is 0.21777105331420896 minutes
2025-01-19 13:17:40,340:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:40,340:INFO:Initializing create_model()
2025-01-19 13:17:40,342:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:40,342:INFO:Checking exceptions
2025-01-19 13:17:40,342:INFO:Importing libraries
2025-01-19 13:17:40,342:INFO:Copying training dataset
2025-01-19 13:17:40,349:INFO:Defining folds
2025-01-19 13:17:40,349:INFO:Declaring metric variables
2025-01-19 13:17:40,356:INFO:Importing untrained model
2025-01-19 13:17:40,361:INFO:Gradient Boosting Regressor Imported successfully
2025-01-19 13:17:40,374:INFO:Starting cross validation
2025-01-19 13:17:40,377:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:41,225:INFO:Calculating mean and std
2025-01-19 13:17:41,225:INFO:Creating metrics dataframe
2025-01-19 13:17:41,234:INFO:Uploading results into container
2025-01-19 13:17:41,234:INFO:Uploading model into container now
2025-01-19 13:17:41,235:INFO:_master_model_container: 16
2025-01-19 13:17:41,235:INFO:_display_container: 2
2025-01-19 13:17:41,235:INFO:GradientBoostingRegressor(random_state=123)
2025-01-19 13:17:41,235:INFO:create_model() successfully completed......................................
2025-01-19 13:17:41,445:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:41,446:INFO:Creating metrics dataframe
2025-01-19 13:17:41,459:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:17:41,459:INFO:Total runtime is 0.23650956153869626 minutes
2025-01-19 13:17:41,467:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:41,467:INFO:Initializing create_model()
2025-01-19 13:17:41,467:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:41,467:INFO:Checking exceptions
2025-01-19 13:17:41,467:INFO:Importing libraries
2025-01-19 13:17:41,467:INFO:Copying training dataset
2025-01-19 13:17:41,481:INFO:Defining folds
2025-01-19 13:17:41,481:INFO:Declaring metric variables
2025-01-19 13:17:41,491:INFO:Importing untrained model
2025-01-19 13:17:41,506:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:17:41,529:INFO:Starting cross validation
2025-01-19 13:17:41,531:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:42,223:INFO:Calculating mean and std
2025-01-19 13:17:42,223:INFO:Creating metrics dataframe
2025-01-19 13:17:42,229:INFO:Uploading results into container
2025-01-19 13:17:42,230:INFO:Uploading model into container now
2025-01-19 13:17:42,232:INFO:_master_model_container: 17
2025-01-19 13:17:42,232:INFO:_display_container: 2
2025-01-19 13:17:42,232:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:17:42,232:INFO:create_model() successfully completed......................................
2025-01-19 13:17:42,390:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:42,390:INFO:Creating metrics dataframe
2025-01-19 13:17:42,403:INFO:Initializing Dummy Regressor
2025-01-19 13:17:42,403:INFO:Total runtime is 0.25225042502085365 minutes
2025-01-19 13:17:42,406:INFO:SubProcess create_model() called ==================================
2025-01-19 13:17:42,411:INFO:Initializing create_model()
2025-01-19 13:17:42,411:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF122E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:42,411:INFO:Checking exceptions
2025-01-19 13:17:42,411:INFO:Importing libraries
2025-01-19 13:17:42,411:INFO:Copying training dataset
2025-01-19 13:17:42,416:INFO:Defining folds
2025-01-19 13:17:42,416:INFO:Declaring metric variables
2025-01-19 13:17:42,422:INFO:Importing untrained model
2025-01-19 13:17:42,429:INFO:Dummy Regressor Imported successfully
2025-01-19 13:17:42,447:INFO:Starting cross validation
2025-01-19 13:17:42,450:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:17:42,674:INFO:Calculating mean and std
2025-01-19 13:17:42,676:INFO:Creating metrics dataframe
2025-01-19 13:17:42,681:INFO:Uploading results into container
2025-01-19 13:17:42,681:INFO:Uploading model into container now
2025-01-19 13:17:42,681:INFO:_master_model_container: 18
2025-01-19 13:17:42,681:INFO:_display_container: 2
2025-01-19 13:17:42,681:INFO:DummyRegressor()
2025-01-19 13:17:42,681:INFO:create_model() successfully completed......................................
2025-01-19 13:17:42,857:INFO:SubProcess create_model() end ==================================
2025-01-19 13:17:42,857:INFO:Creating metrics dataframe
2025-01-19 13:17:42,873:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:17:42,893:INFO:Initializing create_model()
2025-01-19 13:17:42,893:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:17:42,893:INFO:Checking exceptions
2025-01-19 13:17:42,897:INFO:Importing libraries
2025-01-19 13:17:42,897:INFO:Copying training dataset
2025-01-19 13:17:42,906:INFO:Defining folds
2025-01-19 13:17:42,907:INFO:Declaring metric variables
2025-01-19 13:17:42,907:INFO:Importing untrained model
2025-01-19 13:17:42,908:INFO:Declaring custom model
2025-01-19 13:17:42,908:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:17:42,910:INFO:Cross validation set to False
2025-01-19 13:17:42,910:INFO:Fitting Model
2025-01-19 13:17:42,987:INFO:BayesianRidge()
2025-01-19 13:17:42,987:INFO:create_model() successfully completed......................................
2025-01-19 13:17:43,186:INFO:_master_model_container: 18
2025-01-19 13:17:43,187:INFO:_display_container: 2
2025-01-19 13:17:43,187:INFO:BayesianRidge()
2025-01-19 13:17:43,189:INFO:compare_models() successfully completed......................................
2025-01-19 13:17:45,966:INFO:gpu_param set to False
2025-01-19 13:17:46,128:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:46,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:46,418:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:17:46,418:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:18:55,252:INFO:Initializing compare_models()
2025-01-19 13:18:55,252:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-19 13:18:55,252:INFO:Checking exceptions
2025-01-19 13:18:55,257:INFO:Preparing display monitor
2025-01-19 13:18:55,285:INFO:Initializing Linear Regression
2025-01-19 13:18:55,285:INFO:Total runtime is 0.0 minutes
2025-01-19 13:18:55,289:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:55,290:INFO:Initializing create_model()
2025-01-19 13:18:55,290:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:55,290:INFO:Checking exceptions
2025-01-19 13:18:55,290:INFO:Importing libraries
2025-01-19 13:18:55,290:INFO:Copying training dataset
2025-01-19 13:18:55,297:INFO:Defining folds
2025-01-19 13:18:55,297:INFO:Declaring metric variables
2025-01-19 13:18:55,304:INFO:Importing untrained model
2025-01-19 13:18:55,317:INFO:Linear Regression Imported successfully
2025-01-19 13:18:55,333:INFO:Starting cross validation
2025-01-19 13:18:55,334:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:55,619:INFO:Calculating mean and std
2025-01-19 13:18:55,620:INFO:Creating metrics dataframe
2025-01-19 13:18:55,622:INFO:Uploading results into container
2025-01-19 13:18:55,623:INFO:Uploading model into container now
2025-01-19 13:18:55,623:INFO:_master_model_container: 19
2025-01-19 13:18:55,623:INFO:_display_container: 3
2025-01-19 13:18:55,623:INFO:LinearRegression(n_jobs=-1)
2025-01-19 13:18:55,623:INFO:create_model() successfully completed......................................
2025-01-19 13:18:55,764:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:55,764:INFO:Creating metrics dataframe
2025-01-19 13:18:55,777:INFO:Initializing Lasso Regression
2025-01-19 13:18:55,778:INFO:Total runtime is 0.008226124445597331 minutes
2025-01-19 13:18:55,779:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:55,779:INFO:Initializing create_model()
2025-01-19 13:18:55,779:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:55,779:INFO:Checking exceptions
2025-01-19 13:18:55,779:INFO:Importing libraries
2025-01-19 13:18:55,779:INFO:Copying training dataset
2025-01-19 13:18:55,788:INFO:Defining folds
2025-01-19 13:18:55,789:INFO:Declaring metric variables
2025-01-19 13:18:55,793:INFO:Importing untrained model
2025-01-19 13:18:55,802:INFO:Lasso Regression Imported successfully
2025-01-19 13:18:55,813:INFO:Starting cross validation
2025-01-19 13:18:55,815:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:56,008:INFO:Calculating mean and std
2025-01-19 13:18:56,008:INFO:Creating metrics dataframe
2025-01-19 13:18:56,010:INFO:Uploading results into container
2025-01-19 13:18:56,010:INFO:Uploading model into container now
2025-01-19 13:18:56,011:INFO:_master_model_container: 20
2025-01-19 13:18:56,011:INFO:_display_container: 3
2025-01-19 13:18:56,011:INFO:Lasso(random_state=123)
2025-01-19 13:18:56,011:INFO:create_model() successfully completed......................................
2025-01-19 13:18:56,150:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:56,150:INFO:Creating metrics dataframe
2025-01-19 13:18:56,159:INFO:Initializing Ridge Regression
2025-01-19 13:18:56,160:INFO:Total runtime is 0.014593152205149333 minutes
2025-01-19 13:18:56,161:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:56,161:INFO:Initializing create_model()
2025-01-19 13:18:56,161:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:56,161:INFO:Checking exceptions
2025-01-19 13:18:56,161:INFO:Importing libraries
2025-01-19 13:18:56,161:INFO:Copying training dataset
2025-01-19 13:18:56,169:INFO:Defining folds
2025-01-19 13:18:56,169:INFO:Declaring metric variables
2025-01-19 13:18:56,174:INFO:Importing untrained model
2025-01-19 13:18:56,178:INFO:Ridge Regression Imported successfully
2025-01-19 13:18:56,191:INFO:Starting cross validation
2025-01-19 13:18:56,195:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:56,397:INFO:Calculating mean and std
2025-01-19 13:18:56,398:INFO:Creating metrics dataframe
2025-01-19 13:18:56,403:INFO:Uploading results into container
2025-01-19 13:18:56,404:INFO:Uploading model into container now
2025-01-19 13:18:56,404:INFO:_master_model_container: 21
2025-01-19 13:18:56,404:INFO:_display_container: 3
2025-01-19 13:18:56,405:INFO:Ridge(random_state=123)
2025-01-19 13:18:56,405:INFO:create_model() successfully completed......................................
2025-01-19 13:18:56,549:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:56,551:INFO:Creating metrics dataframe
2025-01-19 13:18:56,558:INFO:Initializing Elastic Net
2025-01-19 13:18:56,559:INFO:Total runtime is 0.0212468425432841 minutes
2025-01-19 13:18:56,566:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:56,567:INFO:Initializing create_model()
2025-01-19 13:18:56,567:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:56,567:INFO:Checking exceptions
2025-01-19 13:18:56,567:INFO:Importing libraries
2025-01-19 13:18:56,567:INFO:Copying training dataset
2025-01-19 13:18:56,572:INFO:Defining folds
2025-01-19 13:18:56,572:INFO:Declaring metric variables
2025-01-19 13:18:56,577:INFO:Importing untrained model
2025-01-19 13:18:56,586:INFO:Elastic Net Imported successfully
2025-01-19 13:18:56,595:INFO:Starting cross validation
2025-01-19 13:18:56,598:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:56,775:INFO:Calculating mean and std
2025-01-19 13:18:56,775:INFO:Creating metrics dataframe
2025-01-19 13:18:56,781:INFO:Uploading results into container
2025-01-19 13:18:56,781:INFO:Uploading model into container now
2025-01-19 13:18:56,781:INFO:_master_model_container: 22
2025-01-19 13:18:56,781:INFO:_display_container: 3
2025-01-19 13:18:56,781:INFO:ElasticNet(random_state=123)
2025-01-19 13:18:56,781:INFO:create_model() successfully completed......................................
2025-01-19 13:18:56,924:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:56,926:INFO:Creating metrics dataframe
2025-01-19 13:18:56,931:INFO:Initializing Least Angle Regression
2025-01-19 13:18:56,931:INFO:Total runtime is 0.027440452575683595 minutes
2025-01-19 13:18:56,940:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:56,942:INFO:Initializing create_model()
2025-01-19 13:18:56,942:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:56,942:INFO:Checking exceptions
2025-01-19 13:18:56,942:INFO:Importing libraries
2025-01-19 13:18:56,942:INFO:Copying training dataset
2025-01-19 13:18:56,946:INFO:Defining folds
2025-01-19 13:18:56,946:INFO:Declaring metric variables
2025-01-19 13:18:56,957:INFO:Importing untrained model
2025-01-19 13:18:56,963:INFO:Least Angle Regression Imported successfully
2025-01-19 13:18:56,979:INFO:Starting cross validation
2025-01-19 13:18:56,981:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:57,183:INFO:Calculating mean and std
2025-01-19 13:18:57,183:INFO:Creating metrics dataframe
2025-01-19 13:18:57,188:INFO:Uploading results into container
2025-01-19 13:18:57,190:INFO:Uploading model into container now
2025-01-19 13:18:57,191:INFO:_master_model_container: 23
2025-01-19 13:18:57,192:INFO:_display_container: 3
2025-01-19 13:18:57,194:INFO:Lars(random_state=123)
2025-01-19 13:18:57,194:INFO:create_model() successfully completed......................................
2025-01-19 13:18:57,343:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:57,343:INFO:Creating metrics dataframe
2025-01-19 13:18:57,353:INFO:Initializing Lasso Least Angle Regression
2025-01-19 13:18:57,354:INFO:Total runtime is 0.03448178768157959 minutes
2025-01-19 13:18:57,359:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:57,359:INFO:Initializing create_model()
2025-01-19 13:18:57,359:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:57,359:INFO:Checking exceptions
2025-01-19 13:18:57,359:INFO:Importing libraries
2025-01-19 13:18:57,359:INFO:Copying training dataset
2025-01-19 13:18:57,364:INFO:Defining folds
2025-01-19 13:18:57,364:INFO:Declaring metric variables
2025-01-19 13:18:57,369:INFO:Importing untrained model
2025-01-19 13:18:57,377:INFO:Lasso Least Angle Regression Imported successfully
2025-01-19 13:18:57,391:INFO:Starting cross validation
2025-01-19 13:18:57,394:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:57,584:INFO:Calculating mean and std
2025-01-19 13:18:57,585:INFO:Creating metrics dataframe
2025-01-19 13:18:57,587:INFO:Uploading results into container
2025-01-19 13:18:57,587:INFO:Uploading model into container now
2025-01-19 13:18:57,588:INFO:_master_model_container: 24
2025-01-19 13:18:57,588:INFO:_display_container: 3
2025-01-19 13:18:57,588:INFO:LassoLars(random_state=123)
2025-01-19 13:18:57,588:INFO:create_model() successfully completed......................................
2025-01-19 13:18:57,729:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:57,730:INFO:Creating metrics dataframe
2025-01-19 13:18:57,744:INFO:Initializing Orthogonal Matching Pursuit
2025-01-19 13:18:57,745:INFO:Total runtime is 0.041002877553304035 minutes
2025-01-19 13:18:57,749:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:57,750:INFO:Initializing create_model()
2025-01-19 13:18:57,750:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:57,750:INFO:Checking exceptions
2025-01-19 13:18:57,750:INFO:Importing libraries
2025-01-19 13:18:57,751:INFO:Copying training dataset
2025-01-19 13:18:57,754:INFO:Defining folds
2025-01-19 13:18:57,754:INFO:Declaring metric variables
2025-01-19 13:18:57,758:INFO:Importing untrained model
2025-01-19 13:18:57,765:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-19 13:18:57,777:INFO:Starting cross validation
2025-01-19 13:18:57,779:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:57,958:INFO:Calculating mean and std
2025-01-19 13:18:57,959:INFO:Creating metrics dataframe
2025-01-19 13:18:57,959:INFO:Uploading results into container
2025-01-19 13:18:57,959:INFO:Uploading model into container now
2025-01-19 13:18:57,959:INFO:_master_model_container: 25
2025-01-19 13:18:57,959:INFO:_display_container: 3
2025-01-19 13:18:57,959:INFO:OrthogonalMatchingPursuit()
2025-01-19 13:18:57,959:INFO:create_model() successfully completed......................................
2025-01-19 13:18:58,101:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:58,102:INFO:Creating metrics dataframe
2025-01-19 13:18:58,114:INFO:Initializing Bayesian Ridge
2025-01-19 13:18:58,114:INFO:Total runtime is 0.047159949938456215 minutes
2025-01-19 13:18:58,119:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:58,119:INFO:Initializing create_model()
2025-01-19 13:18:58,119:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:58,119:INFO:Checking exceptions
2025-01-19 13:18:58,119:INFO:Importing libraries
2025-01-19 13:18:58,119:INFO:Copying training dataset
2025-01-19 13:18:58,128:INFO:Defining folds
2025-01-19 13:18:58,128:INFO:Declaring metric variables
2025-01-19 13:18:58,134:INFO:Importing untrained model
2025-01-19 13:18:58,145:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:18:58,156:INFO:Starting cross validation
2025-01-19 13:18:58,156:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:58,348:INFO:Calculating mean and std
2025-01-19 13:18:58,348:INFO:Creating metrics dataframe
2025-01-19 13:18:58,348:INFO:Uploading results into container
2025-01-19 13:18:58,348:INFO:Uploading model into container now
2025-01-19 13:18:58,348:INFO:_master_model_container: 26
2025-01-19 13:18:58,348:INFO:_display_container: 3
2025-01-19 13:18:58,348:INFO:BayesianRidge()
2025-01-19 13:18:58,348:INFO:create_model() successfully completed......................................
2025-01-19 13:18:58,494:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:58,494:INFO:Creating metrics dataframe
2025-01-19 13:18:58,502:INFO:Initializing Passive Aggressive Regressor
2025-01-19 13:18:58,507:INFO:Total runtime is 0.05371063947677612 minutes
2025-01-19 13:18:58,512:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:58,513:INFO:Initializing create_model()
2025-01-19 13:18:58,513:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:58,513:INFO:Checking exceptions
2025-01-19 13:18:58,513:INFO:Importing libraries
2025-01-19 13:18:58,513:INFO:Copying training dataset
2025-01-19 13:18:58,519:INFO:Defining folds
2025-01-19 13:18:58,520:INFO:Declaring metric variables
2025-01-19 13:18:58,523:INFO:Importing untrained model
2025-01-19 13:18:58,533:INFO:Passive Aggressive Regressor Imported successfully
2025-01-19 13:18:58,549:INFO:Starting cross validation
2025-01-19 13:18:58,550:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:58,737:INFO:Calculating mean and std
2025-01-19 13:18:58,738:INFO:Creating metrics dataframe
2025-01-19 13:18:58,740:INFO:Uploading results into container
2025-01-19 13:18:58,741:INFO:Uploading model into container now
2025-01-19 13:18:58,742:INFO:_master_model_container: 27
2025-01-19 13:18:58,742:INFO:_display_container: 3
2025-01-19 13:18:58,742:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-19 13:18:58,742:INFO:create_model() successfully completed......................................
2025-01-19 13:18:58,882:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:58,882:INFO:Creating metrics dataframe
2025-01-19 13:18:58,900:INFO:Initializing Huber Regressor
2025-01-19 13:18:58,900:INFO:Total runtime is 0.06025118827819824 minutes
2025-01-19 13:18:58,905:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:58,905:INFO:Initializing create_model()
2025-01-19 13:18:58,905:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:58,905:INFO:Checking exceptions
2025-01-19 13:18:58,905:INFO:Importing libraries
2025-01-19 13:18:58,905:INFO:Copying training dataset
2025-01-19 13:18:58,913:INFO:Defining folds
2025-01-19 13:18:58,914:INFO:Declaring metric variables
2025-01-19 13:18:58,918:INFO:Importing untrained model
2025-01-19 13:18:58,924:INFO:Huber Regressor Imported successfully
2025-01-19 13:18:58,936:INFO:Starting cross validation
2025-01-19 13:18:58,938:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:59,263:INFO:Calculating mean and std
2025-01-19 13:18:59,265:INFO:Creating metrics dataframe
2025-01-19 13:18:59,270:INFO:Uploading results into container
2025-01-19 13:18:59,271:INFO:Uploading model into container now
2025-01-19 13:18:59,272:INFO:_master_model_container: 28
2025-01-19 13:18:59,272:INFO:_display_container: 3
2025-01-19 13:18:59,272:INFO:HuberRegressor()
2025-01-19 13:18:59,272:INFO:create_model() successfully completed......................................
2025-01-19 13:18:59,426:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:59,426:INFO:Creating metrics dataframe
2025-01-19 13:18:59,439:INFO:Initializing K Neighbors Regressor
2025-01-19 13:18:59,439:INFO:Total runtime is 0.06923245191574097 minutes
2025-01-19 13:18:59,443:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:59,444:INFO:Initializing create_model()
2025-01-19 13:18:59,444:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:59,444:INFO:Checking exceptions
2025-01-19 13:18:59,444:INFO:Importing libraries
2025-01-19 13:18:59,445:INFO:Copying training dataset
2025-01-19 13:18:59,445:INFO:Defining folds
2025-01-19 13:18:59,445:INFO:Declaring metric variables
2025-01-19 13:18:59,455:INFO:Importing untrained model
2025-01-19 13:18:59,466:INFO:K Neighbors Regressor Imported successfully
2025-01-19 13:18:59,481:INFO:Starting cross validation
2025-01-19 13:18:59,483:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:18:59,723:INFO:Calculating mean and std
2025-01-19 13:18:59,724:INFO:Creating metrics dataframe
2025-01-19 13:18:59,726:INFO:Uploading results into container
2025-01-19 13:18:59,728:INFO:Uploading model into container now
2025-01-19 13:18:59,728:INFO:_master_model_container: 29
2025-01-19 13:18:59,728:INFO:_display_container: 3
2025-01-19 13:18:59,730:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-19 13:18:59,730:INFO:create_model() successfully completed......................................
2025-01-19 13:18:59,875:INFO:SubProcess create_model() end ==================================
2025-01-19 13:18:59,876:INFO:Creating metrics dataframe
2025-01-19 13:18:59,886:INFO:Initializing Decision Tree Regressor
2025-01-19 13:18:59,886:INFO:Total runtime is 0.07669161558151245 minutes
2025-01-19 13:18:59,889:INFO:SubProcess create_model() called ==================================
2025-01-19 13:18:59,889:INFO:Initializing create_model()
2025-01-19 13:18:59,889:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:18:59,892:INFO:Checking exceptions
2025-01-19 13:18:59,892:INFO:Importing libraries
2025-01-19 13:18:59,892:INFO:Copying training dataset
2025-01-19 13:18:59,898:INFO:Defining folds
2025-01-19 13:18:59,899:INFO:Declaring metric variables
2025-01-19 13:18:59,903:INFO:Importing untrained model
2025-01-19 13:18:59,910:INFO:Decision Tree Regressor Imported successfully
2025-01-19 13:18:59,923:INFO:Starting cross validation
2025-01-19 13:18:59,926:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:00,112:INFO:Calculating mean and std
2025-01-19 13:19:00,112:INFO:Creating metrics dataframe
2025-01-19 13:19:00,112:INFO:Uploading results into container
2025-01-19 13:19:00,112:INFO:Uploading model into container now
2025-01-19 13:19:00,118:INFO:_master_model_container: 30
2025-01-19 13:19:00,118:INFO:_display_container: 3
2025-01-19 13:19:00,119:INFO:DecisionTreeRegressor(random_state=123)
2025-01-19 13:19:00,120:INFO:create_model() successfully completed......................................
2025-01-19 13:19:00,257:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:00,258:INFO:Creating metrics dataframe
2025-01-19 13:19:00,264:INFO:Initializing Random Forest Regressor
2025-01-19 13:19:00,264:INFO:Total runtime is 0.08299408356348674 minutes
2025-01-19 13:19:00,274:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:00,275:INFO:Initializing create_model()
2025-01-19 13:19:00,275:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:00,275:INFO:Checking exceptions
2025-01-19 13:19:00,275:INFO:Importing libraries
2025-01-19 13:19:00,275:INFO:Copying training dataset
2025-01-19 13:19:00,279:INFO:Defining folds
2025-01-19 13:19:00,279:INFO:Declaring metric variables
2025-01-19 13:19:00,287:INFO:Importing untrained model
2025-01-19 13:19:00,309:INFO:Random Forest Regressor Imported successfully
2025-01-19 13:19:00,322:INFO:Starting cross validation
2025-01-19 13:19:00,325:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:01,167:INFO:Calculating mean and std
2025-01-19 13:19:01,168:INFO:Creating metrics dataframe
2025-01-19 13:19:01,170:INFO:Uploading results into container
2025-01-19 13:19:01,172:INFO:Uploading model into container now
2025-01-19 13:19:01,173:INFO:_master_model_container: 31
2025-01-19 13:19:01,173:INFO:_display_container: 3
2025-01-19 13:19:01,173:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:19:01,173:INFO:create_model() successfully completed......................................
2025-01-19 13:19:01,313:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:01,313:INFO:Creating metrics dataframe
2025-01-19 13:19:01,336:INFO:Initializing Extra Trees Regressor
2025-01-19 13:19:01,336:INFO:Total runtime is 0.1008508563041687 minutes
2025-01-19 13:19:01,341:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:01,342:INFO:Initializing create_model()
2025-01-19 13:19:01,342:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:01,342:INFO:Checking exceptions
2025-01-19 13:19:01,343:INFO:Importing libraries
2025-01-19 13:19:01,343:INFO:Copying training dataset
2025-01-19 13:19:01,349:INFO:Defining folds
2025-01-19 13:19:01,349:INFO:Declaring metric variables
2025-01-19 13:19:01,355:INFO:Importing untrained model
2025-01-19 13:19:01,364:INFO:Extra Trees Regressor Imported successfully
2025-01-19 13:19:01,376:INFO:Starting cross validation
2025-01-19 13:19:01,384:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:02,070:INFO:Calculating mean and std
2025-01-19 13:19:02,072:INFO:Creating metrics dataframe
2025-01-19 13:19:02,078:INFO:Uploading results into container
2025-01-19 13:19:02,078:INFO:Uploading model into container now
2025-01-19 13:19:02,078:INFO:_master_model_container: 32
2025-01-19 13:19:02,078:INFO:_display_container: 3
2025-01-19 13:19:02,078:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:19:02,078:INFO:create_model() successfully completed......................................
2025-01-19 13:19:02,222:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:02,222:INFO:Creating metrics dataframe
2025-01-19 13:19:02,233:INFO:Initializing AdaBoost Regressor
2025-01-19 13:19:02,234:INFO:Total runtime is 0.11583045323689779 minutes
2025-01-19 13:19:02,239:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:02,240:INFO:Initializing create_model()
2025-01-19 13:19:02,240:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:02,240:INFO:Checking exceptions
2025-01-19 13:19:02,240:INFO:Importing libraries
2025-01-19 13:19:02,240:INFO:Copying training dataset
2025-01-19 13:19:02,247:INFO:Defining folds
2025-01-19 13:19:02,247:INFO:Declaring metric variables
2025-01-19 13:19:02,251:INFO:Importing untrained model
2025-01-19 13:19:02,261:INFO:AdaBoost Regressor Imported successfully
2025-01-19 13:19:02,279:INFO:Starting cross validation
2025-01-19 13:19:02,281:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:02,709:INFO:Calculating mean and std
2025-01-19 13:19:02,709:INFO:Creating metrics dataframe
2025-01-19 13:19:02,709:INFO:Uploading results into container
2025-01-19 13:19:02,709:INFO:Uploading model into container now
2025-01-19 13:19:02,716:INFO:_master_model_container: 33
2025-01-19 13:19:02,716:INFO:_display_container: 3
2025-01-19 13:19:02,718:INFO:AdaBoostRegressor(random_state=123)
2025-01-19 13:19:02,718:INFO:create_model() successfully completed......................................
2025-01-19 13:19:02,862:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:02,862:INFO:Creating metrics dataframe
2025-01-19 13:19:02,873:INFO:Initializing Gradient Boosting Regressor
2025-01-19 13:19:02,874:INFO:Total runtime is 0.1264817198117574 minutes
2025-01-19 13:19:02,877:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:02,878:INFO:Initializing create_model()
2025-01-19 13:19:02,878:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:02,878:INFO:Checking exceptions
2025-01-19 13:19:02,878:INFO:Importing libraries
2025-01-19 13:19:02,878:INFO:Copying training dataset
2025-01-19 13:19:02,883:INFO:Defining folds
2025-01-19 13:19:02,884:INFO:Declaring metric variables
2025-01-19 13:19:02,891:INFO:Importing untrained model
2025-01-19 13:19:02,891:INFO:Gradient Boosting Regressor Imported successfully
2025-01-19 13:19:02,905:INFO:Starting cross validation
2025-01-19 13:19:02,908:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:03,294:INFO:Calculating mean and std
2025-01-19 13:19:03,295:INFO:Creating metrics dataframe
2025-01-19 13:19:03,301:INFO:Uploading results into container
2025-01-19 13:19:03,302:INFO:Uploading model into container now
2025-01-19 13:19:03,302:INFO:_master_model_container: 34
2025-01-19 13:19:03,302:INFO:_display_container: 3
2025-01-19 13:19:03,302:INFO:GradientBoostingRegressor(random_state=123)
2025-01-19 13:19:03,303:INFO:create_model() successfully completed......................................
2025-01-19 13:19:03,446:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:03,446:INFO:Creating metrics dataframe
2025-01-19 13:19:03,457:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:19:03,457:INFO:Total runtime is 0.13620020151138307 minutes
2025-01-19 13:19:03,463:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:03,464:INFO:Initializing create_model()
2025-01-19 13:19:03,464:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:03,464:INFO:Checking exceptions
2025-01-19 13:19:03,464:INFO:Importing libraries
2025-01-19 13:19:03,464:INFO:Copying training dataset
2025-01-19 13:19:03,470:INFO:Defining folds
2025-01-19 13:19:03,470:INFO:Declaring metric variables
2025-01-19 13:19:03,476:INFO:Importing untrained model
2025-01-19 13:19:03,483:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:19:03,503:INFO:Starting cross validation
2025-01-19 13:19:03,505:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:04,063:INFO:Calculating mean and std
2025-01-19 13:19:04,064:INFO:Creating metrics dataframe
2025-01-19 13:19:04,068:INFO:Uploading results into container
2025-01-19 13:19:04,069:INFO:Uploading model into container now
2025-01-19 13:19:04,069:INFO:_master_model_container: 35
2025-01-19 13:19:04,069:INFO:_display_container: 3
2025-01-19 13:19:04,070:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-19 13:19:04,070:INFO:create_model() successfully completed......................................
2025-01-19 13:19:04,209:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:04,209:INFO:Creating metrics dataframe
2025-01-19 13:19:04,221:INFO:Initializing Dummy Regressor
2025-01-19 13:19:04,223:INFO:Total runtime is 0.1489644765853882 minutes
2025-01-19 13:19:04,226:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:04,227:INFO:Initializing create_model()
2025-01-19 13:19:04,227:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CF12220>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:04,227:INFO:Checking exceptions
2025-01-19 13:19:04,227:INFO:Importing libraries
2025-01-19 13:19:04,227:INFO:Copying training dataset
2025-01-19 13:19:04,233:INFO:Defining folds
2025-01-19 13:19:04,233:INFO:Declaring metric variables
2025-01-19 13:19:04,237:INFO:Importing untrained model
2025-01-19 13:19:04,242:INFO:Dummy Regressor Imported successfully
2025-01-19 13:19:04,257:INFO:Starting cross validation
2025-01-19 13:19:04,259:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:04,437:INFO:Calculating mean and std
2025-01-19 13:19:04,438:INFO:Creating metrics dataframe
2025-01-19 13:19:04,440:INFO:Uploading results into container
2025-01-19 13:19:04,441:INFO:Uploading model into container now
2025-01-19 13:19:04,441:INFO:_master_model_container: 36
2025-01-19 13:19:04,441:INFO:_display_container: 3
2025-01-19 13:19:04,441:INFO:DummyRegressor()
2025-01-19 13:19:04,442:INFO:create_model() successfully completed......................................
2025-01-19 13:19:04,585:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:04,587:INFO:Creating metrics dataframe
2025-01-19 13:19:04,602:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:19:04,615:INFO:Initializing create_model()
2025-01-19 13:19:04,616:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:04,616:INFO:Checking exceptions
2025-01-19 13:19:04,618:INFO:Importing libraries
2025-01-19 13:19:04,618:INFO:Copying training dataset
2025-01-19 13:19:04,622:INFO:Defining folds
2025-01-19 13:19:04,622:INFO:Declaring metric variables
2025-01-19 13:19:04,622:INFO:Importing untrained model
2025-01-19 13:19:04,622:INFO:Declaring custom model
2025-01-19 13:19:04,623:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:19:04,624:INFO:Cross validation set to False
2025-01-19 13:19:04,624:INFO:Fitting Model
2025-01-19 13:19:04,668:INFO:BayesianRidge()
2025-01-19 13:19:04,668:INFO:create_model() successfully completed......................................
2025-01-19 13:19:04,848:INFO:_master_model_container: 36
2025-01-19 13:19:04,848:INFO:_display_container: 3
2025-01-19 13:19:04,848:INFO:BayesianRidge()
2025-01-19 13:19:04,849:INFO:compare_models() successfully completed......................................
2025-01-19 13:19:48,136:INFO:Initializing tune_model()
2025-01-19 13:19:48,140:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>)
2025-01-19 13:19:48,140:INFO:Checking exceptions
2025-01-19 13:19:48,159:INFO:Copying training dataset
2025-01-19 13:19:48,163:INFO:Checking base model
2025-01-19 13:19:48,163:INFO:Base model : Bayesian Ridge
2025-01-19 13:19:48,167:INFO:Declaring metric variables
2025-01-19 13:19:48,173:INFO:Defining Hyperparameters
2025-01-19 13:19:48,397:INFO:Tuning with n_jobs=-1
2025-01-19 13:19:48,397:INFO:Initializing RandomizedSearchCV
2025-01-19 13:19:49,842:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 13:19:49,842:INFO:Hyperparameter search completed
2025-01-19 13:19:49,842:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:49,842:INFO:Initializing create_model()
2025-01-19 13:19:49,842:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025D0F7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 13:19:49,842:INFO:Checking exceptions
2025-01-19 13:19:49,842:INFO:Importing libraries
2025-01-19 13:19:49,842:INFO:Copying training dataset
2025-01-19 13:19:49,856:INFO:Defining folds
2025-01-19 13:19:49,857:INFO:Declaring metric variables
2025-01-19 13:19:49,862:INFO:Importing untrained model
2025-01-19 13:19:49,863:INFO:Declaring custom model
2025-01-19 13:19:49,864:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:19:49,879:INFO:Starting cross validation
2025-01-19 13:19:49,883:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:50,079:INFO:Calculating mean and std
2025-01-19 13:19:50,079:INFO:Creating metrics dataframe
2025-01-19 13:19:50,084:INFO:Finalizing model
2025-01-19 13:19:50,135:INFO:Uploading results into container
2025-01-19 13:19:50,135:INFO:Uploading model into container now
2025-01-19 13:19:50,135:INFO:_master_model_container: 37
2025-01-19 13:19:50,135:INFO:_display_container: 4
2025-01-19 13:19:50,140:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:19:50,140:INFO:create_model() successfully completed......................................
2025-01-19 13:19:50,293:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:50,293:INFO:choose_better activated
2025-01-19 13:19:50,293:INFO:SubProcess create_model() called ==================================
2025-01-19 13:19:50,293:INFO:Initializing create_model()
2025-01-19 13:19:50,293:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:19:50,293:INFO:Checking exceptions
2025-01-19 13:19:50,299:INFO:Importing libraries
2025-01-19 13:19:50,299:INFO:Copying training dataset
2025-01-19 13:19:50,299:INFO:Defining folds
2025-01-19 13:19:50,299:INFO:Declaring metric variables
2025-01-19 13:19:50,299:INFO:Importing untrained model
2025-01-19 13:19:50,299:INFO:Declaring custom model
2025-01-19 13:19:50,307:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:19:50,307:INFO:Starting cross validation
2025-01-19 13:19:50,307:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:19:50,515:INFO:Calculating mean and std
2025-01-19 13:19:50,515:INFO:Creating metrics dataframe
2025-01-19 13:19:50,515:INFO:Finalizing model
2025-01-19 13:19:50,550:INFO:Uploading results into container
2025-01-19 13:19:50,550:INFO:Uploading model into container now
2025-01-19 13:19:50,550:INFO:_master_model_container: 38
2025-01-19 13:19:50,556:INFO:_display_container: 5
2025-01-19 13:19:50,556:INFO:BayesianRidge()
2025-01-19 13:19:50,556:INFO:create_model() successfully completed......................................
2025-01-19 13:19:50,703:INFO:SubProcess create_model() end ==================================
2025-01-19 13:19:50,703:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-19 13:19:50,703:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-19 13:19:50,703:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 13:19:50,703:INFO:choose_better completed
2025-01-19 13:19:50,716:INFO:_master_model_container: 38
2025-01-19 13:19:50,716:INFO:_display_container: 4
2025-01-19 13:19:50,716:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:19:50,716:INFO:tune_model() successfully completed......................................
2025-01-19 13:20:10,223:INFO:Initializing tune_model()
2025-01-19 13:20:10,223:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>)
2025-01-19 13:20:10,223:INFO:Checking exceptions
2025-01-19 13:20:10,244:INFO:Copying training dataset
2025-01-19 13:20:10,247:INFO:Checking base model
2025-01-19 13:20:10,247:INFO:Base model : Bayesian Ridge
2025-01-19 13:20:10,253:INFO:Declaring metric variables
2025-01-19 13:20:10,257:INFO:Defining Hyperparameters
2025-01-19 13:20:10,483:INFO:Tuning with n_jobs=-1
2025-01-19 13:20:10,483:INFO:Initializing RandomizedSearchCV
2025-01-19 13:20:11,955:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 13:20:11,955:INFO:Hyperparameter search completed
2025-01-19 13:20:11,955:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:11,961:INFO:Initializing create_model()
2025-01-19 13:20:11,961:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CD89BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 13:20:11,961:INFO:Checking exceptions
2025-01-19 13:20:11,962:INFO:Importing libraries
2025-01-19 13:20:11,962:INFO:Copying training dataset
2025-01-19 13:20:11,970:INFO:Defining folds
2025-01-19 13:20:11,970:INFO:Declaring metric variables
2025-01-19 13:20:11,976:INFO:Importing untrained model
2025-01-19 13:20:11,977:INFO:Declaring custom model
2025-01-19 13:20:11,983:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:11,987:INFO:Starting cross validation
2025-01-19 13:20:11,995:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:12,198:INFO:Calculating mean and std
2025-01-19 13:20:12,198:INFO:Creating metrics dataframe
2025-01-19 13:20:12,209:INFO:Finalizing model
2025-01-19 13:20:12,259:INFO:Uploading results into container
2025-01-19 13:20:12,260:INFO:Uploading model into container now
2025-01-19 13:20:12,261:INFO:_master_model_container: 39
2025-01-19 13:20:12,261:INFO:_display_container: 5
2025-01-19 13:20:12,262:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:12,262:INFO:create_model() successfully completed......................................
2025-01-19 13:20:12,439:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:12,439:INFO:choose_better activated
2025-01-19 13:20:12,439:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:12,439:INFO:Initializing create_model()
2025-01-19 13:20:12,439:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:20:12,439:INFO:Checking exceptions
2025-01-19 13:20:12,449:INFO:Importing libraries
2025-01-19 13:20:12,449:INFO:Copying training dataset
2025-01-19 13:20:12,454:INFO:Defining folds
2025-01-19 13:20:12,455:INFO:Declaring metric variables
2025-01-19 13:20:12,455:INFO:Importing untrained model
2025-01-19 13:20:12,455:INFO:Declaring custom model
2025-01-19 13:20:12,455:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:12,456:INFO:Starting cross validation
2025-01-19 13:20:12,456:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:12,654:INFO:Calculating mean and std
2025-01-19 13:20:12,654:INFO:Creating metrics dataframe
2025-01-19 13:20:12,654:INFO:Finalizing model
2025-01-19 13:20:12,691:INFO:Uploading results into container
2025-01-19 13:20:12,691:INFO:Uploading model into container now
2025-01-19 13:20:12,691:INFO:_master_model_container: 40
2025-01-19 13:20:12,691:INFO:_display_container: 6
2025-01-19 13:20:12,691:INFO:BayesianRidge()
2025-01-19 13:20:12,691:INFO:create_model() successfully completed......................................
2025-01-19 13:20:12,862:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:12,862:INFO:BayesianRidge() result for R2 is 0.4007
2025-01-19 13:20:12,862:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for R2 is 0.4048
2025-01-19 13:20:12,862:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 13:20:12,862:INFO:choose_better completed
2025-01-19 13:20:12,876:INFO:_master_model_container: 40
2025-01-19 13:20:12,876:INFO:_display_container: 5
2025-01-19 13:20:12,876:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:12,876:INFO:tune_model() successfully completed......................................
2025-01-19 13:20:21,481:INFO:Initializing tune_model()
2025-01-19 13:20:21,481:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>)
2025-01-19 13:20:21,481:INFO:Checking exceptions
2025-01-19 13:20:21,503:INFO:Copying training dataset
2025-01-19 13:20:21,509:INFO:Checking base model
2025-01-19 13:20:21,509:INFO:Base model : Bayesian Ridge
2025-01-19 13:20:21,513:INFO:Declaring metric variables
2025-01-19 13:20:21,524:INFO:Defining Hyperparameters
2025-01-19 13:20:21,785:INFO:Tuning with n_jobs=-1
2025-01-19 13:20:21,785:INFO:Initializing RandomizedSearchCV
2025-01-19 13:20:23,321:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 13:20:23,321:INFO:Hyperparameter search completed
2025-01-19 13:20:23,321:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:23,321:INFO:Initializing create_model()
2025-01-19 13:20:23,321:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025CEB3B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 13:20:23,321:INFO:Checking exceptions
2025-01-19 13:20:23,321:INFO:Importing libraries
2025-01-19 13:20:23,321:INFO:Copying training dataset
2025-01-19 13:20:23,330:INFO:Defining folds
2025-01-19 13:20:23,330:INFO:Declaring metric variables
2025-01-19 13:20:23,337:INFO:Importing untrained model
2025-01-19 13:20:23,337:INFO:Declaring custom model
2025-01-19 13:20:23,341:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:23,351:INFO:Starting cross validation
2025-01-19 13:20:23,354:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:23,561:INFO:Calculating mean and std
2025-01-19 13:20:23,564:INFO:Creating metrics dataframe
2025-01-19 13:20:23,574:INFO:Finalizing model
2025-01-19 13:20:23,633:INFO:Uploading results into container
2025-01-19 13:20:23,633:INFO:Uploading model into container now
2025-01-19 13:20:23,633:INFO:_master_model_container: 41
2025-01-19 13:20:23,640:INFO:_display_container: 6
2025-01-19 13:20:23,640:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:23,640:INFO:create_model() successfully completed......................................
2025-01-19 13:20:23,878:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:23,878:INFO:choose_better activated
2025-01-19 13:20:23,882:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:23,882:INFO:Initializing create_model()
2025-01-19 13:20:23,882:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:20:23,882:INFO:Checking exceptions
2025-01-19 13:20:23,882:INFO:Importing libraries
2025-01-19 13:20:23,882:INFO:Copying training dataset
2025-01-19 13:20:23,890:INFO:Defining folds
2025-01-19 13:20:23,890:INFO:Declaring metric variables
2025-01-19 13:20:23,890:INFO:Importing untrained model
2025-01-19 13:20:23,890:INFO:Declaring custom model
2025-01-19 13:20:23,890:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:23,890:INFO:Starting cross validation
2025-01-19 13:20:23,890:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:24,107:INFO:Calculating mean and std
2025-01-19 13:20:24,107:INFO:Creating metrics dataframe
2025-01-19 13:20:24,109:INFO:Finalizing model
2025-01-19 13:20:24,150:INFO:Uploading results into container
2025-01-19 13:20:24,151:INFO:Uploading model into container now
2025-01-19 13:20:24,152:INFO:_master_model_container: 42
2025-01-19 13:20:24,152:INFO:_display_container: 7
2025-01-19 13:20:24,152:INFO:BayesianRidge()
2025-01-19 13:20:24,152:INFO:create_model() successfully completed......................................
2025-01-19 13:20:24,314:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:24,314:INFO:BayesianRidge() result for R2 is 0.4007
2025-01-19 13:20:24,314:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for R2 is 0.4048
2025-01-19 13:20:24,322:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 13:20:24,322:INFO:choose_better completed
2025-01-19 13:20:24,335:INFO:_master_model_container: 42
2025-01-19 13:20:24,335:INFO:_display_container: 6
2025-01-19 13:20:24,335:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:24,336:INFO:tune_model() successfully completed......................................
2025-01-19 13:20:45,119:INFO:Initializing tune_model()
2025-01-19 13:20:45,119:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>)
2025-01-19 13:20:45,119:INFO:Checking exceptions
2025-01-19 13:20:45,143:INFO:Copying training dataset
2025-01-19 13:20:45,147:INFO:Checking base model
2025-01-19 13:20:45,148:INFO:Base model : Bayesian Ridge
2025-01-19 13:20:45,152:INFO:Declaring metric variables
2025-01-19 13:20:45,157:INFO:Defining Hyperparameters
2025-01-19 13:20:45,431:INFO:Tuning with n_jobs=-1
2025-01-19 13:20:45,431:INFO:Initializing RandomizedSearchCV
2025-01-19 13:20:46,980:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 13:20:46,980:INFO:Hyperparameter search completed
2025-01-19 13:20:46,980:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:46,980:INFO:Initializing create_model()
2025-01-19 13:20:46,986:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002025D0F7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 13:20:46,986:INFO:Checking exceptions
2025-01-19 13:20:46,987:INFO:Importing libraries
2025-01-19 13:20:46,987:INFO:Copying training dataset
2025-01-19 13:20:46,994:INFO:Defining folds
2025-01-19 13:20:46,994:INFO:Declaring metric variables
2025-01-19 13:20:46,994:INFO:Importing untrained model
2025-01-19 13:20:46,994:INFO:Declaring custom model
2025-01-19 13:20:47,005:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:47,013:INFO:Starting cross validation
2025-01-19 13:20:47,017:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:47,240:INFO:Calculating mean and std
2025-01-19 13:20:47,244:INFO:Creating metrics dataframe
2025-01-19 13:20:47,254:INFO:Finalizing model
2025-01-19 13:20:47,320:INFO:Uploading results into container
2025-01-19 13:20:47,322:INFO:Uploading model into container now
2025-01-19 13:20:47,323:INFO:_master_model_container: 43
2025-01-19 13:20:47,323:INFO:_display_container: 7
2025-01-19 13:20:47,324:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:47,324:INFO:create_model() successfully completed......................................
2025-01-19 13:20:47,476:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:47,476:INFO:choose_better activated
2025-01-19 13:20:47,481:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:47,482:INFO:Initializing create_model()
2025-01-19 13:20:47,482:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:20:47,483:INFO:Checking exceptions
2025-01-19 13:20:47,485:INFO:Importing libraries
2025-01-19 13:20:47,485:INFO:Copying training dataset
2025-01-19 13:20:47,491:INFO:Defining folds
2025-01-19 13:20:47,491:INFO:Declaring metric variables
2025-01-19 13:20:47,491:INFO:Importing untrained model
2025-01-19 13:20:47,491:INFO:Declaring custom model
2025-01-19 13:20:47,492:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:20:47,492:INFO:Starting cross validation
2025-01-19 13:20:47,493:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:20:47,693:INFO:Calculating mean and std
2025-01-19 13:20:47,695:INFO:Creating metrics dataframe
2025-01-19 13:20:47,695:INFO:Finalizing model
2025-01-19 13:20:47,723:INFO:Uploading results into container
2025-01-19 13:20:47,723:INFO:Uploading model into container now
2025-01-19 13:20:47,723:INFO:_master_model_container: 44
2025-01-19 13:20:47,723:INFO:_display_container: 8
2025-01-19 13:20:47,723:INFO:BayesianRidge()
2025-01-19 13:20:47,723:INFO:create_model() successfully completed......................................
2025-01-19 13:20:47,883:INFO:SubProcess create_model() end ==================================
2025-01-19 13:20:47,883:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-19 13:20:47,883:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-19 13:20:47,883:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 13:20:47,883:INFO:choose_better completed
2025-01-19 13:20:47,897:INFO:_master_model_container: 44
2025-01-19 13:20:47,897:INFO:_display_container: 7
2025-01-19 13:20:47,897:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:20:47,897:INFO:tune_model() successfully completed......................................
2025-01-19 13:20:56,204:INFO:Initializing plot_model()
2025-01-19 13:20:56,205:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:20:56,205:INFO:Checking exceptions
2025-01-19 13:20:56,209:INFO:Preloading libraries
2025-01-19 13:20:56,210:INFO:Copying training dataset
2025-01-19 13:20:56,210:INFO:Plot type: residuals
2025-01-19 13:20:56,406:INFO:Fitting Model
2025-01-19 13:20:56,407:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 13:20:56,460:INFO:Scoring test/hold-out set
2025-01-19 13:20:56,918:INFO:Visual Rendered Successfully
2025-01-19 13:20:57,084:INFO:plot_model() successfully completed......................................
2025-01-19 13:20:57,084:INFO:Initializing plot_model()
2025-01-19 13:20:57,084:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:20:57,084:INFO:Checking exceptions
2025-01-19 13:20:57,093:INFO:Preloading libraries
2025-01-19 13:20:57,093:INFO:Copying training dataset
2025-01-19 13:20:57,093:INFO:Plot type: error
2025-01-19 13:20:57,225:INFO:Fitting Model
2025-01-19 13:20:57,225:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 13:20:57,225:INFO:Scoring test/hold-out set
2025-01-19 13:20:57,597:INFO:Visual Rendered Successfully
2025-01-19 13:20:57,746:INFO:plot_model() successfully completed......................................
2025-01-19 13:20:57,747:INFO:Initializing plot_model()
2025-01-19 13:20:57,747:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:20:57,747:INFO:Checking exceptions
2025-01-19 13:20:57,751:INFO:Preloading libraries
2025-01-19 13:20:57,752:INFO:Copying training dataset
2025-01-19 13:20:57,752:INFO:Plot type: feature
2025-01-19 13:20:58,070:INFO:Visual Rendered Successfully
2025-01-19 13:20:58,334:INFO:plot_model() successfully completed......................................
2025-01-19 13:20:58,334:INFO:Initializing plot_model()
2025-01-19 13:20:58,334:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:20:58,334:INFO:Checking exceptions
2025-01-19 13:20:58,347:INFO:Preloading libraries
2025-01-19 13:20:58,347:INFO:Copying training dataset
2025-01-19 13:20:58,347:INFO:Plot type: cooks
2025-01-19 13:20:58,626:INFO:Fitting Model
2025-01-19 13:20:58,952:INFO:Visual Rendered Successfully
2025-01-19 13:20:59,112:INFO:plot_model() successfully completed......................................
2025-01-19 13:23:44,836:INFO:Initializing evaluate_model()
2025-01-19 13:23:44,836:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 13:23:44,848:INFO:Initializing plot_model()
2025-01-19 13:23:44,849:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:23:44,849:INFO:Checking exceptions
2025-01-19 13:23:44,851:INFO:Preloading libraries
2025-01-19 13:23:44,852:INFO:Copying training dataset
2025-01-19 13:23:44,852:INFO:Plot type: pipeline
2025-01-19 13:23:45,045:INFO:Visual Rendered Successfully
2025-01-19 13:23:45,217:INFO:plot_model() successfully completed......................................
2025-01-19 13:23:52,190:INFO:Initializing evaluate_model()
2025-01-19 13:23:52,191:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 13:23:52,205:INFO:Initializing plot_model()
2025-01-19 13:23:52,205:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:23:52,205:INFO:Checking exceptions
2025-01-19 13:23:52,208:INFO:Preloading libraries
2025-01-19 13:23:52,209:INFO:Copying training dataset
2025-01-19 13:23:52,209:INFO:Plot type: pipeline
2025-01-19 13:23:52,386:INFO:Visual Rendered Successfully
2025-01-19 13:23:52,565:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:07,965:INFO:Initializing plot_model()
2025-01-19 13:24:07,965:INFO:plot_model(plot=parameter, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:07,965:INFO:Checking exceptions
2025-01-19 13:24:07,968:INFO:Preloading libraries
2025-01-19 13:24:07,969:INFO:Copying training dataset
2025-01-19 13:24:07,969:INFO:Plot type: parameter
2025-01-19 13:24:07,973:INFO:Visual Rendered Successfully
2025-01-19 13:24:08,127:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:17,303:INFO:Initializing plot_model()
2025-01-19 13:24:17,303:INFO:plot_model(plot=residuals, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:17,303:INFO:Checking exceptions
2025-01-19 13:24:17,306:INFO:Preloading libraries
2025-01-19 13:24:17,306:INFO:Copying training dataset
2025-01-19 13:24:17,306:INFO:Plot type: residuals
2025-01-19 13:24:17,430:INFO:Fitting Model
2025-01-19 13:24:17,430:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 13:24:17,477:INFO:Scoring test/hold-out set
2025-01-19 13:24:17,922:INFO:Visual Rendered Successfully
2025-01-19 13:24:18,085:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:20,208:INFO:Initializing plot_model()
2025-01-19 13:24:20,208:INFO:plot_model(plot=error, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:20,208:INFO:Checking exceptions
2025-01-19 13:24:20,212:INFO:Preloading libraries
2025-01-19 13:24:20,213:INFO:Copying training dataset
2025-01-19 13:24:20,213:INFO:Plot type: error
2025-01-19 13:24:20,308:INFO:Fitting Model
2025-01-19 13:24:20,308:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 13:24:20,308:INFO:Scoring test/hold-out set
2025-01-19 13:24:20,622:INFO:Visual Rendered Successfully
2025-01-19 13:24:20,772:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:22,082:INFO:Initializing plot_model()
2025-01-19 13:24:22,083:INFO:plot_model(plot=cooks, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:22,083:INFO:Checking exceptions
2025-01-19 13:24:22,086:INFO:Preloading libraries
2025-01-19 13:24:22,086:INFO:Copying training dataset
2025-01-19 13:24:22,086:INFO:Plot type: cooks
2025-01-19 13:24:22,192:INFO:Fitting Model
2025-01-19 13:24:22,455:INFO:Visual Rendered Successfully
2025-01-19 13:24:22,642:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:23,904:INFO:Initializing plot_model()
2025-01-19 13:24:23,904:INFO:plot_model(plot=rfe, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:23,905:INFO:Checking exceptions
2025-01-19 13:24:23,907:INFO:Preloading libraries
2025-01-19 13:24:23,907:INFO:Copying training dataset
2025-01-19 13:24:23,907:INFO:Plot type: rfe
2025-01-19 13:24:24,019:INFO:Fitting Model
2025-01-19 13:24:26,039:INFO:Visual Rendered Successfully
2025-01-19 13:24:26,180:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:51,154:INFO:Initializing plot_model()
2025-01-19 13:24:51,154:INFO:plot_model(plot=learning, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:51,154:INFO:Checking exceptions
2025-01-19 13:24:51,157:INFO:Preloading libraries
2025-01-19 13:24:51,157:INFO:Copying training dataset
2025-01-19 13:24:51,157:INFO:Plot type: learning
2025-01-19 13:24:51,261:INFO:Fitting Model
2025-01-19 13:24:51,740:INFO:Visual Rendered Successfully
2025-01-19 13:24:51,905:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:55,070:INFO:Initializing plot_model()
2025-01-19 13:24:55,071:INFO:plot_model(plot=manifold, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:55,071:INFO:Checking exceptions
2025-01-19 13:24:55,073:INFO:Preloading libraries
2025-01-19 13:24:55,073:INFO:Copying training dataset
2025-01-19 13:24:55,073:INFO:Plot type: manifold
2025-01-19 13:24:55,195:INFO:Fitting & Transforming Model
2025-01-19 13:24:56,297:INFO:Visual Rendered Successfully
2025-01-19 13:24:56,441:INFO:plot_model() successfully completed......................................
2025-01-19 13:24:57,246:INFO:Initializing plot_model()
2025-01-19 13:24:57,246:INFO:plot_model(plot=vc, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:24:57,246:INFO:Checking exceptions
2025-01-19 13:24:57,246:INFO:Preloading libraries
2025-01-19 13:24:57,251:INFO:Copying training dataset
2025-01-19 13:24:57,251:INFO:Plot type: vc
2025-01-19 13:24:57,251:INFO:Determining param_name
2025-01-19 13:24:57,251:INFO:param_name: alpha_1
2025-01-19 13:24:57,368:INFO:Fitting Model
2025-01-19 13:24:57,886:INFO:Visual Rendered Successfully
2025-01-19 13:24:58,015:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:02,985:INFO:Initializing plot_model()
2025-01-19 13:25:02,985:INFO:plot_model(plot=feature, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:02,985:INFO:Checking exceptions
2025-01-19 13:25:02,988:INFO:Preloading libraries
2025-01-19 13:25:02,988:INFO:Copying training dataset
2025-01-19 13:25:02,988:INFO:Plot type: feature
2025-01-19 13:25:03,198:INFO:Visual Rendered Successfully
2025-01-19 13:25:03,356:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:05,248:INFO:Initializing plot_model()
2025-01-19 13:25:05,248:INFO:plot_model(plot=feature_all, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:05,248:INFO:Checking exceptions
2025-01-19 13:25:05,251:INFO:Preloading libraries
2025-01-19 13:25:05,252:INFO:Copying training dataset
2025-01-19 13:25:05,252:INFO:Plot type: feature_all
2025-01-19 13:25:05,489:INFO:Visual Rendered Successfully
2025-01-19 13:25:05,633:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:08,616:INFO:Initializing plot_model()
2025-01-19 13:25:08,617:INFO:plot_model(plot=feature, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:08,617:INFO:Checking exceptions
2025-01-19 13:25:08,619:INFO:Preloading libraries
2025-01-19 13:25:08,620:INFO:Copying training dataset
2025-01-19 13:25:08,620:INFO:Plot type: feature
2025-01-19 13:25:08,817:INFO:Visual Rendered Successfully
2025-01-19 13:25:09,017:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:09,851:INFO:Initializing plot_model()
2025-01-19 13:25:09,851:INFO:plot_model(plot=feature_all, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:09,851:INFO:Checking exceptions
2025-01-19 13:25:09,855:INFO:Preloading libraries
2025-01-19 13:25:09,856:INFO:Copying training dataset
2025-01-19 13:25:09,856:INFO:Plot type: feature_all
2025-01-19 13:25:10,127:INFO:Visual Rendered Successfully
2025-01-19 13:25:10,293:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:13,845:INFO:Initializing plot_model()
2025-01-19 13:25:13,845:INFO:plot_model(plot=feature, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:13,845:INFO:Checking exceptions
2025-01-19 13:25:13,849:INFO:Preloading libraries
2025-01-19 13:25:13,850:INFO:Copying training dataset
2025-01-19 13:25:13,850:INFO:Plot type: feature
2025-01-19 13:25:14,060:INFO:Visual Rendered Successfully
2025-01-19 13:25:14,267:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:17,229:INFO:Initializing plot_model()
2025-01-19 13:25:17,229:INFO:plot_model(plot=feature_all, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:17,229:INFO:Checking exceptions
2025-01-19 13:25:17,233:INFO:Preloading libraries
2025-01-19 13:25:17,233:INFO:Copying training dataset
2025-01-19 13:25:17,233:INFO:Plot type: feature_all
2025-01-19 13:25:17,508:INFO:Visual Rendered Successfully
2025-01-19 13:25:17,707:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:20,721:INFO:Initializing plot_model()
2025-01-19 13:25:20,721:INFO:plot_model(plot=tree, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:20,721:INFO:Checking exceptions
2025-01-19 13:25:33,452:INFO:Initializing plot_model()
2025-01-19 13:25:33,452:INFO:plot_model(plot=residuals_interactive, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:33,453:INFO:Checking exceptions
2025-01-19 13:25:33,455:INFO:Preloading libraries
2025-01-19 13:25:33,455:INFO:Copying training dataset
2025-01-19 13:25:33,455:INFO:Plot type: residuals_interactive
2025-01-19 13:25:33,581:INFO:Calculated model residuals
2025-01-19 13:25:35,645:INFO:Calculated Tunkey-Anscombe Plot
2025-01-19 13:25:35,787:INFO:Calculated Normal QQ Plot
2025-01-19 13:25:35,972:INFO:Calculated Scale-Location Plot
2025-01-19 13:25:36,156:INFO:Calculated Residual vs Leverage Plot inc. Cook's distance
2025-01-19 13:25:36,443:INFO:Visual Rendered Successfully
2025-01-19 13:25:36,644:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:36,660:INFO:Initializing plot_model()
2025-01-19 13:25:36,660:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, system=True)
2025-01-19 13:25:36,661:INFO:Checking exceptions
2025-01-19 13:25:36,662:INFO:Preloading libraries
2025-01-19 13:25:36,662:INFO:Copying training dataset
2025-01-19 13:25:36,662:INFO:Plot type: pipeline
2025-01-19 13:25:36,822:INFO:Visual Rendered Successfully
2025-01-19 13:25:36,975:INFO:plot_model() successfully completed......................................
2025-01-19 13:25:42,253:INFO:Initializing finalize_model()
2025-01-19 13:25:42,253:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-19 13:25:42,254:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 13:25:42,259:INFO:Initializing create_model()
2025-01-19 13:25:42,259:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:25:42,259:INFO:Checking exceptions
2025-01-19 13:25:42,261:INFO:Importing libraries
2025-01-19 13:25:42,261:INFO:Copying training dataset
2025-01-19 13:25:42,262:INFO:Defining folds
2025-01-19 13:25:42,262:INFO:Declaring metric variables
2025-01-19 13:25:42,262:INFO:Importing untrained model
2025-01-19 13:25:42,262:INFO:Declaring custom model
2025-01-19 13:25:42,262:INFO:Bayesian Ridge Imported successfully
2025-01-19 13:25:42,264:INFO:Cross validation set to False
2025-01-19 13:25:42,264:INFO:Fitting Model
2025-01-19 13:25:42,311:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 13:25:42,311:INFO:create_model() successfully completed......................................
2025-01-19 13:25:42,475:INFO:_master_model_container: 44
2025-01-19 13:25:42,475:INFO:_display_container: 7
2025-01-19 13:25:42,485:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 13:25:42,486:INFO:finalize_model() successfully completed......................................
2025-01-19 13:25:50,007:INFO:Initializing predict_model()
2025-01-19 13:25:50,008:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002025CD9D040>)
2025-01-19 13:25:50,009:INFO:Checking exceptions
2025-01-19 13:25:50,009:INFO:Preloading libraries
2025-01-19 13:25:50,012:INFO:Set up data.
2025-01-19 13:25:50,019:INFO:Set up index.
2025-01-19 13:25:50,038:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning:

'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.


2025-01-19 13:26:27,592:INFO:Initializing save_model()
2025-01-19 13:26:27,592:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-19 13:26:27,592:INFO:Adding model into prep_pipe
2025-01-19 13:26:27,592:WARNING:Only Model saved as it was a pipeline.
2025-01-19 13:26:27,599:INFO:./saved_models/pycaret_best_tips_regression_model.pkl saved in current working directory
2025-01-19 13:26:27,616:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 13:26:27,616:INFO:save_model() successfully completed......................................
2025-01-19 13:26:40,620:INFO:Initializing load_model()
2025-01-19 13:26:40,620:INFO:load_model(model_name=./saved_models/pycaret_best_tips_regression_model, platform=None, authentication=None, verbose=True)
2025-01-19 13:26:44,387:INFO:Initializing predict_model()
2025-01-19 13:26:44,387:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002025CDABEE0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\aammar\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002025D71B820>)
2025-01-19 13:26:44,387:INFO:Checking exceptions
2025-01-19 13:26:44,387:INFO:Preloading libraries
2025-01-19 13:26:44,390:INFO:Set up data.
2025-01-19 13:26:44,395:INFO:Set up index.
2025-01-19 13:26:44,412:WARNING:c:\Users\aammar\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning:

'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.


